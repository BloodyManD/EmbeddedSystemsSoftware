
niosII_training.elf:     file format elf32-littlenios2
niosII_training.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000238

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000071c4 memsz 0x0000731c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005508  00000238  00000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00005740  00005740  00006740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00005778  00005778  00006778  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  000071e4  000071e4  000081e4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0000733c  0000733c  000081e4  2**0
                  CONTENTS
  7 .instruction_tcm 00000000  10000000  10000000  000081e4  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000009b8  00000000  00000000  00008218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00017c4d  00000000  00000000  00008bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006988  00000000  00000000  0002081d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000098f4  00000000  00000000  000271a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00001508  00000000  00000000  00030a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00002701  00000000  00000000  00031fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00005f1e  00000000  00000000  000346a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000020  00000000  00000000  0003a5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000888  00000000  00000000  0003a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  0003d286  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0003d289  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003d28c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003d28d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003d28e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003d292  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003d296  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0003d29a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0003d2a3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0003d2ac  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  0003d2b5  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  0003d2bb  2**0
                  CONTENTS, READONLY
 30 .jdi          0000440b  00000000  00000000  0003d2eb  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00065aa0  00000000  00000000  000416f6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000238 l    d  .text	00000000 .text
00005740 l    d  .rodata	00000000 .rodata
00005778 l    d  .rwdata	00000000 .rwdata
000071e4 l    d  .bss	00000000 .bss
0000733c l    d  .sdram	00000000 .sdram
10000000 l    d  .instruction_tcm	00000000 .instruction_tcm
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosII_training_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 simple.c
00000280 l     F .text	00000050 handle_button_interrupts
000002d0 l     F .text	00000064 init_button_pio
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000005b4 l     F .text	00000008 __fp_lock
000005c8 l     F .text	00000008 __fp_unlock
000005d0 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00005778 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00002430 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00003270 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000337c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000033a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000372c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000380c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000039e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000071d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003c28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003d5c l     F .text	00000034 alt_dev_reg
0000614c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004054 l     F .text	0000020c altera_avalon_jtag_uart_irq
00004260 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000048a4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004ad8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004d1c l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00004e48 l     F .text	0000003c alt_get_errno
00004e84 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00007208 g     O .bss	00000004 alt_instruction_exception_handler
00003064 g     F .text	00000058 _isatty_r
0000391c g     F .text	0000007c alt_main
00000440 g     F .text	000000cc _puts_r
0000723c g     O .bss	00000100 alt_irq
00002cf4 g     F .text	00000064 _lseek_r
0000733c g       *ABS*	00000000 __alt_heap_start
000021ac g     F .text	0000005c __sseek
00000908 g     F .text	00000010 __sinit
00000738 g     F .text	00000068 __sfmoreglue
000039bc g     F .text	00000024 __malloc_unlock
000018f8 g     F .text	0000012c memmove
000008f4 g     F .text	00000014 _cleanup
0000523c g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g       *ABS*	00000000 __alt_mem_instruction_tcm
00000000 g     F .entry	00000000 __reset
000071e4 g     O .bss	00000004 edge_capture
00003004 g     F .text	00000060 _fstat_r
000071f4 g     O .bss	00000004 errno
00002124 g     F .text	00000008 __seofread
00007200 g     O .bss	00000004 alt_argv
0000f1ac g       *ABS*	00000000 _gp
00005fcc g     O .rwdata	00000180 alt_fd_list
00005260 g     F .text	00000090 alt_find_dev
000017f8 g     F .text	00000100 memcpy
000005bc g     F .text	0000000c _cleanup_r
00004dcc g     F .text	0000007c alt_io_redirect
00005740 g       *ABS*	00000000 __DTOR_END__
0000050c g     F .text	00000010 puts
00004c84 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0000445c g     F .text	00000220 altera_avalon_jtag_uart_read
000031b0 g     F .text	00000064 .hidden __udivsi3
00003768 g     F .text	000000a4 isatty
000071f0 g     O .bss	00000004 __malloc_top_pad
00000950 g     F .text	000004b8 __sfvwrite_r
00002078 g     F .text	00000058 _sbrk_r
00002fa0 g     F .text	00000064 _read_r
000071cc g     O .rwdata	00000004 alt_max_fd
000024f0 g     F .text	00000070 _fclose_r
00002858 g     F .text	00000084 fflush
000071ec g     O .bss	00000004 __malloc_max_sbrked_mem
00003848 g     F .text	000000d4 lseek
000071ac g     O .rwdata	00000004 _global_impure_ptr
00001b14 g     F .text	00000564 _realloc_r
0000733c g       *ABS*	00000000 __bss_end
00003644 g     F .text	000000e8 alt_iic_isr_register
00005134 g     F .text	00000108 alt_tick
00000928 g     F .text	00000014 __fp_lock_all
000035f8 g     F .text	0000004c alt_ic_irq_enabled
00005090 g     F .text	000000a4 alt_alarm_stop
000071f8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000c8 alt_irq_handler
00005fa4 g     O .rwdata	00000028 alt_dev_null
000071c4 g     O .rwdata	00000008 alt_dev_list
00003c64 g     F .text	000000f8 write
000033e4 g     F .text	000000b0 fstat
00003214 g     F .text	0000005c .hidden __umodsi3
0000733c g       *ABS*	00000000 end
00003f94 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00005740 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00004920 g     F .text	00000084 alt_avalon_timer_sc_init
0000467c g     F .text	00000228 altera_avalon_jtag_uart_write
00000918 g     F .text	00000004 __sfp_lock_acquire
00001728 g     F .text	000000d0 memchr
000029f8 g     F .text	000002fc _free_r
000055e8 g     F .text	00000120 __call_exitprocs
000071b4 g     O .rwdata	00000004 __malloc_sbrk_base
00000238 g     F .text	00000048 _start
0000720c g     O .bss	00000004 _alt_tick_rate
00007210 g     O .bss	00000004 _alt_nticks
00003a1c g     F .text	000000fc read
00003dcc g     F .text	00000064 alt_sys_init
00005558 g     F .text	00000090 __register_exitproc
00004300 g     F .text	00000068 altera_avalon_jtag_uart_close
00007214 g     O .bss	00000028 __malloc_current_mallinfo
00003e30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000053f8 g     F .text	000000a0 alt_get_fd
000023d8 g     F .text	00000058 _close_r
000054e0 g     F .text	00000078 memcmp
00003ef0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000733c g       *ABS*	00000000 __alt_stack_base
00003f40 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002274 g     F .text	00000164 __swsetup_r
000007a0 g     F .text	00000154 __sfp
00005b9c g     O .rwdata	00000408 __malloc_av_
00000924 g     F .text	00000004 __sinit_lock_release
000020d0 g     F .text	00000054 __sread
000052f0 g     F .text	00000108 alt_find_file
00004b14 g     F .text	000000a8 alt_dev_llist_insert
00003998 g     F .text	00000024 __malloc_lock
00003b70 g     F .text	000000b8 sbrk
000027f8 g     F .text	00000060 _fflush_r
000071e4 g       *ABS*	00000000 __bss_start
00001a24 g     F .text	000000f0 memset
00000334 g     F .text	0000010c main
00007204 g     O .bss	00000004 alt_envp
000071e8 g     O .bss	00000004 __malloc_max_total_mem
00003e90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002208 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00002560 g     F .text	00000070 fclose
00000f48 g     F .text	000007e0 _malloc_r
000071d0 g     O .rwdata	00000004 alt_errno
00000e08 g     F .text	00000098 _fwalk
000030bc g     F .text	00000080 .hidden __divsi3
000028dc g     F .text	0000011c _malloc_trim_r
00005740 g       *ABS*	00000000 __CTOR_END__
00005740 g       *ABS*	00000000 __DTOR_LIST__
00003d90 g     F .text	0000003c alt_irq_init
00003b18 g     F .text	00000058 alt_release_fd
00005498 g     F .text	00000014 atexit
00002210 g     F .text	00000064 _write_r
000071b0 g     O .rwdata	00000004 _impure_ptr
000071fc g     O .bss	00000004 alt_argc
000025d0 g     F .text	00000228 __sflush_r
00004c20 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
0000093c g     F .text	00000014 __fp_unlock_all
000071bc g     O .rwdata	00000008 alt_fs_list
00002f08 g     F .text	00000098 __swhatbuf_r
00003494 g     F .text	00000050 alt_ic_isr_register
000071e4 g       *ABS*	00000000 _edata
0000733c g       *ABS*	00000000 _end
00004368 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000356c g     F .text	0000008c alt_ic_irq_disable
0000212c g     F .text	00000080 __swrite
000071b8 g     O .rwdata	00000004 __malloc_trim_threshold
000054ac g     F .text	00000034 exit
00000ea0 g     F .text	000000a8 _fwalk_reent
0000313c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000091c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00005708 g     F .text	00000038 _exit
000049a4 g     F .text	00000134 alt_alarm_start
00002d58 g     F .text	000001b0 __smakebuf_r
0000051c g     F .text	00000098 strlen
00004f3c g     F .text	00000154 open
000071d4 g     O .rwdata	00000004 alt_priority_mask
000034e4 g     F .text	00000088 alt_ic_irq_enable
000071dc g     O .rwdata	00000008 alt_alarm_list
00004bbc g     F .text	00000064 _do_ctors
000032ac g     F .text	000000d0 close
00000920 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c40 	call	1c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001126 	beq	r2,zero,180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	00800034 	movhi	r2,0
 148:	1885883a 	add	r2,r3,r2
 14c:	10dc8f17 	ldw	r3,29244(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	00800034 	movhi	r2,0
 15c:	2085883a 	add	r2,r4,r2
 160:	109c9017 	ldw	r2,29248(r2)
 164:	1009883a 	mov	r4,r2
 168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 16c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 170:	0005313a 	rdctl	r2,ipending
 174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 178:	e0bffb17 	ldw	r2,-20(fp)
 17c:	00000706 	br	19c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 180:	e0bffe17 	ldw	r2,-8(fp)
 184:	1085883a 	add	r2,r2,r2
 188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 18c:	e0bffd17 	ldw	r2,-12(fp)
 190:	10800044 	addi	r2,r2,1
 194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 198:	003fe406 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 19c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a0:	e0bfff17 	ldw	r2,-4(fp)
 1a4:	103fde1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a8:	0001883a 	nop
}
 1ac:	0001883a 	nop
 1b0:	e037883a 	mov	sp,fp
 1b4:	dfc00117 	ldw	ra,4(sp)
 1b8:	df000017 	ldw	fp,0(sp)
 1bc:	dec00204 	addi	sp,sp,8
 1c0:	f800283a 	ret

000001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c4:	defffb04 	addi	sp,sp,-20
 1c8:	dfc00415 	stw	ra,16(sp)
 1cc:	df000315 	stw	fp,12(sp)
 1d0:	df000304 	addi	fp,sp,12
 1d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1d8:	000531fa 	rdctl	r2,exception
 1dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e0:	e0bfff17 	ldw	r2,-4(fp)
 1e4:	1004d0ba 	srli	r2,r2,2
 1e8:	108007cc 	andi	r2,r2,31
 1ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f0:	0005333a 	rdctl	r2,badaddr
 1f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f8:	d0a01717 	ldw	r2,-32676(gp)
 1fc:	10000726 	beq	r2,zero,21c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200:	d0a01717 	ldw	r2,-32676(gp)
 204:	e0ffff17 	ldw	r3,-4(fp)
 208:	e1bffe17 	ldw	r6,-8(fp)
 20c:	e17ffd17 	ldw	r5,-12(fp)
 210:	1809883a 	mov	r4,r3
 214:	103ee83a 	callr	r2
 218:	00000206 	br	224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 21c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 220:	0005883a 	mov	r2,zero
}
 224:	e037883a 	mov	sp,fp
 228:	dfc00117 	ldw	ra,4(sp)
 22c:	df000017 	ldw	fp,0(sp)
 230:	dec00204 	addi	sp,sp,8
 234:	f800283a 	ret

Disassembly of section .text:

00000238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     238:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
     23c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     244:	00bffd16 	blt	zero,r2,23c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     254:	d6bc6b14 	ori	gp,gp,61868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     25c:	109c7914 	ori	r2,r2,29156

    movhi r3, %hi(__bss_end)
     260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     264:	18dccf14 	ori	r3,r3,29500

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x40>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000391c0 	call	391c <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <alt_after_alt_main>

00000280 <handle_button_interrupts>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void handle_button_interrupts(void* context)
#else
static void handle_button_interrupts(void* context, alt_u32 id)
#endif
{
     280:	defffd04 	addi	sp,sp,-12
     284:	df000215 	stw	fp,8(sp)
     288:	df000204 	addi	fp,sp,8
     28c:	e13ffe15 	stw	r4,-8(fp)
/* Cast context to edge_capture's type. It is important that this
be declared volatile to avoid unwanted compiler optimization. */
volatile int* edge_capture_ptr = (volatile int*) context;
     290:	e0bffe17 	ldw	r2,-8(fp)
     294:	e0bfff15 	stw	r2,-4(fp)
/*
* Read the edge capture register on the button PIO.
* Store value.
*/
*edge_capture_ptr =
IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     298:	00820034 	movhi	r2,2048
     29c:	10c40b37 	ldwio	r3,4140(r2)
*edge_capture_ptr =
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	10c00015 	stw	r3,0(r2)
/* Write to the edge capture register to reset it. */
IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
     2a8:	0007883a 	mov	r3,zero
     2ac:	00820034 	movhi	r2,2048
     2b0:	10c40b35 	stwio	r3,4140(r2)
/* Read the PIO to delay ISR exit. This is done to prevent a
spurious interrupt in systems with high processor -> pio
latency and fast interrupts. */
IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     2b4:	00820034 	movhi	r2,2048
     2b8:	10840b37 	ldwio	r2,4140(r2)
}
     2bc:	0001883a 	nop
     2c0:	e037883a 	mov	sp,fp
     2c4:	df000017 	ldw	fp,0(sp)
     2c8:	dec00104 	addi	sp,sp,4
     2cc:	f800283a 	ret

000002d0 <init_button_pio>:

/* Initialize the button_pio. */
static void init_button_pio()
{
     2d0:	defffc04 	addi	sp,sp,-16
     2d4:	dfc00315 	stw	ra,12(sp)
     2d8:	df000215 	stw	fp,8(sp)
     2dc:	df000204 	addi	fp,sp,8
/* Recast the edge_capture pointer to match the
alt_irq_register() function prototype. */
void* edge_capture_ptr = (void*) &edge_capture;
     2e0:	d0a00e04 	addi	r2,gp,-32712
     2e4:	e0bfff15 	stw	r2,-4(fp)
/* Enable all 4 button interrupts. */
IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0xf);
     2e8:	00c003c4 	movi	r3,15
     2ec:	00820034 	movhi	r2,2048
     2f0:	10c40a35 	stwio	r3,4136(r2)
/* Reset the edge capture register. */
IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0x0);
     2f4:	0007883a 	mov	r3,zero
     2f8:	00820034 	movhi	r2,2048
     2fc:	10c40b35 	stwio	r3,4140(r2)
/* Register the ISR. */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
alt_ic_isr_register(BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID, BUTTONS_IRQ, handle_button_interrupts, edge_capture_ptr, 0x0);
     300:	d8000015 	stw	zero,0(sp)
     304:	e1ffff17 	ldw	r7,-4(fp)
     308:	01800034 	movhi	r6,0
     30c:	3180a004 	addi	r6,r6,640
     310:	01400084 	movi	r5,2
     314:	0009883a 	mov	r4,zero
     318:	00034940 	call	3494 <alt_ic_isr_register>
#else
alt_irq_register( BUTTON_PIO_IRQ, edge_capture_ptr, handle_button_interrupts );
#endif
}
     31c:	0001883a 	nop
     320:	e037883a 	mov	sp,fp
     324:	dfc00117 	ldw	ra,4(sp)
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00204 	addi	sp,sp,8
     330:	f800283a 	ret

00000334 <main>:

int main(void)
{
     334:	defffc04 	addi	sp,sp,-16
     338:	dfc00315 	stw	ra,12(sp)
     33c:	df000215 	stw	fp,8(sp)
     340:	df000204 	addi	fp,sp,8
	int buttons;  // Use to hold button pressed value
	int led = 0x01;  // Use to write to led
     344:	00800044 	movi	r2,1
     348:	e0bfff15 	stw	r2,-4(fp)

	printf("Simple\n");   // print a message to show that program is running
     34c:	01000034 	movhi	r4,0
     350:	2115d004 	addi	r4,r4,22336
     354:	000050c0 	call	50c <puts>

	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE,led); // write initial value to pio
     358:	e0ffff17 	ldw	r3,-4(fp)
     35c:	00820034 	movhi	r2,2048
     360:	10c40c35 	stwio	r3,4144(r2)
	init_button_pio();
     364:	00002d00 	call	2d0 <init_button_pio>
	while (1)
	{
//		buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE); // read buttons via pio
		buttons = edge_capture; // set buttons to current value of edge capture
     368:	d0a00e17 	ldw	r2,-32712(gp)
     36c:	e0bffe15 	stw	r2,-8(fp)
		if (buttons != NONE_PRESSED_IRQ)  // if button pressed
     370:	e0bffe17 	ldw	r2,-8(fp)
     374:	103ffc26 	beq	r2,zero,368 <main+0x34>
		{
			switch(buttons){
     378:	e0bffe17 	ldw	r2,-8(fp)
     37c:	10800220 	cmpeqi	r2,r2,8
     380:	1000271e 	bne	r2,zero,420 <main+0xec>
     384:	e0bffe17 	ldw	r2,-8(fp)
     388:	10800248 	cmpgei	r2,r2,9
     38c:	1000271e 	bne	r2,zero,42c <main+0xf8>
     390:	e0bffe17 	ldw	r2,-8(fp)
     394:	10800120 	cmpeqi	r2,r2,4
     398:	1000171e 	bne	r2,zero,3f8 <main+0xc4>
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	10800148 	cmpgei	r2,r2,5
     3a4:	1000211e 	bne	r2,zero,42c <main+0xf8>
     3a8:	e0bffe17 	ldw	r2,-8(fp)
     3ac:	10800060 	cmpeqi	r2,r2,1
     3b0:	1000041e 	bne	r2,zero,3c4 <main+0x90>
     3b4:	e0bffe17 	ldw	r2,-8(fp)
     3b8:	108000a0 	cmpeqi	r2,r2,2
     3bc:	1000041e 	bne	r2,zero,3d0 <main+0x9c>
     3c0:	00001a06 	br	42c <main+0xf8>
				case 0x1:{ // if KEY0 is pressed
					led = 0x01; // turn on rightmost LED
     3c4:	00800044 	movi	r2,1
     3c8:	e0bfff15 	stw	r2,-4(fp)
					break;
     3cc:	00001706 	br	42c <main+0xf8>
				}
				case 0x2:{ // if KEY1 is pressed
					if (led == 0x01) led = 0x80; // if rightmost LED is on move to leftmost
     3d0:	e0bfff17 	ldw	r2,-4(fp)
     3d4:	10800058 	cmpnei	r2,r2,1
     3d8:	1000031e 	bne	r2,zero,3e8 <main+0xb4>
     3dc:	00802004 	movi	r2,128
     3e0:	e0bfff15 	stw	r2,-4(fp)
					else led = led >> 1; // else move right
					break;
     3e4:	00001106 	br	42c <main+0xf8>
					else led = led >> 1; // else move right
     3e8:	e0bfff17 	ldw	r2,-4(fp)
     3ec:	1005d07a 	srai	r2,r2,1
     3f0:	e0bfff15 	stw	r2,-4(fp)
					break;
     3f4:	00000d06 	br	42c <main+0xf8>
				}
				case 0x4:{ // if KEY2 is pressed
					if (led == 0x80) led = 0x01; // if leftmost LED is on move to rightmost
     3f8:	e0bfff17 	ldw	r2,-4(fp)
     3fc:	10802018 	cmpnei	r2,r2,128
     400:	1000031e 	bne	r2,zero,410 <main+0xdc>
     404:	00800044 	movi	r2,1
     408:	e0bfff15 	stw	r2,-4(fp)
					else led = led << 1; // else move left
					break;
     40c:	00000706 	br	42c <main+0xf8>
					else led = led << 1; // else move left
     410:	e0bfff17 	ldw	r2,-4(fp)
     414:	1085883a 	add	r2,r2,r2
     418:	e0bfff15 	stw	r2,-4(fp)
					break;
     41c:	00000306 	br	42c <main+0xf8>
				}
				case 0x8:{ // if KEY3 is pressed
					led = 0x80; // turn on leftmost LED
     420:	00802004 	movi	r2,128
     424:	e0bfff15 	stw	r2,-4(fp)
					break;
     428:	0001883a 	nop
//			if (led >= 0x80)  // if pattern is 00000001 on board (leds in reverse order)
//				led = 0x01;  // reset pattern
//			else
//				led = led << 1;  // shift right on board (led0 is far left)

			IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE,led);  // write new value to pio
     42c:	e0ffff17 	ldw	r3,-4(fp)
     430:	00820034 	movhi	r2,2048
     434:	10c40c35 	stwio	r3,4144(r2)

//			usleep (DEBOUNCE);
//			while (buttons != NONE_PRESSED)  // wait for button release
//				buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);   // update
//			usleep (DEBOUNCE);
			edge_capture = 0x0; // reset edge_capture until next interrupt
     438:	d0200e15 	stw	zero,-32712(gp)
		buttons = edge_capture; // set buttons to current value of edge capture
     43c:	003fca06 	br	368 <main+0x34>

00000440 <_puts_r>:
     440:	defff504 	addi	sp,sp,-44
     444:	dc000815 	stw	r16,32(sp)
     448:	2021883a 	mov	r16,r4
     44c:	2809883a 	mov	r4,r5
     450:	dc400915 	stw	r17,36(sp)
     454:	dfc00a15 	stw	ra,40(sp)
     458:	2823883a 	mov	r17,r5
     45c:	000051c0 	call	51c <strlen>
     460:	11000044 	addi	r4,r2,1
     464:	d8800515 	stw	r2,20(sp)
     468:	00800044 	movi	r2,1
     46c:	00c00034 	movhi	r3,0
     470:	d8800715 	stw	r2,28(sp)
     474:	d8800404 	addi	r2,sp,16
     478:	18d5d204 	addi	r3,r3,22344
     47c:	d8800115 	stw	r2,4(sp)
     480:	00800084 	movi	r2,2
     484:	dc400415 	stw	r17,16(sp)
     488:	d8c00615 	stw	r3,24(sp)
     48c:	d9000315 	stw	r4,12(sp)
     490:	d8800215 	stw	r2,8(sp)
     494:	81400217 	ldw	r5,8(r16)
     498:	80000226 	beq	r16,zero,4a4 <_puts_r+0x64>
     49c:	80800e17 	ldw	r2,56(r16)
     4a0:	10001326 	beq	r2,zero,4f0 <_puts_r+0xb0>
     4a4:	2880030b 	ldhu	r2,12(r5)
     4a8:	10c8000c 	andi	r3,r2,8192
     4ac:	1800061e 	bne	r3,zero,4c8 <_puts_r+0x88>
     4b0:	28c01917 	ldw	r3,100(r5)
     4b4:	0137ffc4 	movi	r4,-8193
     4b8:	10880014 	ori	r2,r2,8192
     4bc:	1906703a 	and	r3,r3,r4
     4c0:	2880030d 	sth	r2,12(r5)
     4c4:	28c01915 	stw	r3,100(r5)
     4c8:	d9800104 	addi	r6,sp,4
     4cc:	8009883a 	mov	r4,r16
     4d0:	00009500 	call	950 <__sfvwrite_r>
     4d4:	10000b1e 	bne	r2,zero,504 <_puts_r+0xc4>
     4d8:	00800284 	movi	r2,10
     4dc:	dfc00a17 	ldw	ra,40(sp)
     4e0:	dc400917 	ldw	r17,36(sp)
     4e4:	dc000817 	ldw	r16,32(sp)
     4e8:	dec00b04 	addi	sp,sp,44
     4ec:	f800283a 	ret
     4f0:	8009883a 	mov	r4,r16
     4f4:	d9400015 	stw	r5,0(sp)
     4f8:	00009080 	call	908 <__sinit>
     4fc:	d9400017 	ldw	r5,0(sp)
     500:	003fe806 	br	4a4 <_puts_r+0x64>
     504:	00bfffc4 	movi	r2,-1
     508:	003ff406 	br	4dc <_puts_r+0x9c>

0000050c <puts>:
     50c:	00800034 	movhi	r2,0
     510:	200b883a 	mov	r5,r4
     514:	111c6c17 	ldw	r4,29104(r2)
     518:	00004401 	jmpi	440 <_puts_r>

0000051c <strlen>:
     51c:	208000cc 	andi	r2,r4,3
     520:	10000926 	beq	r2,zero,548 <strlen+0x2c>
     524:	2005883a 	mov	r2,r4
     528:	00000306 	br	538 <strlen+0x1c>
     52c:	10800044 	addi	r2,r2,1
     530:	10c000cc 	andi	r3,r2,3
     534:	18000526 	beq	r3,zero,54c <strlen+0x30>
     538:	10c00007 	ldb	r3,0(r2)
     53c:	183ffb1e 	bne	r3,zero,52c <strlen+0x10>
     540:	1105c83a 	sub	r2,r2,r4
     544:	f800283a 	ret
     548:	2005883a 	mov	r2,r4
     54c:	11400017 	ldw	r5,0(r2)
     550:	01ffbff4 	movhi	r7,65279
     554:	39ffbfc4 	addi	r7,r7,-257
     558:	29c7883a 	add	r3,r5,r7
     55c:	01a02074 	movhi	r6,32897
     560:	014a303a 	nor	r5,zero,r5
     564:	1946703a 	and	r3,r3,r5
     568:	31a02004 	addi	r6,r6,-32640
     56c:	1986703a 	and	r3,r3,r6
     570:	1800071e 	bne	r3,zero,590 <strlen+0x74>
     574:	11400117 	ldw	r5,4(r2)
     578:	10800104 	addi	r2,r2,4
     57c:	29c7883a 	add	r3,r5,r7
     580:	014a303a 	nor	r5,zero,r5
     584:	1946703a 	and	r3,r3,r5
     588:	1986703a 	and	r3,r3,r6
     58c:	183ff926 	beq	r3,zero,574 <strlen+0x58>
     590:	10c00007 	ldb	r3,0(r2)
     594:	183fea26 	beq	r3,zero,540 <strlen+0x24>
     598:	10c00047 	ldb	r3,1(r2)
     59c:	10800044 	addi	r2,r2,1
     5a0:	183fe726 	beq	r3,zero,540 <strlen+0x24>
     5a4:	10c00047 	ldb	r3,1(r2)
     5a8:	10800044 	addi	r2,r2,1
     5ac:	183ffa1e 	bne	r3,zero,598 <strlen+0x7c>
     5b0:	003fe306 	br	540 <strlen+0x24>

000005b4 <__fp_lock>:
     5b4:	0005883a 	mov	r2,zero
     5b8:	f800283a 	ret

000005bc <_cleanup_r>:
     5bc:	01400034 	movhi	r5,0
     5c0:	29493c04 	addi	r5,r5,9456
     5c4:	0000ea01 	jmpi	ea0 <_fwalk_reent>

000005c8 <__fp_unlock>:
     5c8:	0005883a 	mov	r2,zero
     5cc:	f800283a 	ret

000005d0 <__sinit.part.0>:
     5d0:	00c00034 	movhi	r3,0
     5d4:	20800117 	ldw	r2,4(r4)
     5d8:	18c16f04 	addi	r3,r3,1468
     5dc:	20c00f15 	stw	r3,60(r4)
     5e0:	2140bb04 	addi	r5,r4,748
     5e4:	00c000c4 	movi	r3,3
     5e8:	20c0b915 	stw	r3,740(r4)
     5ec:	2140ba15 	stw	r5,744(r4)
     5f0:	2000b815 	stw	zero,736(r4)
     5f4:	10001705 	stb	zero,92(r2)
     5f8:	10001745 	stb	zero,93(r2)
     5fc:	10001785 	stb	zero,94(r2)
     600:	100017c5 	stb	zero,95(r2)
     604:	10001805 	stb	zero,96(r2)
     608:	10001845 	stb	zero,97(r2)
     60c:	10001885 	stb	zero,98(r2)
     610:	100018c5 	stb	zero,99(r2)
     614:	00c00104 	movi	r3,4
     618:	10c00315 	stw	r3,12(r2)
     61c:	02000034 	movhi	r8,0
     620:	20c00217 	ldw	r3,8(r4)
     624:	01c00034 	movhi	r7,0
     628:	01800034 	movhi	r6,0
     62c:	01400034 	movhi	r5,0
     630:	42083404 	addi	r8,r8,8400
     634:	39c84b04 	addi	r7,r7,8492
     638:	31886b04 	addi	r6,r6,8620
     63c:	29488204 	addi	r5,r5,8712
     640:	02400074 	movhi	r9,1
     644:	10001915 	stw	zero,100(r2)
     648:	10000015 	stw	zero,0(r2)
     64c:	10000115 	stw	zero,4(r2)
     650:	10000215 	stw	zero,8(r2)
     654:	10000415 	stw	zero,16(r2)
     658:	10000515 	stw	zero,20(r2)
     65c:	10000615 	stw	zero,24(r2)
     660:	10800715 	stw	r2,28(r2)
     664:	12000815 	stw	r8,32(r2)
     668:	11c00915 	stw	r7,36(r2)
     66c:	11800a15 	stw	r6,40(r2)
     670:	11400b15 	stw	r5,44(r2)
     674:	4a400284 	addi	r9,r9,10
     678:	1a400315 	stw	r9,12(r3)
     67c:	18001915 	stw	zero,100(r3)
     680:	18000015 	stw	zero,0(r3)
     684:	18000115 	stw	zero,4(r3)
     688:	18000215 	stw	zero,8(r3)
     68c:	18000415 	stw	zero,16(r3)
     690:	18001705 	stb	zero,92(r3)
     694:	18001745 	stb	zero,93(r3)
     698:	18001785 	stb	zero,94(r3)
     69c:	180017c5 	stb	zero,95(r3)
     6a0:	18001805 	stb	zero,96(r3)
     6a4:	18001845 	stb	zero,97(r3)
     6a8:	18001885 	stb	zero,98(r3)
     6ac:	180018c5 	stb	zero,99(r3)
     6b0:	20800317 	ldw	r2,12(r4)
     6b4:	024000b4 	movhi	r9,2
     6b8:	18000515 	stw	zero,20(r3)
     6bc:	18000615 	stw	zero,24(r3)
     6c0:	18c00715 	stw	r3,28(r3)
     6c4:	1a000815 	stw	r8,32(r3)
     6c8:	19c00915 	stw	r7,36(r3)
     6cc:	19800a15 	stw	r6,40(r3)
     6d0:	19400b15 	stw	r5,44(r3)
     6d4:	4a400484 	addi	r9,r9,18
     6d8:	10001915 	stw	zero,100(r2)
     6dc:	10000015 	stw	zero,0(r2)
     6e0:	10000115 	stw	zero,4(r2)
     6e4:	10000215 	stw	zero,8(r2)
     6e8:	12400315 	stw	r9,12(r2)
     6ec:	10000415 	stw	zero,16(r2)
     6f0:	10000515 	stw	zero,20(r2)
     6f4:	10000615 	stw	zero,24(r2)
     6f8:	10001705 	stb	zero,92(r2)
     6fc:	10001745 	stb	zero,93(r2)
     700:	10001785 	stb	zero,94(r2)
     704:	100017c5 	stb	zero,95(r2)
     708:	10001805 	stb	zero,96(r2)
     70c:	10001845 	stb	zero,97(r2)
     710:	10001885 	stb	zero,98(r2)
     714:	100018c5 	stb	zero,99(r2)
     718:	10800715 	stw	r2,28(r2)
     71c:	12000815 	stw	r8,32(r2)
     720:	11c00915 	stw	r7,36(r2)
     724:	11800a15 	stw	r6,40(r2)
     728:	11400b15 	stw	r5,44(r2)
     72c:	00800044 	movi	r2,1
     730:	20800e15 	stw	r2,56(r4)
     734:	f800283a 	ret

00000738 <__sfmoreglue>:
     738:	defffc04 	addi	sp,sp,-16
     73c:	dc400115 	stw	r17,4(sp)
     740:	2c7fffc4 	addi	r17,r5,-1
     744:	8c401a24 	muli	r17,r17,104
     748:	dc800215 	stw	r18,8(sp)
     74c:	2825883a 	mov	r18,r5
     750:	89401d04 	addi	r5,r17,116
     754:	dc000015 	stw	r16,0(sp)
     758:	dfc00315 	stw	ra,12(sp)
     75c:	0000f480 	call	f48 <_malloc_r>
     760:	1021883a 	mov	r16,r2
     764:	10000726 	beq	r2,zero,784 <__sfmoreglue+0x4c>
     768:	11000304 	addi	r4,r2,12
     76c:	10000015 	stw	zero,0(r2)
     770:	14800115 	stw	r18,4(r2)
     774:	11000215 	stw	r4,8(r2)
     778:	89801a04 	addi	r6,r17,104
     77c:	000b883a 	mov	r5,zero
     780:	0001a240 	call	1a24 <memset>
     784:	8005883a 	mov	r2,r16
     788:	dfc00317 	ldw	ra,12(sp)
     78c:	dc800217 	ldw	r18,8(sp)
     790:	dc400117 	ldw	r17,4(sp)
     794:	dc000017 	ldw	r16,0(sp)
     798:	dec00404 	addi	sp,sp,16
     79c:	f800283a 	ret

000007a0 <__sfp>:
     7a0:	defffb04 	addi	sp,sp,-20
     7a4:	00800034 	movhi	r2,0
     7a8:	dc000015 	stw	r16,0(sp)
     7ac:	141c6b17 	ldw	r16,29100(r2)
     7b0:	dc400115 	stw	r17,4(sp)
     7b4:	dfc00415 	stw	ra,16(sp)
     7b8:	80800e17 	ldw	r2,56(r16)
     7bc:	dcc00315 	stw	r19,12(sp)
     7c0:	dc800215 	stw	r18,8(sp)
     7c4:	2023883a 	mov	r17,r4
     7c8:	10003126 	beq	r2,zero,890 <__sfp+0xf0>
     7cc:	8100ba17 	ldw	r4,744(r16)
     7d0:	8140b917 	ldw	r5,740(r16)
     7d4:	04c00104 	movi	r19,4
     7d8:	8400b804 	addi	r16,r16,736
     7dc:	297fffc4 	addi	r5,r5,-1
     7e0:	2800050e 	bge	r5,zero,7f8 <__sfp+0x58>
     7e4:	00002406 	br	878 <__sfp+0xd8>
     7e8:	297fffc4 	addi	r5,r5,-1
     7ec:	28bfffd8 	cmpnei	r2,r5,-1
     7f0:	21001a04 	addi	r4,r4,104
     7f4:	10002026 	beq	r2,zero,878 <__sfp+0xd8>
     7f8:	2080030f 	ldh	r2,12(r4)
     7fc:	103ffa1e 	bne	r2,zero,7e8 <__sfp+0x48>
     800:	00bffff4 	movhi	r2,65535
     804:	10800044 	addi	r2,r2,1
     808:	20001915 	stw	zero,100(r4)
     80c:	20000015 	stw	zero,0(r4)
     810:	20000115 	stw	zero,4(r4)
     814:	20000215 	stw	zero,8(r4)
     818:	20800315 	stw	r2,12(r4)
     81c:	20000415 	stw	zero,16(r4)
     820:	20000515 	stw	zero,20(r4)
     824:	20000615 	stw	zero,24(r4)
     828:	20001705 	stb	zero,92(r4)
     82c:	20001745 	stb	zero,93(r4)
     830:	20001785 	stb	zero,94(r4)
     834:	200017c5 	stb	zero,95(r4)
     838:	20001805 	stb	zero,96(r4)
     83c:	20001845 	stb	zero,97(r4)
     840:	20001885 	stb	zero,98(r4)
     844:	200018c5 	stb	zero,99(r4)
     848:	20000c15 	stw	zero,48(r4)
     84c:	20000d15 	stw	zero,52(r4)
     850:	20001115 	stw	zero,68(r4)
     854:	20001215 	stw	zero,72(r4)
     858:	2005883a 	mov	r2,r4
     85c:	dfc00417 	ldw	ra,16(sp)
     860:	dcc00317 	ldw	r19,12(sp)
     864:	dc800217 	ldw	r18,8(sp)
     868:	dc400117 	ldw	r17,4(sp)
     86c:	dc000017 	ldw	r16,0(sp)
     870:	dec00504 	addi	sp,sp,20
     874:	f800283a 	ret
     878:	80800017 	ldw	r2,0(r16)
     87c:	10000726 	beq	r2,zero,89c <__sfp+0xfc>
     880:	11000217 	ldw	r4,8(r2)
     884:	11400117 	ldw	r5,4(r2)
     888:	1021883a 	mov	r16,r2
     88c:	003fd306 	br	7dc <__sfp+0x3c>
     890:	8009883a 	mov	r4,r16
     894:	00005d00 	call	5d0 <__sinit.part.0>
     898:	003fcc06 	br	7cc <__sfp+0x2c>
     89c:	01406b04 	movi	r5,428
     8a0:	8809883a 	mov	r4,r17
     8a4:	0000f480 	call	f48 <_malloc_r>
     8a8:	1025883a 	mov	r18,r2
     8ac:	10000c26 	beq	r2,zero,8e0 <__sfp+0x140>
     8b0:	11000304 	addi	r4,r2,12
     8b4:	11000215 	stw	r4,8(r2)
     8b8:	000b883a 	mov	r5,zero
     8bc:	10000015 	stw	zero,0(r2)
     8c0:	14c00115 	stw	r19,4(r2)
     8c4:	01806804 	movi	r6,416
     8c8:	0001a240 	call	1a24 <memset>
     8cc:	1009883a 	mov	r4,r2
     8d0:	84800015 	stw	r18,0(r16)
     8d4:	014000c4 	movi	r5,3
     8d8:	9021883a 	mov	r16,r18
     8dc:	003fc606 	br	7f8 <__sfp+0x58>
     8e0:	80000015 	stw	zero,0(r16)
     8e4:	00800304 	movi	r2,12
     8e8:	88800015 	stw	r2,0(r17)
     8ec:	0009883a 	mov	r4,zero
     8f0:	003fd906 	br	858 <__sfp+0xb8>

000008f4 <_cleanup>:
     8f4:	00800034 	movhi	r2,0
     8f8:	111c6b17 	ldw	r4,29100(r2)
     8fc:	01400034 	movhi	r5,0
     900:	29493c04 	addi	r5,r5,9456
     904:	0000ea01 	jmpi	ea0 <_fwalk_reent>

00000908 <__sinit>:
     908:	20800e17 	ldw	r2,56(r4)
     90c:	10000126 	beq	r2,zero,914 <__sinit+0xc>
     910:	f800283a 	ret
     914:	00005d01 	jmpi	5d0 <__sinit.part.0>

00000918 <__sfp_lock_acquire>:
     918:	f800283a 	ret

0000091c <__sfp_lock_release>:
     91c:	f800283a 	ret

00000920 <__sinit_lock_acquire>:
     920:	f800283a 	ret

00000924 <__sinit_lock_release>:
     924:	f800283a 	ret

00000928 <__fp_lock_all>:
     928:	00800034 	movhi	r2,0
     92c:	111c6c17 	ldw	r4,29104(r2)
     930:	01400034 	movhi	r5,0
     934:	29416d04 	addi	r5,r5,1460
     938:	0000e081 	jmpi	e08 <_fwalk>

0000093c <__fp_unlock_all>:
     93c:	00800034 	movhi	r2,0
     940:	111c6c17 	ldw	r4,29104(r2)
     944:	01400034 	movhi	r5,0
     948:	29417204 	addi	r5,r5,1480
     94c:	0000e081 	jmpi	e08 <_fwalk>

00000950 <__sfvwrite_r>:
     950:	30800217 	ldw	r2,8(r6)
     954:	1000a226 	beq	r2,zero,be0 <__sfvwrite_r+0x290>
     958:	29c0030b 	ldhu	r7,12(r5)
     95c:	defff404 	addi	sp,sp,-48
     960:	ddc00915 	stw	r23,36(sp)
     964:	dd400715 	stw	r21,28(sp)
     968:	dc000215 	stw	r16,8(sp)
     96c:	dfc00b15 	stw	ra,44(sp)
     970:	df000a15 	stw	fp,40(sp)
     974:	dd800815 	stw	r22,32(sp)
     978:	dd000615 	stw	r20,24(sp)
     97c:	dcc00515 	stw	r19,20(sp)
     980:	dc800415 	stw	r18,16(sp)
     984:	dc400315 	stw	r17,12(sp)
     988:	3880020c 	andi	r2,r7,8
     98c:	302f883a 	mov	r23,r6
     990:	202b883a 	mov	r21,r4
     994:	2821883a 	mov	r16,r5
     998:	10002226 	beq	r2,zero,a24 <__sfvwrite_r+0xd4>
     99c:	28800417 	ldw	r2,16(r5)
     9a0:	10002026 	beq	r2,zero,a24 <__sfvwrite_r+0xd4>
     9a4:	3880008c 	andi	r2,r7,2
     9a8:	bc400017 	ldw	r17,0(r23)
     9ac:	10002526 	beq	r2,zero,a44 <__sfvwrite_r+0xf4>
     9b0:	80800917 	ldw	r2,36(r16)
     9b4:	81400717 	ldw	r5,28(r16)
     9b8:	05200034 	movhi	r20,32768
     9bc:	0027883a 	mov	r19,zero
     9c0:	0025883a 	mov	r18,zero
     9c4:	a53f0004 	addi	r20,r20,-1024
     9c8:	980d883a 	mov	r6,r19
     9cc:	a809883a 	mov	r4,r21
     9d0:	90001026 	beq	r18,zero,a14 <__sfvwrite_r+0xc4>
     9d4:	900f883a 	mov	r7,r18
     9d8:	a480012e 	bgeu	r20,r18,9e0 <__sfvwrite_r+0x90>
     9dc:	a00f883a 	mov	r7,r20
     9e0:	103ee83a 	callr	r2
     9e4:	0080790e 	bge	zero,r2,bcc <__sfvwrite_r+0x27c>
     9e8:	b9000217 	ldw	r4,8(r23)
     9ec:	98a7883a 	add	r19,r19,r2
     9f0:	90a5c83a 	sub	r18,r18,r2
     9f4:	2085c83a 	sub	r2,r4,r2
     9f8:	b8800215 	stw	r2,8(r23)
     9fc:	10006226 	beq	r2,zero,b88 <__sfvwrite_r+0x238>
     a00:	80800917 	ldw	r2,36(r16)
     a04:	81400717 	ldw	r5,28(r16)
     a08:	980d883a 	mov	r6,r19
     a0c:	a809883a 	mov	r4,r21
     a10:	903ff01e 	bne	r18,zero,9d4 <__sfvwrite_r+0x84>
     a14:	8cc00017 	ldw	r19,0(r17)
     a18:	8c800117 	ldw	r18,4(r17)
     a1c:	8c400204 	addi	r17,r17,8
     a20:	003fe906 	br	9c8 <__sfvwrite_r+0x78>
     a24:	800b883a 	mov	r5,r16
     a28:	a809883a 	mov	r4,r21
     a2c:	00022740 	call	2274 <__swsetup_r>
     a30:	1000f31e 	bne	r2,zero,e00 <__sfvwrite_r+0x4b0>
     a34:	81c0030b 	ldhu	r7,12(r16)
     a38:	bc400017 	ldw	r17,0(r23)
     a3c:	3880008c 	andi	r2,r7,2
     a40:	103fdb1e 	bne	r2,zero,9b0 <__sfvwrite_r+0x60>
     a44:	3880004c 	andi	r2,r7,1
     a48:	84800217 	ldw	r18,8(r16)
     a4c:	82000017 	ldw	r8,0(r16)
     a50:	1000651e 	bne	r2,zero,be8 <__sfvwrite_r+0x298>
     a54:	00a00034 	movhi	r2,32768
     a58:	10bfff84 	addi	r2,r2,-2
     a5c:	00e00034 	movhi	r3,32768
     a60:	d8800015 	stw	r2,0(sp)
     a64:	18bfffc4 	addi	r2,r3,-1
     a68:	0039883a 	mov	fp,zero
     a6c:	0027883a 	mov	r19,zero
     a70:	d8800115 	stw	r2,4(sp)
     a74:	98004026 	beq	r19,zero,b78 <__sfvwrite_r+0x228>
     a78:	3880800c 	andi	r2,r7,512
     a7c:	10009626 	beq	r2,zero,cd8 <__sfvwrite_r+0x388>
     a80:	902d883a 	mov	r22,r18
     a84:	9c80ba36 	bltu	r19,r18,d70 <__sfvwrite_r+0x420>
     a88:	3881200c 	andi	r2,r7,1152
     a8c:	10002526 	beq	r2,zero,b24 <__sfvwrite_r+0x1d4>
     a90:	81000517 	ldw	r4,20(r16)
     a94:	81400417 	ldw	r5,16(r16)
     a98:	98800044 	addi	r2,r19,1
     a9c:	210000e4 	muli	r4,r4,3
     aa0:	4165c83a 	sub	r18,r8,r5
     aa4:	1485883a 	add	r2,r2,r18
     aa8:	2028d7fa 	srli	r20,r4,31
     aac:	a109883a 	add	r4,r20,r4
     ab0:	2029d07a 	srai	r20,r4,1
     ab4:	a00d883a 	mov	r6,r20
     ab8:	a080022e 	bgeu	r20,r2,ac4 <__sfvwrite_r+0x174>
     abc:	1029883a 	mov	r20,r2
     ac0:	100d883a 	mov	r6,r2
     ac4:	39c1000c 	andi	r7,r7,1024
     ac8:	3800bd26 	beq	r7,zero,dc0 <__sfvwrite_r+0x470>
     acc:	a809883a 	mov	r4,r21
     ad0:	300b883a 	mov	r5,r6
     ad4:	0000f480 	call	f48 <_malloc_r>
     ad8:	1009883a 	mov	r4,r2
     adc:	1000c426 	beq	r2,zero,df0 <__sfvwrite_r+0x4a0>
     ae0:	81400417 	ldw	r5,16(r16)
     ae4:	900d883a 	mov	r6,r18
     ae8:	00017f80 	call	17f8 <memcpy>
     aec:	1009883a 	mov	r4,r2
     af0:	8080030b 	ldhu	r2,12(r16)
     af4:	00fedfc4 	movi	r3,-1153
     af8:	10c4703a 	and	r2,r2,r3
     afc:	10802014 	ori	r2,r2,128
     b00:	8080030d 	sth	r2,12(r16)
     b04:	2491883a 	add	r8,r4,r18
     b08:	a485c83a 	sub	r2,r20,r18
     b0c:	81000415 	stw	r4,16(r16)
     b10:	82000015 	stw	r8,0(r16)
     b14:	85000515 	stw	r20,20(r16)
     b18:	9825883a 	mov	r18,r19
     b1c:	80800215 	stw	r2,8(r16)
     b20:	982d883a 	mov	r22,r19
     b24:	4009883a 	mov	r4,r8
     b28:	b00d883a 	mov	r6,r22
     b2c:	e00b883a 	mov	r5,fp
     b30:	00018f80 	call	18f8 <memmove>
     b34:	81000217 	ldw	r4,8(r16)
     b38:	80800017 	ldw	r2,0(r16)
     b3c:	9829883a 	mov	r20,r19
     b40:	24a5c83a 	sub	r18,r4,r18
     b44:	1585883a 	add	r2,r2,r22
     b48:	84800215 	stw	r18,8(r16)
     b4c:	80800015 	stw	r2,0(r16)
     b50:	0027883a 	mov	r19,zero
     b54:	b8800217 	ldw	r2,8(r23)
     b58:	e539883a 	add	fp,fp,r20
     b5c:	1529c83a 	sub	r20,r2,r20
     b60:	bd000215 	stw	r20,8(r23)
     b64:	a0000826 	beq	r20,zero,b88 <__sfvwrite_r+0x238>
     b68:	81c0030b 	ldhu	r7,12(r16)
     b6c:	84800217 	ldw	r18,8(r16)
     b70:	82000017 	ldw	r8,0(r16)
     b74:	983fc01e 	bne	r19,zero,a78 <__sfvwrite_r+0x128>
     b78:	8f000017 	ldw	fp,0(r17)
     b7c:	8cc00117 	ldw	r19,4(r17)
     b80:	8c400204 	addi	r17,r17,8
     b84:	003fbb06 	br	a74 <__sfvwrite_r+0x124>
     b88:	0005883a 	mov	r2,zero
     b8c:	dfc00b17 	ldw	ra,44(sp)
     b90:	df000a17 	ldw	fp,40(sp)
     b94:	ddc00917 	ldw	r23,36(sp)
     b98:	dd800817 	ldw	r22,32(sp)
     b9c:	dd400717 	ldw	r21,28(sp)
     ba0:	dd000617 	ldw	r20,24(sp)
     ba4:	dcc00517 	ldw	r19,20(sp)
     ba8:	dc800417 	ldw	r18,16(sp)
     bac:	dc400317 	ldw	r17,12(sp)
     bb0:	dc000217 	ldw	r16,8(sp)
     bb4:	dec00c04 	addi	sp,sp,48
     bb8:	f800283a 	ret
     bbc:	800b883a 	mov	r5,r16
     bc0:	a809883a 	mov	r4,r21
     bc4:	00027f80 	call	27f8 <_fflush_r>
     bc8:	10002026 	beq	r2,zero,c4c <__sfvwrite_r+0x2fc>
     bcc:	8080030b 	ldhu	r2,12(r16)
     bd0:	10801014 	ori	r2,r2,64
     bd4:	8080030d 	sth	r2,12(r16)
     bd8:	00bfffc4 	movi	r2,-1
     bdc:	003feb06 	br	b8c <__sfvwrite_r+0x23c>
     be0:	0005883a 	mov	r2,zero
     be4:	f800283a 	ret
     be8:	002d883a 	mov	r22,zero
     bec:	0027883a 	mov	r19,zero
     bf0:	0005883a 	mov	r2,zero
     bf4:	0039883a 	mov	fp,zero
     bf8:	b0001d26 	beq	r22,zero,c70 <__sfvwrite_r+0x320>
     bfc:	10002026 	beq	r2,zero,c80 <__sfvwrite_r+0x330>
     c00:	9829883a 	mov	r20,r19
     c04:	b500012e 	bgeu	r22,r20,c0c <__sfvwrite_r+0x2bc>
     c08:	b029883a 	mov	r20,r22
     c0c:	80800417 	ldw	r2,16(r16)
     c10:	81c00517 	ldw	r7,20(r16)
     c14:	1200022e 	bgeu	r2,r8,c20 <__sfvwrite_r+0x2d0>
     c18:	3ca5883a 	add	r18,r7,r18
     c1c:	95002216 	blt	r18,r20,ca8 <__sfvwrite_r+0x358>
     c20:	a1c05616 	blt	r20,r7,d7c <__sfvwrite_r+0x42c>
     c24:	80800917 	ldw	r2,36(r16)
     c28:	81400717 	ldw	r5,28(r16)
     c2c:	e00d883a 	mov	r6,fp
     c30:	a809883a 	mov	r4,r21
     c34:	103ee83a 	callr	r2
     c38:	1025883a 	mov	r18,r2
     c3c:	00bfe30e 	bge	zero,r2,bcc <__sfvwrite_r+0x27c>
     c40:	9ca7c83a 	sub	r19,r19,r18
     c44:	983fdd26 	beq	r19,zero,bbc <__sfvwrite_r+0x26c>
     c48:	00800044 	movi	r2,1
     c4c:	b9800217 	ldw	r6,8(r23)
     c50:	e4b9883a 	add	fp,fp,r18
     c54:	b4adc83a 	sub	r22,r22,r18
     c58:	34a5c83a 	sub	r18,r6,r18
     c5c:	bc800215 	stw	r18,8(r23)
     c60:	903fc926 	beq	r18,zero,b88 <__sfvwrite_r+0x238>
     c64:	84800217 	ldw	r18,8(r16)
     c68:	82000017 	ldw	r8,0(r16)
     c6c:	b03fe31e 	bne	r22,zero,bfc <__sfvwrite_r+0x2ac>
     c70:	8d800117 	ldw	r22,4(r17)
     c74:	8f000017 	ldw	fp,0(r17)
     c78:	8c400204 	addi	r17,r17,8
     c7c:	b03ffc26 	beq	r22,zero,c70 <__sfvwrite_r+0x320>
     c80:	b00d883a 	mov	r6,r22
     c84:	01400284 	movi	r5,10
     c88:	e009883a 	mov	r4,fp
     c8c:	da000015 	stw	r8,0(sp)
     c90:	00017280 	call	1728 <memchr>
     c94:	da000017 	ldw	r8,0(sp)
     c98:	10004626 	beq	r2,zero,db4 <__sfvwrite_r+0x464>
     c9c:	10800044 	addi	r2,r2,1
     ca0:	1727c83a 	sub	r19,r2,fp
     ca4:	003fd606 	br	c00 <__sfvwrite_r+0x2b0>
     ca8:	e00b883a 	mov	r5,fp
     cac:	4009883a 	mov	r4,r8
     cb0:	900d883a 	mov	r6,r18
     cb4:	00018f80 	call	18f8 <memmove>
     cb8:	80800017 	ldw	r2,0(r16)
     cbc:	800b883a 	mov	r5,r16
     cc0:	a809883a 	mov	r4,r21
     cc4:	1485883a 	add	r2,r2,r18
     cc8:	80800015 	stw	r2,0(r16)
     ccc:	00027f80 	call	27f8 <_fflush_r>
     cd0:	103fdb26 	beq	r2,zero,c40 <__sfvwrite_r+0x2f0>
     cd4:	003fbd06 	br	bcc <__sfvwrite_r+0x27c>
     cd8:	80800417 	ldw	r2,16(r16)
     cdc:	12001136 	bltu	r2,r8,d24 <__sfvwrite_r+0x3d4>
     ce0:	85000517 	ldw	r20,20(r16)
     ce4:	9d000f36 	bltu	r19,r20,d24 <__sfvwrite_r+0x3d4>
     ce8:	d8800017 	ldw	r2,0(sp)
     cec:	14c02f2e 	bgeu	r2,r19,dac <__sfvwrite_r+0x45c>
     cf0:	d9000117 	ldw	r4,4(sp)
     cf4:	a00b883a 	mov	r5,r20
     cf8:	00030bc0 	call	30bc <__divsi3>
     cfc:	150f383a 	mul	r7,r2,r20
     d00:	82000917 	ldw	r8,36(r16)
     d04:	81400717 	ldw	r5,28(r16)
     d08:	e00d883a 	mov	r6,fp
     d0c:	a809883a 	mov	r4,r21
     d10:	403ee83a 	callr	r8
     d14:	1029883a 	mov	r20,r2
     d18:	00bfac0e 	bge	zero,r2,bcc <__sfvwrite_r+0x27c>
     d1c:	9d27c83a 	sub	r19,r19,r20
     d20:	003f8c06 	br	b54 <__sfvwrite_r+0x204>
     d24:	9029883a 	mov	r20,r18
     d28:	9c80012e 	bgeu	r19,r18,d30 <__sfvwrite_r+0x3e0>
     d2c:	9829883a 	mov	r20,r19
     d30:	4009883a 	mov	r4,r8
     d34:	a00d883a 	mov	r6,r20
     d38:	e00b883a 	mov	r5,fp
     d3c:	00018f80 	call	18f8 <memmove>
     d40:	80800217 	ldw	r2,8(r16)
     d44:	81000017 	ldw	r4,0(r16)
     d48:	1505c83a 	sub	r2,r2,r20
     d4c:	2509883a 	add	r4,r4,r20
     d50:	80800215 	stw	r2,8(r16)
     d54:	81000015 	stw	r4,0(r16)
     d58:	103ff01e 	bne	r2,zero,d1c <__sfvwrite_r+0x3cc>
     d5c:	800b883a 	mov	r5,r16
     d60:	a809883a 	mov	r4,r21
     d64:	00027f80 	call	27f8 <_fflush_r>
     d68:	103fec26 	beq	r2,zero,d1c <__sfvwrite_r+0x3cc>
     d6c:	003f9706 	br	bcc <__sfvwrite_r+0x27c>
     d70:	9825883a 	mov	r18,r19
     d74:	982d883a 	mov	r22,r19
     d78:	003f6a06 	br	b24 <__sfvwrite_r+0x1d4>
     d7c:	4009883a 	mov	r4,r8
     d80:	a00d883a 	mov	r6,r20
     d84:	e00b883a 	mov	r5,fp
     d88:	00018f80 	call	18f8 <memmove>
     d8c:	81000217 	ldw	r4,8(r16)
     d90:	80800017 	ldw	r2,0(r16)
     d94:	a025883a 	mov	r18,r20
     d98:	2509c83a 	sub	r4,r4,r20
     d9c:	1505883a 	add	r2,r2,r20
     da0:	81000215 	stw	r4,8(r16)
     da4:	80800015 	stw	r2,0(r16)
     da8:	003fa506 	br	c40 <__sfvwrite_r+0x2f0>
     dac:	9809883a 	mov	r4,r19
     db0:	003fd006 	br	cf4 <__sfvwrite_r+0x3a4>
     db4:	b5000044 	addi	r20,r22,1
     db8:	a027883a 	mov	r19,r20
     dbc:	003f9106 	br	c04 <__sfvwrite_r+0x2b4>
     dc0:	a809883a 	mov	r4,r21
     dc4:	0001b140 	call	1b14 <_realloc_r>
     dc8:	1009883a 	mov	r4,r2
     dcc:	103f4d1e 	bne	r2,zero,b04 <__sfvwrite_r+0x1b4>
     dd0:	81400417 	ldw	r5,16(r16)
     dd4:	a809883a 	mov	r4,r21
     dd8:	00029f80 	call	29f8 <_free_r>
     ddc:	8080030b 	ldhu	r2,12(r16)
     de0:	00c00304 	movi	r3,12
     de4:	a8c00015 	stw	r3,0(r21)
     de8:	10bfdfcc 	andi	r2,r2,65407
     dec:	003f7806 	br	bd0 <__sfvwrite_r+0x280>
     df0:	00c00304 	movi	r3,12
     df4:	8080030b 	ldhu	r2,12(r16)
     df8:	a8c00015 	stw	r3,0(r21)
     dfc:	003f7406 	br	bd0 <__sfvwrite_r+0x280>
     e00:	00bfffc4 	movi	r2,-1
     e04:	003f6106 	br	b8c <__sfvwrite_r+0x23c>

00000e08 <_fwalk>:
     e08:	defffa04 	addi	sp,sp,-24
     e0c:	dd000415 	stw	r20,16(sp)
     e10:	dcc00315 	stw	r19,12(sp)
     e14:	dc800215 	stw	r18,8(sp)
     e18:	dfc00515 	stw	ra,20(sp)
     e1c:	dc400115 	stw	r17,4(sp)
     e20:	dc000015 	stw	r16,0(sp)
     e24:	2827883a 	mov	r19,r5
     e28:	2480b804 	addi	r18,r4,736
     e2c:	0029883a 	mov	r20,zero
     e30:	94400117 	ldw	r17,4(r18)
     e34:	94000217 	ldw	r16,8(r18)
     e38:	8c7fffc4 	addi	r17,r17,-1
     e3c:	88000d16 	blt	r17,zero,e74 <_fwalk+0x6c>
     e40:	8080030b 	ldhu	r2,12(r16)
     e44:	8c7fffc4 	addi	r17,r17,-1
     e48:	108000b0 	cmpltui	r2,r2,2
     e4c:	1000061e 	bne	r2,zero,e68 <_fwalk+0x60>
     e50:	8080038f 	ldh	r2,14(r16)
     e54:	8009883a 	mov	r4,r16
     e58:	10bfffe0 	cmpeqi	r2,r2,-1
     e5c:	1000021e 	bne	r2,zero,e68 <_fwalk+0x60>
     e60:	983ee83a 	callr	r19
     e64:	a0a8b03a 	or	r20,r20,r2
     e68:	88bfffd8 	cmpnei	r2,r17,-1
     e6c:	84001a04 	addi	r16,r16,104
     e70:	103ff31e 	bne	r2,zero,e40 <_fwalk+0x38>
     e74:	94800017 	ldw	r18,0(r18)
     e78:	903fed1e 	bne	r18,zero,e30 <_fwalk+0x28>
     e7c:	a005883a 	mov	r2,r20
     e80:	dfc00517 	ldw	ra,20(sp)
     e84:	dd000417 	ldw	r20,16(sp)
     e88:	dcc00317 	ldw	r19,12(sp)
     e8c:	dc800217 	ldw	r18,8(sp)
     e90:	dc400117 	ldw	r17,4(sp)
     e94:	dc000017 	ldw	r16,0(sp)
     e98:	dec00604 	addi	sp,sp,24
     e9c:	f800283a 	ret

00000ea0 <_fwalk_reent>:
     ea0:	defff904 	addi	sp,sp,-28
     ea4:	dd400515 	stw	r21,20(sp)
     ea8:	dd000415 	stw	r20,16(sp)
     eac:	dcc00315 	stw	r19,12(sp)
     eb0:	dc800215 	stw	r18,8(sp)
     eb4:	dfc00615 	stw	ra,24(sp)
     eb8:	dc400115 	stw	r17,4(sp)
     ebc:	dc000015 	stw	r16,0(sp)
     ec0:	202b883a 	mov	r21,r4
     ec4:	2827883a 	mov	r19,r5
     ec8:	2480b804 	addi	r18,r4,736
     ecc:	0029883a 	mov	r20,zero
     ed0:	94400117 	ldw	r17,4(r18)
     ed4:	94000217 	ldw	r16,8(r18)
     ed8:	8c7fffc4 	addi	r17,r17,-1
     edc:	88000e16 	blt	r17,zero,f18 <_fwalk_reent+0x78>
     ee0:	8080030b 	ldhu	r2,12(r16)
     ee4:	8c7fffc4 	addi	r17,r17,-1
     ee8:	108000b0 	cmpltui	r2,r2,2
     eec:	1000071e 	bne	r2,zero,f0c <_fwalk_reent+0x6c>
     ef0:	8080038f 	ldh	r2,14(r16)
     ef4:	800b883a 	mov	r5,r16
     ef8:	a809883a 	mov	r4,r21
     efc:	10bfffe0 	cmpeqi	r2,r2,-1
     f00:	1000021e 	bne	r2,zero,f0c <_fwalk_reent+0x6c>
     f04:	983ee83a 	callr	r19
     f08:	a0a8b03a 	or	r20,r20,r2
     f0c:	88bfffd8 	cmpnei	r2,r17,-1
     f10:	84001a04 	addi	r16,r16,104
     f14:	103ff21e 	bne	r2,zero,ee0 <_fwalk_reent+0x40>
     f18:	94800017 	ldw	r18,0(r18)
     f1c:	903fec1e 	bne	r18,zero,ed0 <_fwalk_reent+0x30>
     f20:	a005883a 	mov	r2,r20
     f24:	dfc00617 	ldw	ra,24(sp)
     f28:	dd400517 	ldw	r21,20(sp)
     f2c:	dd000417 	ldw	r20,16(sp)
     f30:	dcc00317 	ldw	r19,12(sp)
     f34:	dc800217 	ldw	r18,8(sp)
     f38:	dc400117 	ldw	r17,4(sp)
     f3c:	dc000017 	ldw	r16,0(sp)
     f40:	dec00704 	addi	sp,sp,28
     f44:	f800283a 	ret

00000f48 <_malloc_r>:
     f48:	defff604 	addi	sp,sp,-40
     f4c:	dc400115 	stw	r17,4(sp)
     f50:	2c4002c4 	addi	r17,r5,11
     f54:	dc800215 	stw	r18,8(sp)
     f58:	dfc00915 	stw	ra,36(sp)
     f5c:	df000815 	stw	fp,32(sp)
     f60:	ddc00715 	stw	r23,28(sp)
     f64:	dd800615 	stw	r22,24(sp)
     f68:	dd400515 	stw	r21,20(sp)
     f6c:	dd000415 	stw	r20,16(sp)
     f70:	dcc00315 	stw	r19,12(sp)
     f74:	dc000015 	stw	r16,0(sp)
     f78:	888005e8 	cmpgeui	r2,r17,23
     f7c:	2025883a 	mov	r18,r4
     f80:	10001b1e 	bne	r2,zero,ff0 <_malloc_r+0xa8>
     f84:	29400468 	cmpgeui	r5,r5,17
     f88:	2800821e 	bne	r5,zero,1194 <_malloc_r+0x24c>
     f8c:	00039980 	call	3998 <__malloc_lock>
     f90:	04400404 	movi	r17,16
     f94:	00800604 	movi	r2,24
     f98:	01c00084 	movi	r7,2
     f9c:	04c00034 	movhi	r19,0
     fa0:	9cd6e704 	addi	r19,r19,23452
     fa4:	9885883a 	add	r2,r19,r2
     fa8:	14000117 	ldw	r16,4(r2)
     fac:	10fffe04 	addi	r3,r2,-8
     fb0:	80c08b26 	beq	r16,r3,11e0 <_malloc_r+0x298>
     fb4:	80800117 	ldw	r2,4(r16)
     fb8:	81000317 	ldw	r4,12(r16)
     fbc:	00ffff04 	movi	r3,-4
     fc0:	10c4703a 	and	r2,r2,r3
     fc4:	81400217 	ldw	r5,8(r16)
     fc8:	8085883a 	add	r2,r16,r2
     fcc:	10c00117 	ldw	r3,4(r2)
     fd0:	29000315 	stw	r4,12(r5)
     fd4:	21400215 	stw	r5,8(r4)
     fd8:	18c00054 	ori	r3,r3,1
     fdc:	10c00115 	stw	r3,4(r2)
     fe0:	9009883a 	mov	r4,r18
     fe4:	00039bc0 	call	39bc <__malloc_unlock>
     fe8:	80800204 	addi	r2,r16,8
     fec:	00006c06 	br	11a0 <_malloc_r+0x258>
     ff0:	00bffe04 	movi	r2,-8
     ff4:	88a2703a 	and	r17,r17,r2
     ff8:	88006616 	blt	r17,zero,1194 <_malloc_r+0x24c>
     ffc:	89406536 	bltu	r17,r5,1194 <_malloc_r+0x24c>
    1000:	00039980 	call	3998 <__malloc_lock>
    1004:	88807e28 	cmpgeui	r2,r17,504
    1008:	10012226 	beq	r2,zero,1494 <_malloc_r+0x54c>
    100c:	8804d27a 	srli	r2,r17,9
    1010:	10006f26 	beq	r2,zero,11d0 <_malloc_r+0x288>
    1014:	10c00168 	cmpgeui	r3,r2,5
    1018:	1800fe1e 	bne	r3,zero,1414 <_malloc_r+0x4cc>
    101c:	8804d1ba 	srli	r2,r17,6
    1020:	11c00e44 	addi	r7,r2,57
    1024:	380890fa 	slli	r4,r7,3
    1028:	12000e04 	addi	r8,r2,56
    102c:	04c00034 	movhi	r19,0
    1030:	9cd6e704 	addi	r19,r19,23452
    1034:	9909883a 	add	r4,r19,r4
    1038:	24000117 	ldw	r16,4(r4)
    103c:	213ffe04 	addi	r4,r4,-8
    1040:	24000b26 	beq	r4,r16,1070 <_malloc_r+0x128>
    1044:	01bfff04 	movi	r6,-4
    1048:	00000306 	br	1058 <_malloc_r+0x110>
    104c:	1800d60e 	bge	r3,zero,13a8 <_malloc_r+0x460>
    1050:	84000317 	ldw	r16,12(r16)
    1054:	24000626 	beq	r4,r16,1070 <_malloc_r+0x128>
    1058:	80800117 	ldw	r2,4(r16)
    105c:	1184703a 	and	r2,r2,r6
    1060:	1447c83a 	sub	r3,r2,r17
    1064:	19400408 	cmpgei	r5,r3,16
    1068:	283ff826 	beq	r5,zero,104c <_malloc_r+0x104>
    106c:	400f883a 	mov	r7,r8
    1070:	9c000417 	ldw	r16,16(r19)
    1074:	02400034 	movhi	r9,0
    1078:	4a56e904 	addi	r9,r9,23460
    107c:	82405f26 	beq	r16,r9,11fc <_malloc_r+0x2b4>
    1080:	80c00117 	ldw	r3,4(r16)
    1084:	00bfff04 	movi	r2,-4
    1088:	1884703a 	and	r2,r3,r2
    108c:	1447c83a 	sub	r3,r2,r17
    1090:	19000410 	cmplti	r4,r3,16
    1094:	20010a26 	beq	r4,zero,14c0 <_malloc_r+0x578>
    1098:	9a400515 	stw	r9,20(r19)
    109c:	9a400415 	stw	r9,16(r19)
    10a0:	1800ff0e 	bge	r3,zero,14a0 <_malloc_r+0x558>
    10a4:	10c08028 	cmpgeui	r3,r2,512
    10a8:	1800c11e 	bne	r3,zero,13b0 <_malloc_r+0x468>
    10ac:	1006d0fa 	srli	r3,r2,3
    10b0:	1008d17a 	srli	r4,r2,5
    10b4:	00800044 	movi	r2,1
    10b8:	18c00044 	addi	r3,r3,1
    10bc:	180690fa 	slli	r3,r3,3
    10c0:	99400117 	ldw	r5,4(r19)
    10c4:	1104983a 	sll	r2,r2,r4
    10c8:	98c7883a 	add	r3,r19,r3
    10cc:	19000017 	ldw	r4,0(r3)
    10d0:	1144b03a 	or	r2,r2,r5
    10d4:	197ffe04 	addi	r5,r3,-8
    10d8:	81400315 	stw	r5,12(r16)
    10dc:	81000215 	stw	r4,8(r16)
    10e0:	98800115 	stw	r2,4(r19)
    10e4:	1c000015 	stw	r16,0(r3)
    10e8:	24000315 	stw	r16,12(r4)
    10ec:	3807d0ba 	srai	r3,r7,2
    10f0:	01000044 	movi	r4,1
    10f4:	20c8983a 	sll	r4,r4,r3
    10f8:	11004536 	bltu	r2,r4,1210 <_malloc_r+0x2c8>
    10fc:	2086703a 	and	r3,r4,r2
    1100:	18000a1e 	bne	r3,zero,112c <_malloc_r+0x1e4>
    1104:	00ffff04 	movi	r3,-4
    1108:	2109883a 	add	r4,r4,r4
    110c:	38ce703a 	and	r7,r7,r3
    1110:	2086703a 	and	r3,r4,r2
    1114:	39c00104 	addi	r7,r7,4
    1118:	1800041e 	bne	r3,zero,112c <_malloc_r+0x1e4>
    111c:	2109883a 	add	r4,r4,r4
    1120:	2086703a 	and	r3,r4,r2
    1124:	39c00104 	addi	r7,r7,4
    1128:	183ffc26 	beq	r3,zero,111c <_malloc_r+0x1d4>
    112c:	02bfff04 	movi	r10,-4
    1130:	381690fa 	slli	r11,r7,3
    1134:	3819883a 	mov	r12,r7
    1138:	9ad7883a 	add	r11,r19,r11
    113c:	5811883a 	mov	r8,r11
    1140:	40800317 	ldw	r2,12(r8)
    1144:	4080bc26 	beq	r8,r2,1438 <_malloc_r+0x4f0>
    1148:	10c00117 	ldw	r3,4(r2)
    114c:	1021883a 	mov	r16,r2
    1150:	10800317 	ldw	r2,12(r2)
    1154:	1a86703a 	and	r3,r3,r10
    1158:	1c4bc83a 	sub	r5,r3,r17
    115c:	29800410 	cmplti	r6,r5,16
    1160:	3000ba26 	beq	r6,zero,144c <_malloc_r+0x504>
    1164:	283ff716 	blt	r5,zero,1144 <_malloc_r+0x1fc>
    1168:	80c7883a 	add	r3,r16,r3
    116c:	19400117 	ldw	r5,4(r3)
    1170:	81800217 	ldw	r6,8(r16)
    1174:	9009883a 	mov	r4,r18
    1178:	29400054 	ori	r5,r5,1
    117c:	19400115 	stw	r5,4(r3)
    1180:	30800315 	stw	r2,12(r6)
    1184:	11800215 	stw	r6,8(r2)
    1188:	00039bc0 	call	39bc <__malloc_unlock>
    118c:	80800204 	addi	r2,r16,8
    1190:	00000306 	br	11a0 <_malloc_r+0x258>
    1194:	00800304 	movi	r2,12
    1198:	90800015 	stw	r2,0(r18)
    119c:	0005883a 	mov	r2,zero
    11a0:	dfc00917 	ldw	ra,36(sp)
    11a4:	df000817 	ldw	fp,32(sp)
    11a8:	ddc00717 	ldw	r23,28(sp)
    11ac:	dd800617 	ldw	r22,24(sp)
    11b0:	dd400517 	ldw	r21,20(sp)
    11b4:	dd000417 	ldw	r20,16(sp)
    11b8:	dcc00317 	ldw	r19,12(sp)
    11bc:	dc800217 	ldw	r18,8(sp)
    11c0:	dc400117 	ldw	r17,4(sp)
    11c4:	dc000017 	ldw	r16,0(sp)
    11c8:	dec00a04 	addi	sp,sp,40
    11cc:	f800283a 	ret
    11d0:	01008004 	movi	r4,512
    11d4:	01c01004 	movi	r7,64
    11d8:	02000fc4 	movi	r8,63
    11dc:	003f9306 	br	102c <_malloc_r+0xe4>
    11e0:	14000317 	ldw	r16,12(r2)
    11e4:	39c00084 	addi	r7,r7,2
    11e8:	143f721e 	bne	r2,r16,fb4 <_malloc_r+0x6c>
    11ec:	9c000417 	ldw	r16,16(r19)
    11f0:	02400034 	movhi	r9,0
    11f4:	4a56e904 	addi	r9,r9,23460
    11f8:	827fa11e 	bne	r16,r9,1080 <_malloc_r+0x138>
    11fc:	3807d0ba 	srai	r3,r7,2
    1200:	01000044 	movi	r4,1
    1204:	98800117 	ldw	r2,4(r19)
    1208:	20c8983a 	sll	r4,r4,r3
    120c:	113fbb2e 	bgeu	r2,r4,10fc <_malloc_r+0x1b4>
    1210:	9c000217 	ldw	r16,8(r19)
    1214:	00bfff04 	movi	r2,-4
    1218:	85400117 	ldw	r21,4(r16)
    121c:	a8ac703a 	and	r22,r21,r2
    1220:	b4400336 	bltu	r22,r17,1230 <_malloc_r+0x2e8>
    1224:	b445c83a 	sub	r2,r22,r17
    1228:	10c00408 	cmpgei	r3,r2,16
    122c:	1800541e 	bne	r3,zero,1380 <_malloc_r+0x438>
    1230:	00800034 	movhi	r2,0
    1234:	109c6d17 	ldw	r2,29108(r2)
    1238:	00c00034 	movhi	r3,0
    123c:	1d5c7c17 	ldw	r21,29168(r3)
    1240:	10bfffd8 	cmpnei	r2,r2,-1
    1244:	85b9883a 	add	fp,r16,r22
    1248:	8d6b883a 	add	r21,r17,r21
    124c:	1000d626 	beq	r2,zero,15a8 <_malloc_r+0x660>
    1250:	ad4403c4 	addi	r21,r21,4111
    1254:	00bc0004 	movi	r2,-4096
    1258:	a8aa703a 	and	r21,r21,r2
    125c:	a80b883a 	mov	r5,r21
    1260:	9009883a 	mov	r4,r18
    1264:	00020780 	call	2078 <_sbrk_r>
    1268:	102f883a 	mov	r23,r2
    126c:	10bfffd8 	cmpnei	r2,r2,-1
    1270:	1000a826 	beq	r2,zero,1514 <_malloc_r+0x5cc>
    1274:	bf00a636 	bltu	r23,fp,1510 <_malloc_r+0x5c8>
    1278:	00800034 	movhi	r2,0
    127c:	151c8517 	ldw	r20,29204(r2)
    1280:	ad29883a 	add	r20,r21,r20
    1284:	151c8515 	stw	r20,29204(r2)
    1288:	a007883a 	mov	r3,r20
    128c:	e5c0ec26 	beq	fp,r23,1640 <_malloc_r+0x6f8>
    1290:	00800034 	movhi	r2,0
    1294:	109c6d17 	ldw	r2,29108(r2)
    1298:	10bfffd8 	cmpnei	r2,r2,-1
    129c:	1000ef26 	beq	r2,zero,165c <_malloc_r+0x714>
    12a0:	bf39c83a 	sub	fp,r23,fp
    12a4:	e0c7883a 	add	r3,fp,r3
    12a8:	00800034 	movhi	r2,0
    12ac:	10dc8515 	stw	r3,29204(r2)
    12b0:	bf0001cc 	andi	fp,r23,7
    12b4:	e000c526 	beq	fp,zero,15cc <_malloc_r+0x684>
    12b8:	bf2fc83a 	sub	r23,r23,fp
    12bc:	bdc00204 	addi	r23,r23,8
    12c0:	05040204 	movi	r20,4104
    12c4:	a729c83a 	sub	r20,r20,fp
    12c8:	bd6b883a 	add	r21,r23,r21
    12cc:	a569c83a 	sub	r20,r20,r21
    12d0:	a503ffcc 	andi	r20,r20,4095
    12d4:	a00b883a 	mov	r5,r20
    12d8:	9009883a 	mov	r4,r18
    12dc:	00020780 	call	2078 <_sbrk_r>
    12e0:	10ffffe0 	cmpeqi	r3,r2,-1
    12e4:	1800f31e 	bne	r3,zero,16b4 <_malloc_r+0x76c>
    12e8:	15c5c83a 	sub	r2,r2,r23
    12ec:	152b883a 	add	r21,r2,r20
    12f0:	00800034 	movhi	r2,0
    12f4:	115c8517 	ldw	r5,29204(r2)
    12f8:	9dc00215 	stw	r23,8(r19)
    12fc:	ad400054 	ori	r21,r21,1
    1300:	a169883a 	add	r20,r20,r5
    1304:	151c8515 	stw	r20,29204(r2)
    1308:	bd400115 	stw	r21,4(r23)
    130c:	84c0d626 	beq	r16,r19,1668 <_malloc_r+0x720>
    1310:	b0800428 	cmpgeui	r2,r22,16
    1314:	1000d626 	beq	r2,zero,1670 <_malloc_r+0x728>
    1318:	80c00117 	ldw	r3,4(r16)
    131c:	013ffe04 	movi	r4,-8
    1320:	b0bffd04 	addi	r2,r22,-12
    1324:	1104703a 	and	r2,r2,r4
    1328:	18c0004c 	andi	r3,r3,1
    132c:	1886b03a 	or	r3,r3,r2
    1330:	80c00115 	stw	r3,4(r16)
    1334:	01000144 	movi	r4,5
    1338:	8087883a 	add	r3,r16,r2
    133c:	19000115 	stw	r4,4(r3)
    1340:	19000215 	stw	r4,8(r3)
    1344:	10800428 	cmpgeui	r2,r2,16
    1348:	1000df1e 	bne	r2,zero,16c8 <_malloc_r+0x780>
    134c:	bd400117 	ldw	r21,4(r23)
    1350:	b821883a 	mov	r16,r23
    1354:	00800034 	movhi	r2,0
    1358:	109c7b17 	ldw	r2,29164(r2)
    135c:	1500022e 	bgeu	r2,r20,1368 <_malloc_r+0x420>
    1360:	00800034 	movhi	r2,0
    1364:	151c7b15 	stw	r20,29164(r2)
    1368:	00800034 	movhi	r2,0
    136c:	109c7a17 	ldw	r2,29160(r2)
    1370:	15006a2e 	bgeu	r2,r20,151c <_malloc_r+0x5d4>
    1374:	00800034 	movhi	r2,0
    1378:	151c7a15 	stw	r20,29160(r2)
    137c:	00006706 	br	151c <_malloc_r+0x5d4>
    1380:	88c00054 	ori	r3,r17,1
    1384:	80c00115 	stw	r3,4(r16)
    1388:	8463883a 	add	r17,r16,r17
    138c:	10800054 	ori	r2,r2,1
    1390:	9c400215 	stw	r17,8(r19)
    1394:	88800115 	stw	r2,4(r17)
    1398:	9009883a 	mov	r4,r18
    139c:	00039bc0 	call	39bc <__malloc_unlock>
    13a0:	80800204 	addi	r2,r16,8
    13a4:	003f7e06 	br	11a0 <_malloc_r+0x258>
    13a8:	81000317 	ldw	r4,12(r16)
    13ac:	003f0506 	br	fc4 <_malloc_r+0x7c>
    13b0:	1006d27a 	srli	r3,r2,9
    13b4:	19000168 	cmpgeui	r4,r3,5
    13b8:	20005026 	beq	r4,zero,14fc <_malloc_r+0x5b4>
    13bc:	19000568 	cmpgeui	r4,r3,21
    13c0:	20008c1e 	bne	r4,zero,15f4 <_malloc_r+0x6ac>
    13c4:	19401704 	addi	r5,r3,92
    13c8:	280a90fa 	slli	r5,r5,3
    13cc:	190016c4 	addi	r4,r3,91
    13d0:	994b883a 	add	r5,r19,r5
    13d4:	28c00017 	ldw	r3,0(r5)
    13d8:	297ffe04 	addi	r5,r5,-8
    13dc:	28c07426 	beq	r5,r3,15b0 <_malloc_r+0x668>
    13e0:	01bfff04 	movi	r6,-4
    13e4:	19000117 	ldw	r4,4(r3)
    13e8:	2188703a 	and	r4,r4,r6
    13ec:	1100022e 	bgeu	r2,r4,13f8 <_malloc_r+0x4b0>
    13f0:	18c00217 	ldw	r3,8(r3)
    13f4:	28fffb1e 	bne	r5,r3,13e4 <_malloc_r+0x49c>
    13f8:	19400317 	ldw	r5,12(r3)
    13fc:	98800117 	ldw	r2,4(r19)
    1400:	81400315 	stw	r5,12(r16)
    1404:	80c00215 	stw	r3,8(r16)
    1408:	2c000215 	stw	r16,8(r5)
    140c:	1c000315 	stw	r16,12(r3)
    1410:	003f3606 	br	10ec <_malloc_r+0x1a4>
    1414:	10c00568 	cmpgeui	r3,r2,21
    1418:	18004a26 	beq	r3,zero,1544 <_malloc_r+0x5fc>
    141c:	10c01568 	cmpgeui	r3,r2,85
    1420:	18007b1e 	bne	r3,zero,1610 <_malloc_r+0x6c8>
    1424:	8804d33a 	srli	r2,r17,12
    1428:	11c01bc4 	addi	r7,r2,111
    142c:	380890fa 	slli	r4,r7,3
    1430:	12001b84 	addi	r8,r2,110
    1434:	003efd06 	br	102c <_malloc_r+0xe4>
    1438:	63000044 	addi	r12,r12,1
    143c:	608000cc 	andi	r2,r12,3
    1440:	42000204 	addi	r8,r8,8
    1444:	103f3e1e 	bne	r2,zero,1140 <_malloc_r+0x1f8>
    1448:	00004506 	br	1560 <_malloc_r+0x618>
    144c:	81000217 	ldw	r4,8(r16)
    1450:	89800054 	ori	r6,r17,1
    1454:	81800115 	stw	r6,4(r16)
    1458:	20800315 	stw	r2,12(r4)
    145c:	11000215 	stw	r4,8(r2)
    1460:	8463883a 	add	r17,r16,r17
    1464:	9c400515 	stw	r17,20(r19)
    1468:	9c400415 	stw	r17,16(r19)
    146c:	28800054 	ori	r2,r5,1
    1470:	88800115 	stw	r2,4(r17)
    1474:	8a400315 	stw	r9,12(r17)
    1478:	8a400215 	stw	r9,8(r17)
    147c:	80c7883a 	add	r3,r16,r3
    1480:	19400015 	stw	r5,0(r3)
    1484:	9009883a 	mov	r4,r18
    1488:	00039bc0 	call	39bc <__malloc_unlock>
    148c:	80800204 	addi	r2,r16,8
    1490:	003f4306 	br	11a0 <_malloc_r+0x258>
    1494:	880ed0fa 	srli	r7,r17,3
    1498:	88800204 	addi	r2,r17,8
    149c:	003ebf06 	br	f9c <_malloc_r+0x54>
    14a0:	8085883a 	add	r2,r16,r2
    14a4:	10c00117 	ldw	r3,4(r2)
    14a8:	9009883a 	mov	r4,r18
    14ac:	18c00054 	ori	r3,r3,1
    14b0:	10c00115 	stw	r3,4(r2)
    14b4:	00039bc0 	call	39bc <__malloc_unlock>
    14b8:	80800204 	addi	r2,r16,8
    14bc:	003f3806 	br	11a0 <_malloc_r+0x258>
    14c0:	89000054 	ori	r4,r17,1
    14c4:	81000115 	stw	r4,4(r16)
    14c8:	8463883a 	add	r17,r16,r17
    14cc:	9c400515 	stw	r17,20(r19)
    14d0:	9c400415 	stw	r17,16(r19)
    14d4:	19000054 	ori	r4,r3,1
    14d8:	89000115 	stw	r4,4(r17)
    14dc:	8085883a 	add	r2,r16,r2
    14e0:	8a400315 	stw	r9,12(r17)
    14e4:	8a400215 	stw	r9,8(r17)
    14e8:	10c00015 	stw	r3,0(r2)
    14ec:	9009883a 	mov	r4,r18
    14f0:	00039bc0 	call	39bc <__malloc_unlock>
    14f4:	80800204 	addi	r2,r16,8
    14f8:	003f2906 	br	11a0 <_malloc_r+0x258>
    14fc:	1006d1ba 	srli	r3,r2,6
    1500:	19400e44 	addi	r5,r3,57
    1504:	280a90fa 	slli	r5,r5,3
    1508:	19000e04 	addi	r4,r3,56
    150c:	003fb006 	br	13d0 <_malloc_r+0x488>
    1510:	84c04626 	beq	r16,r19,162c <_malloc_r+0x6e4>
    1514:	9c000217 	ldw	r16,8(r19)
    1518:	85400117 	ldw	r21,4(r16)
    151c:	00bfff04 	movi	r2,-4
    1520:	a8aa703a 	and	r21,r21,r2
    1524:	ac45c83a 	sub	r2,r21,r17
    1528:	ac400236 	bltu	r21,r17,1534 <_malloc_r+0x5ec>
    152c:	10c00408 	cmpgei	r3,r2,16
    1530:	183f931e 	bne	r3,zero,1380 <_malloc_r+0x438>
    1534:	9009883a 	mov	r4,r18
    1538:	00039bc0 	call	39bc <__malloc_unlock>
    153c:	0005883a 	mov	r2,zero
    1540:	003f1706 	br	11a0 <_malloc_r+0x258>
    1544:	11c01704 	addi	r7,r2,92
    1548:	380890fa 	slli	r4,r7,3
    154c:	120016c4 	addi	r8,r2,91
    1550:	003eb606 	br	102c <_malloc_r+0xe4>
    1554:	58800217 	ldw	r2,8(r11)
    1558:	39ffffc4 	addi	r7,r7,-1
    155c:	12c0701e 	bne	r2,r11,1720 <_malloc_r+0x7d8>
    1560:	388000cc 	andi	r2,r7,3
    1564:	5afffe04 	addi	r11,r11,-8
    1568:	103ffa1e 	bne	r2,zero,1554 <_malloc_r+0x60c>
    156c:	98c00117 	ldw	r3,4(r19)
    1570:	0104303a 	nor	r2,zero,r4
    1574:	10c4703a 	and	r2,r2,r3
    1578:	98800115 	stw	r2,4(r19)
    157c:	2109883a 	add	r4,r4,r4
    1580:	113f2336 	bltu	r2,r4,1210 <_malloc_r+0x2c8>
    1584:	203f2226 	beq	r4,zero,1210 <_malloc_r+0x2c8>
    1588:	2086703a 	and	r3,r4,r2
    158c:	1800041e 	bne	r3,zero,15a0 <_malloc_r+0x658>
    1590:	2109883a 	add	r4,r4,r4
    1594:	2086703a 	and	r3,r4,r2
    1598:	63000104 	addi	r12,r12,4
    159c:	183ffc26 	beq	r3,zero,1590 <_malloc_r+0x648>
    15a0:	600f883a 	mov	r7,r12
    15a4:	003ee206 	br	1130 <_malloc_r+0x1e8>
    15a8:	ad400404 	addi	r21,r21,16
    15ac:	003f2b06 	br	125c <_malloc_r+0x314>
    15b0:	2009d0ba 	srai	r4,r4,2
    15b4:	00800044 	movi	r2,1
    15b8:	99800117 	ldw	r6,4(r19)
    15bc:	1104983a 	sll	r2,r2,r4
    15c0:	1184b03a 	or	r2,r2,r6
    15c4:	98800115 	stw	r2,4(r19)
    15c8:	003f8d06 	br	1400 <_malloc_r+0x4b8>
    15cc:	bd69883a 	add	r20,r23,r21
    15d0:	0529c83a 	sub	r20,zero,r20
    15d4:	a503ffcc 	andi	r20,r20,4095
    15d8:	a00b883a 	mov	r5,r20
    15dc:	9009883a 	mov	r4,r18
    15e0:	00020780 	call	2078 <_sbrk_r>
    15e4:	10ffffe0 	cmpeqi	r3,r2,-1
    15e8:	183f3f26 	beq	r3,zero,12e8 <_malloc_r+0x3a0>
    15ec:	0029883a 	mov	r20,zero
    15f0:	003f3f06 	br	12f0 <_malloc_r+0x3a8>
    15f4:	19001568 	cmpgeui	r4,r3,85
    15f8:	2000201e 	bne	r4,zero,167c <_malloc_r+0x734>
    15fc:	1006d33a 	srli	r3,r2,12
    1600:	19401bc4 	addi	r5,r3,111
    1604:	280a90fa 	slli	r5,r5,3
    1608:	19001b84 	addi	r4,r3,110
    160c:	003f7006 	br	13d0 <_malloc_r+0x488>
    1610:	10c05568 	cmpgeui	r3,r2,341
    1614:	1800201e 	bne	r3,zero,1698 <_malloc_r+0x750>
    1618:	8804d3fa 	srli	r2,r17,15
    161c:	11c01e04 	addi	r7,r2,120
    1620:	380890fa 	slli	r4,r7,3
    1624:	12001dc4 	addi	r8,r2,119
    1628:	003e8006 	br	102c <_malloc_r+0xe4>
    162c:	00800034 	movhi	r2,0
    1630:	10dc8517 	ldw	r3,29204(r2)
    1634:	a8c7883a 	add	r3,r21,r3
    1638:	10dc8515 	stw	r3,29204(r2)
    163c:	003f1406 	br	1290 <_malloc_r+0x348>
    1640:	e083ffcc 	andi	r2,fp,4095
    1644:	103f121e 	bne	r2,zero,1290 <_malloc_r+0x348>
    1648:	9c000217 	ldw	r16,8(r19)
    164c:	b56b883a 	add	r21,r22,r21
    1650:	ad400054 	ori	r21,r21,1
    1654:	85400115 	stw	r21,4(r16)
    1658:	003f3e06 	br	1354 <_malloc_r+0x40c>
    165c:	00800034 	movhi	r2,0
    1660:	15dc6d15 	stw	r23,29108(r2)
    1664:	003f1206 	br	12b0 <_malloc_r+0x368>
    1668:	b821883a 	mov	r16,r23
    166c:	003f3906 	br	1354 <_malloc_r+0x40c>
    1670:	00800044 	movi	r2,1
    1674:	b8800115 	stw	r2,4(r23)
    1678:	003fae06 	br	1534 <_malloc_r+0x5ec>
    167c:	19005568 	cmpgeui	r4,r3,341
    1680:	2000191e 	bne	r4,zero,16e8 <_malloc_r+0x7a0>
    1684:	1006d3fa 	srli	r3,r2,15
    1688:	19401e04 	addi	r5,r3,120
    168c:	280a90fa 	slli	r5,r5,3
    1690:	19001dc4 	addi	r4,r3,119
    1694:	003f4e06 	br	13d0 <_malloc_r+0x488>
    1698:	10815568 	cmpgeui	r2,r2,1365
    169c:	1000191e 	bne	r2,zero,1704 <_malloc_r+0x7bc>
    16a0:	8804d4ba 	srli	r2,r17,18
    16a4:	11c01f44 	addi	r7,r2,125
    16a8:	380890fa 	slli	r4,r7,3
    16ac:	12001f04 	addi	r8,r2,124
    16b0:	003e5e06 	br	102c <_malloc_r+0xe4>
    16b4:	e73ffe04 	addi	fp,fp,-8
    16b8:	af2b883a 	add	r21,r21,fp
    16bc:	adebc83a 	sub	r21,r21,r23
    16c0:	0029883a 	mov	r20,zero
    16c4:	003f0a06 	br	12f0 <_malloc_r+0x3a8>
    16c8:	81400204 	addi	r5,r16,8
    16cc:	9009883a 	mov	r4,r18
    16d0:	00029f80 	call	29f8 <_free_r>
    16d4:	9c000217 	ldw	r16,8(r19)
    16d8:	00800034 	movhi	r2,0
    16dc:	151c8517 	ldw	r20,29204(r2)
    16e0:	85400117 	ldw	r21,4(r16)
    16e4:	003f1b06 	br	1354 <_malloc_r+0x40c>
    16e8:	18c15568 	cmpgeui	r3,r3,1365
    16ec:	1800091e 	bne	r3,zero,1714 <_malloc_r+0x7cc>
    16f0:	1006d4ba 	srli	r3,r2,18
    16f4:	19401f44 	addi	r5,r3,125
    16f8:	280a90fa 	slli	r5,r5,3
    16fc:	19001f04 	addi	r4,r3,124
    1700:	003f3306 	br	13d0 <_malloc_r+0x488>
    1704:	0100fe04 	movi	r4,1016
    1708:	01c01fc4 	movi	r7,127
    170c:	02001f84 	movi	r8,126
    1710:	003e4606 	br	102c <_malloc_r+0xe4>
    1714:	0140fe04 	movi	r5,1016
    1718:	01001f84 	movi	r4,126
    171c:	003f2c06 	br	13d0 <_malloc_r+0x488>
    1720:	98800117 	ldw	r2,4(r19)
    1724:	003f9506 	br	157c <_malloc_r+0x634>

00001728 <memchr>:
    1728:	208000cc 	andi	r2,r4,3
    172c:	280f883a 	mov	r7,r5
    1730:	10000e26 	beq	r2,zero,176c <memchr+0x44>
    1734:	30bfffc4 	addi	r2,r6,-1
    1738:	30001726 	beq	r6,zero,1798 <memchr+0x70>
    173c:	29803fcc 	andi	r6,r5,255
    1740:	00000606 	br	175c <memchr+0x34>
    1744:	21000044 	addi	r4,r4,1
    1748:	20c000cc 	andi	r3,r4,3
    174c:	18000826 	beq	r3,zero,1770 <memchr+0x48>
    1750:	10bfffc4 	addi	r2,r2,-1
    1754:	10ffffe0 	cmpeqi	r3,r2,-1
    1758:	18000f1e 	bne	r3,zero,1798 <memchr+0x70>
    175c:	20c00003 	ldbu	r3,0(r4)
    1760:	19bff81e 	bne	r3,r6,1744 <memchr+0x1c>
    1764:	2005883a 	mov	r2,r4
    1768:	f800283a 	ret
    176c:	3005883a 	mov	r2,r6
    1770:	10c00128 	cmpgeui	r3,r2,4
    1774:	18000a1e 	bne	r3,zero,17a0 <memchr+0x78>
    1778:	10001e26 	beq	r2,zero,17f4 <memchr+0xcc>
    177c:	2087883a 	add	r3,r4,r2
    1780:	39803fcc 	andi	r6,r7,255
    1784:	2005883a 	mov	r2,r4
    1788:	11000003 	ldbu	r4,0(r2)
    178c:	21bff626 	beq	r4,r6,1768 <memchr+0x40>
    1790:	10800044 	addi	r2,r2,1
    1794:	18bffc1e 	bne	r3,r2,1788 <memchr+0x60>
    1798:	0005883a 	mov	r2,zero
    179c:	f800283a 	ret
    17a0:	29403fcc 	andi	r5,r5,255
    17a4:	280c923a 	slli	r6,r5,8
    17a8:	027fbff4 	movhi	r9,65279
    17ac:	02202074 	movhi	r8,32897
    17b0:	314ab03a 	or	r5,r6,r5
    17b4:	280c943a 	slli	r6,r5,16
    17b8:	4a7fbfc4 	addi	r9,r9,-257
    17bc:	42202004 	addi	r8,r8,-32640
    17c0:	314cb03a 	or	r6,r6,r5
    17c4:	20c00017 	ldw	r3,0(r4)
    17c8:	30c6f03a 	xor	r3,r6,r3
    17cc:	1a4b883a 	add	r5,r3,r9
    17d0:	00c6303a 	nor	r3,zero,r3
    17d4:	28c6703a 	and	r3,r5,r3
    17d8:	1a06703a 	and	r3,r3,r8
    17dc:	183fe71e 	bne	r3,zero,177c <memchr+0x54>
    17e0:	10bfff04 	addi	r2,r2,-4
    17e4:	10c00128 	cmpgeui	r3,r2,4
    17e8:	21000104 	addi	r4,r4,4
    17ec:	183ff51e 	bne	r3,zero,17c4 <memchr+0x9c>
    17f0:	003fe106 	br	1778 <memchr+0x50>
    17f4:	f800283a 	ret

000017f8 <memcpy>:
    17f8:	30c00430 	cmpltui	r3,r6,16
    17fc:	2005883a 	mov	r2,r4
    1800:	18002d1e 	bne	r3,zero,18b8 <memcpy+0xc0>
    1804:	2906b03a 	or	r3,r5,r4
    1808:	18c000cc 	andi	r3,r3,3
    180c:	1800351e 	bne	r3,zero,18e4 <memcpy+0xec>
    1810:	32fffc04 	addi	r11,r6,-16
    1814:	5816d13a 	srli	r11,r11,4
    1818:	280f883a 	mov	r7,r5
    181c:	2007883a 	mov	r3,r4
    1820:	5ac00044 	addi	r11,r11,1
    1824:	5816913a 	slli	r11,r11,4
    1828:	22d5883a 	add	r10,r4,r11
    182c:	39000117 	ldw	r4,4(r7)
    1830:	3a400017 	ldw	r9,0(r7)
    1834:	3a000217 	ldw	r8,8(r7)
    1838:	19000115 	stw	r4,4(r3)
    183c:	39000317 	ldw	r4,12(r7)
    1840:	1a400015 	stw	r9,0(r3)
    1844:	1a000215 	stw	r8,8(r3)
    1848:	19000315 	stw	r4,12(r3)
    184c:	18c00404 	addi	r3,r3,16
    1850:	39c00404 	addi	r7,r7,16
    1854:	50fff51e 	bne	r10,r3,182c <memcpy+0x34>
    1858:	3100030c 	andi	r4,r6,12
    185c:	2acb883a 	add	r5,r5,r11
    1860:	320003cc 	andi	r8,r6,15
    1864:	20002226 	beq	r4,zero,18f0 <memcpy+0xf8>
    1868:	280f883a 	mov	r7,r5
    186c:	1813883a 	mov	r9,r3
    1870:	39c00104 	addi	r7,r7,4
    1874:	3abfff17 	ldw	r10,-4(r7)
    1878:	41c9c83a 	sub	r4,r8,r7
    187c:	2909883a 	add	r4,r5,r4
    1880:	4a800015 	stw	r10,0(r9)
    1884:	21000128 	cmpgeui	r4,r4,4
    1888:	4a400104 	addi	r9,r9,4
    188c:	203ff81e 	bne	r4,zero,1870 <memcpy+0x78>
    1890:	413fff04 	addi	r4,r8,-4
    1894:	2008d0ba 	srli	r4,r4,2
    1898:	318000cc 	andi	r6,r6,3
    189c:	31ffffc4 	addi	r7,r6,-1
    18a0:	21000044 	addi	r4,r4,1
    18a4:	200890ba 	slli	r4,r4,2
    18a8:	1907883a 	add	r3,r3,r4
    18ac:	290b883a 	add	r5,r5,r4
    18b0:	3000041e 	bne	r6,zero,18c4 <memcpy+0xcc>
    18b4:	f800283a 	ret
    18b8:	2007883a 	mov	r3,r4
    18bc:	31ffffc4 	addi	r7,r6,-1
    18c0:	303ffc26 	beq	r6,zero,18b4 <memcpy+0xbc>
    18c4:	39c00044 	addi	r7,r7,1
    18c8:	19cf883a 	add	r7,r3,r7
    18cc:	29800003 	ldbu	r6,0(r5)
    18d0:	18c00044 	addi	r3,r3,1
    18d4:	29400044 	addi	r5,r5,1
    18d8:	19bfffc5 	stb	r6,-1(r3)
    18dc:	38fffb1e 	bne	r7,r3,18cc <memcpy+0xd4>
    18e0:	f800283a 	ret
    18e4:	31ffffc4 	addi	r7,r6,-1
    18e8:	2007883a 	mov	r3,r4
    18ec:	003ff506 	br	18c4 <memcpy+0xcc>
    18f0:	400d883a 	mov	r6,r8
    18f4:	003ff106 	br	18bc <memcpy+0xc4>

000018f8 <memmove>:
    18f8:	2005883a 	mov	r2,r4
    18fc:	29000a2e 	bgeu	r5,r4,1928 <memmove+0x30>
    1900:	2989883a 	add	r4,r5,r6
    1904:	1100082e 	bgeu	r2,r4,1928 <memmove+0x30>
    1908:	1187883a 	add	r3,r2,r6
    190c:	30003e26 	beq	r6,zero,1a08 <memmove+0x110>
    1910:	217fffc3 	ldbu	r5,-1(r4)
    1914:	18ffffc4 	addi	r3,r3,-1
    1918:	213fffc4 	addi	r4,r4,-1
    191c:	19400005 	stb	r5,0(r3)
    1920:	10fffb1e 	bne	r2,r3,1910 <memmove+0x18>
    1924:	f800283a 	ret
    1928:	30c00430 	cmpltui	r3,r6,16
    192c:	18000b26 	beq	r3,zero,195c <memmove+0x64>
    1930:	1007883a 	mov	r3,r2
    1934:	31ffffc4 	addi	r7,r6,-1
    1938:	30003726 	beq	r6,zero,1a18 <memmove+0x120>
    193c:	39c00044 	addi	r7,r7,1
    1940:	29cf883a 	add	r7,r5,r7
    1944:	29800003 	ldbu	r6,0(r5)
    1948:	29400044 	addi	r5,r5,1
    194c:	18c00044 	addi	r3,r3,1
    1950:	19bfffc5 	stb	r6,-1(r3)
    1954:	29fffb1e 	bne	r5,r7,1944 <memmove+0x4c>
    1958:	f800283a 	ret
    195c:	2886b03a 	or	r3,r5,r2
    1960:	18c000cc 	andi	r3,r3,3
    1964:	1800291e 	bne	r3,zero,1a0c <memmove+0x114>
    1968:	327ffc04 	addi	r9,r6,-16
    196c:	4812d13a 	srli	r9,r9,4
    1970:	280f883a 	mov	r7,r5
    1974:	1007883a 	mov	r3,r2
    1978:	4a400044 	addi	r9,r9,1
    197c:	4812913a 	slli	r9,r9,4
    1980:	1251883a 	add	r8,r2,r9
    1984:	39000017 	ldw	r4,0(r7)
    1988:	39c00404 	addi	r7,r7,16
    198c:	18c00404 	addi	r3,r3,16
    1990:	193ffc15 	stw	r4,-16(r3)
    1994:	393ffd17 	ldw	r4,-12(r7)
    1998:	193ffd15 	stw	r4,-12(r3)
    199c:	393ffe17 	ldw	r4,-8(r7)
    19a0:	193ffe15 	stw	r4,-8(r3)
    19a4:	393fff17 	ldw	r4,-4(r7)
    19a8:	193fff15 	stw	r4,-4(r3)
    19ac:	40fff51e 	bne	r8,r3,1984 <memmove+0x8c>
    19b0:	3100030c 	andi	r4,r6,12
    19b4:	2a4b883a 	add	r5,r5,r9
    19b8:	320003cc 	andi	r8,r6,15
    19bc:	20001726 	beq	r4,zero,1a1c <memmove+0x124>
    19c0:	2813883a 	mov	r9,r5
    19c4:	180f883a 	mov	r7,r3
    19c8:	4a800017 	ldw	r10,0(r9)
    19cc:	39c00104 	addi	r7,r7,4
    19d0:	41c9c83a 	sub	r4,r8,r7
    19d4:	1909883a 	add	r4,r3,r4
    19d8:	21000128 	cmpgeui	r4,r4,4
    19dc:	3abfff15 	stw	r10,-4(r7)
    19e0:	4a400104 	addi	r9,r9,4
    19e4:	203ff81e 	bne	r4,zero,19c8 <memmove+0xd0>
    19e8:	413fff04 	addi	r4,r8,-4
    19ec:	2008d0ba 	srli	r4,r4,2
    19f0:	318000cc 	andi	r6,r6,3
    19f4:	21000044 	addi	r4,r4,1
    19f8:	200890ba 	slli	r4,r4,2
    19fc:	1907883a 	add	r3,r3,r4
    1a00:	290b883a 	add	r5,r5,r4
    1a04:	003fcb06 	br	1934 <memmove+0x3c>
    1a08:	f800283a 	ret
    1a0c:	31ffffc4 	addi	r7,r6,-1
    1a10:	1007883a 	mov	r3,r2
    1a14:	003fc906 	br	193c <memmove+0x44>
    1a18:	f800283a 	ret
    1a1c:	400d883a 	mov	r6,r8
    1a20:	003fc406 	br	1934 <memmove+0x3c>

00001a24 <memset>:
    1a24:	20c000cc 	andi	r3,r4,3
    1a28:	2005883a 	mov	r2,r4
    1a2c:	18003626 	beq	r3,zero,1b08 <memset+0xe4>
    1a30:	31ffffc4 	addi	r7,r6,-1
    1a34:	30003326 	beq	r6,zero,1b04 <memset+0xe0>
    1a38:	2811883a 	mov	r8,r5
    1a3c:	2007883a 	mov	r3,r4
    1a40:	00000306 	br	1a50 <memset+0x2c>
    1a44:	39ffffc4 	addi	r7,r7,-1
    1a48:	39bfffe0 	cmpeqi	r6,r7,-1
    1a4c:	30002d1e 	bne	r6,zero,1b04 <memset+0xe0>
    1a50:	18c00044 	addi	r3,r3,1
    1a54:	198000cc 	andi	r6,r3,3
    1a58:	1a3fffc5 	stb	r8,-1(r3)
    1a5c:	303ff91e 	bne	r6,zero,1a44 <memset+0x20>
    1a60:	39000130 	cmpltui	r4,r7,4
    1a64:	2000221e 	bne	r4,zero,1af0 <memset+0xcc>
    1a68:	29003fcc 	andi	r4,r5,255
    1a6c:	200c923a 	slli	r6,r4,8
    1a70:	3a000430 	cmpltui	r8,r7,16
    1a74:	3108b03a 	or	r4,r6,r4
    1a78:	200c943a 	slli	r6,r4,16
    1a7c:	310cb03a 	or	r6,r6,r4
    1a80:	40000e1e 	bne	r8,zero,1abc <memset+0x98>
    1a84:	393ffc04 	addi	r4,r7,-16
    1a88:	2008d13a 	srli	r4,r4,4
    1a8c:	21000044 	addi	r4,r4,1
    1a90:	2008913a 	slli	r4,r4,4
    1a94:	1909883a 	add	r4,r3,r4
    1a98:	19800015 	stw	r6,0(r3)
    1a9c:	19800115 	stw	r6,4(r3)
    1aa0:	19800215 	stw	r6,8(r3)
    1aa4:	19800315 	stw	r6,12(r3)
    1aa8:	18c00404 	addi	r3,r3,16
    1aac:	20fffa1e 	bne	r4,r3,1a98 <memset+0x74>
    1ab0:	3900030c 	andi	r4,r7,12
    1ab4:	39c003cc 	andi	r7,r7,15
    1ab8:	20000d26 	beq	r4,zero,1af0 <memset+0xcc>
    1abc:	1811883a 	mov	r8,r3
    1ac0:	42000104 	addi	r8,r8,4
    1ac4:	3a09c83a 	sub	r4,r7,r8
    1ac8:	1909883a 	add	r4,r3,r4
    1acc:	21000128 	cmpgeui	r4,r4,4
    1ad0:	41bfff15 	stw	r6,-4(r8)
    1ad4:	203ffa1e 	bne	r4,zero,1ac0 <memset+0x9c>
    1ad8:	393fff04 	addi	r4,r7,-4
    1adc:	2008d0ba 	srli	r4,r4,2
    1ae0:	39c000cc 	andi	r7,r7,3
    1ae4:	21000044 	addi	r4,r4,1
    1ae8:	200890ba 	slli	r4,r4,2
    1aec:	1907883a 	add	r3,r3,r4
    1af0:	38000426 	beq	r7,zero,1b04 <memset+0xe0>
    1af4:	19cf883a 	add	r7,r3,r7
    1af8:	18c00044 	addi	r3,r3,1
    1afc:	197fffc5 	stb	r5,-1(r3)
    1b00:	38fffd1e 	bne	r7,r3,1af8 <memset+0xd4>
    1b04:	f800283a 	ret
    1b08:	2007883a 	mov	r3,r4
    1b0c:	300f883a 	mov	r7,r6
    1b10:	003fd306 	br	1a60 <memset+0x3c>

00001b14 <_realloc_r>:
    1b14:	defff504 	addi	sp,sp,-44
    1b18:	dc800315 	stw	r18,12(sp)
    1b1c:	dfc00a15 	stw	ra,40(sp)
    1b20:	df000915 	stw	fp,36(sp)
    1b24:	ddc00815 	stw	r23,32(sp)
    1b28:	dd800715 	stw	r22,28(sp)
    1b2c:	dd400615 	stw	r21,24(sp)
    1b30:	dd000515 	stw	r20,20(sp)
    1b34:	dcc00415 	stw	r19,16(sp)
    1b38:	dc400215 	stw	r17,8(sp)
    1b3c:	dc000115 	stw	r16,4(sp)
    1b40:	3025883a 	mov	r18,r6
    1b44:	28008b26 	beq	r5,zero,1d74 <_realloc_r+0x260>
    1b48:	2821883a 	mov	r16,r5
    1b4c:	2027883a 	mov	r19,r4
    1b50:	944002c4 	addi	r17,r18,11
    1b54:	00039980 	call	3998 <__malloc_lock>
    1b58:	888005f0 	cmpltui	r2,r17,23
    1b5c:	1000521e 	bne	r2,zero,1ca8 <_realloc_r+0x194>
    1b60:	017ffe04 	movi	r5,-8
    1b64:	8962703a 	and	r17,r17,r5
    1b68:	8807883a 	mov	r3,r17
    1b6c:	88005116 	blt	r17,zero,1cb4 <_realloc_r+0x1a0>
    1b70:	8c805036 	bltu	r17,r18,1cb4 <_realloc_r+0x1a0>
    1b74:	80bfff17 	ldw	r2,-4(r16)
    1b78:	017fff04 	movi	r5,-4
    1b7c:	857ffe04 	addi	r21,r16,-8
    1b80:	1168703a 	and	r20,r2,r5
    1b84:	ad2d883a 	add	r22,r21,r20
    1b88:	a0c0390e 	bge	r20,r3,1c70 <_realloc_r+0x15c>
    1b8c:	07000034 	movhi	fp,0
    1b90:	e716e704 	addi	fp,fp,23452
    1b94:	e2000217 	ldw	r8,8(fp)
    1b98:	b1000117 	ldw	r4,4(r22)
    1b9c:	45808e26 	beq	r8,r22,1dd8 <_realloc_r+0x2c4>
    1ba0:	01bfff84 	movi	r6,-2
    1ba4:	218c703a 	and	r6,r4,r6
    1ba8:	b18d883a 	add	r6,r22,r6
    1bac:	31800117 	ldw	r6,4(r6)
    1bb0:	3180004c 	andi	r6,r6,1
    1bb4:	30004f1e 	bne	r6,zero,1cf4 <_realloc_r+0x1e0>
    1bb8:	2148703a 	and	r4,r4,r5
    1bbc:	a10b883a 	add	r5,r20,r4
    1bc0:	28c0bf0e 	bge	r5,r3,1ec0 <_realloc_r+0x3ac>
    1bc4:	1080004c 	andi	r2,r2,1
    1bc8:	10004c1e 	bne	r2,zero,1cfc <_realloc_r+0x1e8>
    1bcc:	81fffe17 	ldw	r7,-8(r16)
    1bd0:	00bfff04 	movi	r2,-4
    1bd4:	a9cfc83a 	sub	r7,r21,r7
    1bd8:	39400117 	ldw	r5,4(r7)
    1bdc:	288a703a 	and	r5,r5,r2
    1be0:	b0000426 	beq	r22,zero,1bf4 <_realloc_r+0xe0>
    1be4:	a16f883a 	add	r23,r20,r5
    1be8:	b92f883a 	add	r23,r23,r4
    1bec:	4580bf26 	beq	r8,r22,1eec <_realloc_r+0x3d8>
    1bf0:	b8c0930e 	bge	r23,r3,1e40 <_realloc_r+0x32c>
    1bf4:	38004126 	beq	r7,zero,1cfc <_realloc_r+0x1e8>
    1bf8:	a16f883a 	add	r23,r20,r5
    1bfc:	b8c03f16 	blt	r23,r3,1cfc <_realloc_r+0x1e8>
    1c00:	38800317 	ldw	r2,12(r7)
    1c04:	38c00217 	ldw	r3,8(r7)
    1c08:	a1bfff04 	addi	r6,r20,-4
    1c0c:	31400968 	cmpgeui	r5,r6,37
    1c10:	18800315 	stw	r2,12(r3)
    1c14:	10c00215 	stw	r3,8(r2)
    1c18:	39000204 	addi	r4,r7,8
    1c1c:	3ded883a 	add	r22,r7,r23
    1c20:	2800941e 	bne	r5,zero,1e74 <_realloc_r+0x360>
    1c24:	30800530 	cmpltui	r2,r6,20
    1c28:	80c00017 	ldw	r3,0(r16)
    1c2c:	1000df1e 	bne	r2,zero,1fac <_realloc_r+0x498>
    1c30:	38c00215 	stw	r3,8(r7)
    1c34:	80c00117 	ldw	r3,4(r16)
    1c38:	30800728 	cmpgeui	r2,r6,28
    1c3c:	38c00315 	stw	r3,12(r7)
    1c40:	1000dc1e 	bne	r2,zero,1fb4 <_realloc_r+0x4a0>
    1c44:	80c00217 	ldw	r3,8(r16)
    1c48:	38800404 	addi	r2,r7,16
    1c4c:	84000204 	addi	r16,r16,8
    1c50:	10c00015 	stw	r3,0(r2)
    1c54:	80c00117 	ldw	r3,4(r16)
    1c58:	b829883a 	mov	r20,r23
    1c5c:	382b883a 	mov	r21,r7
    1c60:	10c00115 	stw	r3,4(r2)
    1c64:	80c00217 	ldw	r3,8(r16)
    1c68:	2021883a 	mov	r16,r4
    1c6c:	10c00215 	stw	r3,8(r2)
    1c70:	a9800117 	ldw	r6,4(r21)
    1c74:	a445c83a 	sub	r2,r20,r17
    1c78:	10c00430 	cmpltui	r3,r2,16
    1c7c:	3180004c 	andi	r6,r6,1
    1c80:	18004926 	beq	r3,zero,1da8 <_realloc_r+0x294>
    1c84:	a18cb03a 	or	r6,r20,r6
    1c88:	a9800115 	stw	r6,4(r21)
    1c8c:	b0800117 	ldw	r2,4(r22)
    1c90:	10800054 	ori	r2,r2,1
    1c94:	b0800115 	stw	r2,4(r22)
    1c98:	9809883a 	mov	r4,r19
    1c9c:	00039bc0 	call	39bc <__malloc_unlock>
    1ca0:	8025883a 	mov	r18,r16
    1ca4:	00000606 	br	1cc0 <_realloc_r+0x1ac>
    1ca8:	04400404 	movi	r17,16
    1cac:	00c00404 	movi	r3,16
    1cb0:	8cbfb02e 	bgeu	r17,r18,1b74 <_realloc_r+0x60>
    1cb4:	00800304 	movi	r2,12
    1cb8:	98800015 	stw	r2,0(r19)
    1cbc:	0025883a 	mov	r18,zero
    1cc0:	9005883a 	mov	r2,r18
    1cc4:	dfc00a17 	ldw	ra,40(sp)
    1cc8:	df000917 	ldw	fp,36(sp)
    1ccc:	ddc00817 	ldw	r23,32(sp)
    1cd0:	dd800717 	ldw	r22,28(sp)
    1cd4:	dd400617 	ldw	r21,24(sp)
    1cd8:	dd000517 	ldw	r20,20(sp)
    1cdc:	dcc00417 	ldw	r19,16(sp)
    1ce0:	dc800317 	ldw	r18,12(sp)
    1ce4:	dc400217 	ldw	r17,8(sp)
    1ce8:	dc000117 	ldw	r16,4(sp)
    1cec:	dec00b04 	addi	sp,sp,44
    1cf0:	f800283a 	ret
    1cf4:	1080004c 	andi	r2,r2,1
    1cf8:	10006c26 	beq	r2,zero,1eac <_realloc_r+0x398>
    1cfc:	900b883a 	mov	r5,r18
    1d00:	9809883a 	mov	r4,r19
    1d04:	0000f480 	call	f48 <_malloc_r>
    1d08:	1025883a 	mov	r18,r2
    1d0c:	10001626 	beq	r2,zero,1d68 <_realloc_r+0x254>
    1d10:	80bfff17 	ldw	r2,-4(r16)
    1d14:	013fff84 	movi	r4,-2
    1d18:	90fffe04 	addi	r3,r18,-8
    1d1c:	1104703a 	and	r2,r2,r4
    1d20:	a885883a 	add	r2,r21,r2
    1d24:	10c05b26 	beq	r2,r3,1e94 <_realloc_r+0x380>
    1d28:	a1bfff04 	addi	r6,r20,-4
    1d2c:	30800968 	cmpgeui	r2,r6,37
    1d30:	10006a1e 	bne	r2,zero,1edc <_realloc_r+0x3c8>
    1d34:	30800530 	cmpltui	r2,r6,20
    1d38:	81000017 	ldw	r4,0(r16)
    1d3c:	10003726 	beq	r2,zero,1e1c <_realloc_r+0x308>
    1d40:	9005883a 	mov	r2,r18
    1d44:	8007883a 	mov	r3,r16
    1d48:	11000015 	stw	r4,0(r2)
    1d4c:	19000117 	ldw	r4,4(r3)
    1d50:	11000115 	stw	r4,4(r2)
    1d54:	18c00217 	ldw	r3,8(r3)
    1d58:	10c00215 	stw	r3,8(r2)
    1d5c:	800b883a 	mov	r5,r16
    1d60:	9809883a 	mov	r4,r19
    1d64:	00029f80 	call	29f8 <_free_r>
    1d68:	9809883a 	mov	r4,r19
    1d6c:	00039bc0 	call	39bc <__malloc_unlock>
    1d70:	003fd306 	br	1cc0 <_realloc_r+0x1ac>
    1d74:	300b883a 	mov	r5,r6
    1d78:	dfc00a17 	ldw	ra,40(sp)
    1d7c:	df000917 	ldw	fp,36(sp)
    1d80:	ddc00817 	ldw	r23,32(sp)
    1d84:	dd800717 	ldw	r22,28(sp)
    1d88:	dd400617 	ldw	r21,24(sp)
    1d8c:	dd000517 	ldw	r20,20(sp)
    1d90:	dcc00417 	ldw	r19,16(sp)
    1d94:	dc800317 	ldw	r18,12(sp)
    1d98:	dc400217 	ldw	r17,8(sp)
    1d9c:	dc000117 	ldw	r16,4(sp)
    1da0:	dec00b04 	addi	sp,sp,44
    1da4:	0000f481 	jmpi	f48 <_malloc_r>
    1da8:	344cb03a 	or	r6,r6,r17
    1dac:	a9800115 	stw	r6,4(r21)
    1db0:	ac4b883a 	add	r5,r21,r17
    1db4:	10800054 	ori	r2,r2,1
    1db8:	28800115 	stw	r2,4(r5)
    1dbc:	b0800117 	ldw	r2,4(r22)
    1dc0:	29400204 	addi	r5,r5,8
    1dc4:	9809883a 	mov	r4,r19
    1dc8:	10800054 	ori	r2,r2,1
    1dcc:	b0800115 	stw	r2,4(r22)
    1dd0:	00029f80 	call	29f8 <_free_r>
    1dd4:	003fb006 	br	1c98 <_realloc_r+0x184>
    1dd8:	2148703a 	and	r4,r4,r5
    1ddc:	a10b883a 	add	r5,r20,r4
    1de0:	89800404 	addi	r6,r17,16
    1de4:	29bf7716 	blt	r5,r6,1bc4 <_realloc_r+0xb0>
    1de8:	ac6b883a 	add	r21,r21,r17
    1dec:	2c45c83a 	sub	r2,r5,r17
    1df0:	e5400215 	stw	r21,8(fp)
    1df4:	10800054 	ori	r2,r2,1
    1df8:	a8800115 	stw	r2,4(r21)
    1dfc:	80bfff17 	ldw	r2,-4(r16)
    1e00:	9809883a 	mov	r4,r19
    1e04:	8025883a 	mov	r18,r16
    1e08:	1080004c 	andi	r2,r2,1
    1e0c:	1462b03a 	or	r17,r2,r17
    1e10:	847fff15 	stw	r17,-4(r16)
    1e14:	00039bc0 	call	39bc <__malloc_unlock>
    1e18:	003fa906 	br	1cc0 <_realloc_r+0x1ac>
    1e1c:	91000015 	stw	r4,0(r18)
    1e20:	80c00117 	ldw	r3,4(r16)
    1e24:	30800728 	cmpgeui	r2,r6,28
    1e28:	90c00115 	stw	r3,4(r18)
    1e2c:	1000551e 	bne	r2,zero,1f84 <_realloc_r+0x470>
    1e30:	81000217 	ldw	r4,8(r16)
    1e34:	80c00204 	addi	r3,r16,8
    1e38:	90800204 	addi	r2,r18,8
    1e3c:	003fc206 	br	1d48 <_realloc_r+0x234>
    1e40:	b0800317 	ldw	r2,12(r22)
    1e44:	b0c00217 	ldw	r3,8(r22)
    1e48:	a1bfff04 	addi	r6,r20,-4
    1e4c:	31400968 	cmpgeui	r5,r6,37
    1e50:	18800315 	stw	r2,12(r3)
    1e54:	10c00215 	stw	r3,8(r2)
    1e58:	38c00217 	ldw	r3,8(r7)
    1e5c:	38800317 	ldw	r2,12(r7)
    1e60:	39000204 	addi	r4,r7,8
    1e64:	3ded883a 	add	r22,r7,r23
    1e68:	18800315 	stw	r2,12(r3)
    1e6c:	10c00215 	stw	r3,8(r2)
    1e70:	283f6c26 	beq	r5,zero,1c24 <_realloc_r+0x110>
    1e74:	800b883a 	mov	r5,r16
    1e78:	d9c00015 	stw	r7,0(sp)
    1e7c:	00018f80 	call	18f8 <memmove>
    1e80:	d9c00017 	ldw	r7,0(sp)
    1e84:	1021883a 	mov	r16,r2
    1e88:	b829883a 	mov	r20,r23
    1e8c:	382b883a 	mov	r21,r7
    1e90:	003f7706 	br	1c70 <_realloc_r+0x15c>
    1e94:	90bfff17 	ldw	r2,-4(r18)
    1e98:	00ffff04 	movi	r3,-4
    1e9c:	10c4703a 	and	r2,r2,r3
    1ea0:	a0a9883a 	add	r20,r20,r2
    1ea4:	ad2d883a 	add	r22,r21,r20
    1ea8:	003f7106 	br	1c70 <_realloc_r+0x15c>
    1eac:	81fffe17 	ldw	r7,-8(r16)
    1eb0:	a9cfc83a 	sub	r7,r21,r7
    1eb4:	38800117 	ldw	r2,4(r7)
    1eb8:	114a703a 	and	r5,r2,r5
    1ebc:	003f4d06 	br	1bf4 <_realloc_r+0xe0>
    1ec0:	b0800317 	ldw	r2,12(r22)
    1ec4:	b0c00217 	ldw	r3,8(r22)
    1ec8:	2829883a 	mov	r20,r5
    1ecc:	a96d883a 	add	r22,r21,r5
    1ed0:	18800315 	stw	r2,12(r3)
    1ed4:	10c00215 	stw	r3,8(r2)
    1ed8:	003f6506 	br	1c70 <_realloc_r+0x15c>
    1edc:	800b883a 	mov	r5,r16
    1ee0:	9009883a 	mov	r4,r18
    1ee4:	00018f80 	call	18f8 <memmove>
    1ee8:	003f9c06 	br	1d5c <_realloc_r+0x248>
    1eec:	88800404 	addi	r2,r17,16
    1ef0:	b8bf4016 	blt	r23,r2,1bf4 <_realloc_r+0xe0>
    1ef4:	38800317 	ldw	r2,12(r7)
    1ef8:	38c00217 	ldw	r3,8(r7)
    1efc:	a1bfff04 	addi	r6,r20,-4
    1f00:	31000968 	cmpgeui	r4,r6,37
    1f04:	18800315 	stw	r2,12(r3)
    1f08:	10c00215 	stw	r3,8(r2)
    1f0c:	3c800204 	addi	r18,r7,8
    1f10:	20003b1e 	bne	r4,zero,2000 <_realloc_r+0x4ec>
    1f14:	30800530 	cmpltui	r2,r6,20
    1f18:	80c00017 	ldw	r3,0(r16)
    1f1c:	1000361e 	bne	r2,zero,1ff8 <_realloc_r+0x4e4>
    1f20:	38c00215 	stw	r3,8(r7)
    1f24:	80c00117 	ldw	r3,4(r16)
    1f28:	30800728 	cmpgeui	r2,r6,28
    1f2c:	38c00315 	stw	r3,12(r7)
    1f30:	1000401e 	bne	r2,zero,2034 <_realloc_r+0x520>
    1f34:	80c00217 	ldw	r3,8(r16)
    1f38:	38800404 	addi	r2,r7,16
    1f3c:	84000204 	addi	r16,r16,8
    1f40:	10c00015 	stw	r3,0(r2)
    1f44:	80c00117 	ldw	r3,4(r16)
    1f48:	10c00115 	stw	r3,4(r2)
    1f4c:	80c00217 	ldw	r3,8(r16)
    1f50:	10c00215 	stw	r3,8(r2)
    1f54:	3c47883a 	add	r3,r7,r17
    1f58:	bc45c83a 	sub	r2,r23,r17
    1f5c:	e0c00215 	stw	r3,8(fp)
    1f60:	10800054 	ori	r2,r2,1
    1f64:	18800115 	stw	r2,4(r3)
    1f68:	38800117 	ldw	r2,4(r7)
    1f6c:	9809883a 	mov	r4,r19
    1f70:	1080004c 	andi	r2,r2,1
    1f74:	1462b03a 	or	r17,r2,r17
    1f78:	3c400115 	stw	r17,4(r7)
    1f7c:	00039bc0 	call	39bc <__malloc_unlock>
    1f80:	003f4f06 	br	1cc0 <_realloc_r+0x1ac>
    1f84:	80800217 	ldw	r2,8(r16)
    1f88:	31800920 	cmpeqi	r6,r6,36
    1f8c:	90800215 	stw	r2,8(r18)
    1f90:	80800317 	ldw	r2,12(r16)
    1f94:	90800315 	stw	r2,12(r18)
    1f98:	81000417 	ldw	r4,16(r16)
    1f9c:	30000f1e 	bne	r6,zero,1fdc <_realloc_r+0x4c8>
    1fa0:	80c00404 	addi	r3,r16,16
    1fa4:	90800404 	addi	r2,r18,16
    1fa8:	003f6706 	br	1d48 <_realloc_r+0x234>
    1fac:	2005883a 	mov	r2,r4
    1fb0:	003f2706 	br	1c50 <_realloc_r+0x13c>
    1fb4:	80800217 	ldw	r2,8(r16)
    1fb8:	31800920 	cmpeqi	r6,r6,36
    1fbc:	38800415 	stw	r2,16(r7)
    1fc0:	80800317 	ldw	r2,12(r16)
    1fc4:	38800515 	stw	r2,20(r7)
    1fc8:	80c00417 	ldw	r3,16(r16)
    1fcc:	3000121e 	bne	r6,zero,2018 <_realloc_r+0x504>
    1fd0:	38800604 	addi	r2,r7,24
    1fd4:	84000404 	addi	r16,r16,16
    1fd8:	003f1d06 	br	1c50 <_realloc_r+0x13c>
    1fdc:	91000415 	stw	r4,16(r18)
    1fe0:	81000517 	ldw	r4,20(r16)
    1fe4:	80c00604 	addi	r3,r16,24
    1fe8:	90800604 	addi	r2,r18,24
    1fec:	91000515 	stw	r4,20(r18)
    1ff0:	81000617 	ldw	r4,24(r16)
    1ff4:	003f5406 	br	1d48 <_realloc_r+0x234>
    1ff8:	9005883a 	mov	r2,r18
    1ffc:	003fd006 	br	1f40 <_realloc_r+0x42c>
    2000:	800b883a 	mov	r5,r16
    2004:	9009883a 	mov	r4,r18
    2008:	d9c00015 	stw	r7,0(sp)
    200c:	00018f80 	call	18f8 <memmove>
    2010:	d9c00017 	ldw	r7,0(sp)
    2014:	003fcf06 	br	1f54 <_realloc_r+0x440>
    2018:	84000604 	addi	r16,r16,24
    201c:	38c00615 	stw	r3,24(r7)
    2020:	80ffff17 	ldw	r3,-4(r16)
    2024:	38800804 	addi	r2,r7,32
    2028:	38c00715 	stw	r3,28(r7)
    202c:	80c00017 	ldw	r3,0(r16)
    2030:	003f0706 	br	1c50 <_realloc_r+0x13c>
    2034:	80800217 	ldw	r2,8(r16)
    2038:	31800920 	cmpeqi	r6,r6,36
    203c:	38800415 	stw	r2,16(r7)
    2040:	80800317 	ldw	r2,12(r16)
    2044:	38800515 	stw	r2,20(r7)
    2048:	80c00417 	ldw	r3,16(r16)
    204c:	3000031e 	bne	r6,zero,205c <_realloc_r+0x548>
    2050:	38800604 	addi	r2,r7,24
    2054:	84000404 	addi	r16,r16,16
    2058:	003fb906 	br	1f40 <_realloc_r+0x42c>
    205c:	84000604 	addi	r16,r16,24
    2060:	38c00615 	stw	r3,24(r7)
    2064:	80ffff17 	ldw	r3,-4(r16)
    2068:	38800804 	addi	r2,r7,32
    206c:	38c00715 	stw	r3,28(r7)
    2070:	80c00017 	ldw	r3,0(r16)
    2074:	003fb206 	br	1f40 <_realloc_r+0x42c>

00002078 <_sbrk_r>:
    2078:	defffe04 	addi	sp,sp,-8
    207c:	dc000015 	stw	r16,0(sp)
    2080:	00800034 	movhi	r2,0
    2084:	2021883a 	mov	r16,r4
    2088:	2809883a 	mov	r4,r5
    208c:	dfc00115 	stw	ra,4(sp)
    2090:	101c7d15 	stw	zero,29172(r2)
    2094:	0003b700 	call	3b70 <sbrk>
    2098:	10ffffd8 	cmpnei	r3,r2,-1
    209c:	18000426 	beq	r3,zero,20b0 <_sbrk_r+0x38>
    20a0:	dfc00117 	ldw	ra,4(sp)
    20a4:	dc000017 	ldw	r16,0(sp)
    20a8:	dec00204 	addi	sp,sp,8
    20ac:	f800283a 	ret
    20b0:	00c00034 	movhi	r3,0
    20b4:	18dc7d17 	ldw	r3,29172(r3)
    20b8:	183ff926 	beq	r3,zero,20a0 <_sbrk_r+0x28>
    20bc:	80c00015 	stw	r3,0(r16)
    20c0:	dfc00117 	ldw	ra,4(sp)
    20c4:	dc000017 	ldw	r16,0(sp)
    20c8:	dec00204 	addi	sp,sp,8
    20cc:	f800283a 	ret

000020d0 <__sread>:
    20d0:	defffe04 	addi	sp,sp,-8
    20d4:	dc000015 	stw	r16,0(sp)
    20d8:	2821883a 	mov	r16,r5
    20dc:	2940038f 	ldh	r5,14(r5)
    20e0:	dfc00115 	stw	ra,4(sp)
    20e4:	0002fa00 	call	2fa0 <_read_r>
    20e8:	10000716 	blt	r2,zero,2108 <__sread+0x38>
    20ec:	80c01417 	ldw	r3,80(r16)
    20f0:	1887883a 	add	r3,r3,r2
    20f4:	80c01415 	stw	r3,80(r16)
    20f8:	dfc00117 	ldw	ra,4(sp)
    20fc:	dc000017 	ldw	r16,0(sp)
    2100:	dec00204 	addi	sp,sp,8
    2104:	f800283a 	ret
    2108:	80c0030b 	ldhu	r3,12(r16)
    210c:	18fbffcc 	andi	r3,r3,61439
    2110:	80c0030d 	sth	r3,12(r16)
    2114:	dfc00117 	ldw	ra,4(sp)
    2118:	dc000017 	ldw	r16,0(sp)
    211c:	dec00204 	addi	sp,sp,8
    2120:	f800283a 	ret

00002124 <__seofread>:
    2124:	0005883a 	mov	r2,zero
    2128:	f800283a 	ret

0000212c <__swrite>:
    212c:	2880030b 	ldhu	r2,12(r5)
    2130:	defffb04 	addi	sp,sp,-20
    2134:	dcc00315 	stw	r19,12(sp)
    2138:	dc800215 	stw	r18,8(sp)
    213c:	dc400115 	stw	r17,4(sp)
    2140:	dc000015 	stw	r16,0(sp)
    2144:	dfc00415 	stw	ra,16(sp)
    2148:	10c0400c 	andi	r3,r2,256
    214c:	2821883a 	mov	r16,r5
    2150:	2023883a 	mov	r17,r4
    2154:	2940038f 	ldh	r5,14(r5)
    2158:	3025883a 	mov	r18,r6
    215c:	3827883a 	mov	r19,r7
    2160:	18000c1e 	bne	r3,zero,2194 <__swrite+0x68>
    2164:	10bbffcc 	andi	r2,r2,61439
    2168:	980f883a 	mov	r7,r19
    216c:	900d883a 	mov	r6,r18
    2170:	8809883a 	mov	r4,r17
    2174:	8080030d 	sth	r2,12(r16)
    2178:	dfc00417 	ldw	ra,16(sp)
    217c:	dcc00317 	ldw	r19,12(sp)
    2180:	dc800217 	ldw	r18,8(sp)
    2184:	dc400117 	ldw	r17,4(sp)
    2188:	dc000017 	ldw	r16,0(sp)
    218c:	dec00504 	addi	sp,sp,20
    2190:	00022101 	jmpi	2210 <_write_r>
    2194:	01c00084 	movi	r7,2
    2198:	000d883a 	mov	r6,zero
    219c:	0002cf40 	call	2cf4 <_lseek_r>
    21a0:	8080030b 	ldhu	r2,12(r16)
    21a4:	8140038f 	ldh	r5,14(r16)
    21a8:	003fee06 	br	2164 <__swrite+0x38>

000021ac <__sseek>:
    21ac:	defffe04 	addi	sp,sp,-8
    21b0:	dc000015 	stw	r16,0(sp)
    21b4:	2821883a 	mov	r16,r5
    21b8:	2940038f 	ldh	r5,14(r5)
    21bc:	dfc00115 	stw	ra,4(sp)
    21c0:	0002cf40 	call	2cf4 <_lseek_r>
    21c4:	10ffffd8 	cmpnei	r3,r2,-1
    21c8:	18000826 	beq	r3,zero,21ec <__sseek+0x40>
    21cc:	80c0030b 	ldhu	r3,12(r16)
    21d0:	80801415 	stw	r2,80(r16)
    21d4:	18c40014 	ori	r3,r3,4096
    21d8:	80c0030d 	sth	r3,12(r16)
    21dc:	dfc00117 	ldw	ra,4(sp)
    21e0:	dc000017 	ldw	r16,0(sp)
    21e4:	dec00204 	addi	sp,sp,8
    21e8:	f800283a 	ret
    21ec:	80c0030b 	ldhu	r3,12(r16)
    21f0:	18fbffcc 	andi	r3,r3,61439
    21f4:	80c0030d 	sth	r3,12(r16)
    21f8:	dfc00117 	ldw	ra,4(sp)
    21fc:	dc000017 	ldw	r16,0(sp)
    2200:	dec00204 	addi	sp,sp,8
    2204:	f800283a 	ret

00002208 <__sclose>:
    2208:	2940038f 	ldh	r5,14(r5)
    220c:	00023d81 	jmpi	23d8 <_close_r>

00002210 <_write_r>:
    2210:	2807883a 	mov	r3,r5
    2214:	defffe04 	addi	sp,sp,-8
    2218:	dc000015 	stw	r16,0(sp)
    221c:	300b883a 	mov	r5,r6
    2220:	00800034 	movhi	r2,0
    2224:	380d883a 	mov	r6,r7
    2228:	2021883a 	mov	r16,r4
    222c:	1809883a 	mov	r4,r3
    2230:	dfc00115 	stw	ra,4(sp)
    2234:	101c7d15 	stw	zero,29172(r2)
    2238:	0003c640 	call	3c64 <write>
    223c:	10ffffd8 	cmpnei	r3,r2,-1
    2240:	18000426 	beq	r3,zero,2254 <_write_r+0x44>
    2244:	dfc00117 	ldw	ra,4(sp)
    2248:	dc000017 	ldw	r16,0(sp)
    224c:	dec00204 	addi	sp,sp,8
    2250:	f800283a 	ret
    2254:	00c00034 	movhi	r3,0
    2258:	18dc7d17 	ldw	r3,29172(r3)
    225c:	183ff926 	beq	r3,zero,2244 <_write_r+0x34>
    2260:	80c00015 	stw	r3,0(r16)
    2264:	dfc00117 	ldw	ra,4(sp)
    2268:	dc000017 	ldw	r16,0(sp)
    226c:	dec00204 	addi	sp,sp,8
    2270:	f800283a 	ret

00002274 <__swsetup_r>:
    2274:	00800034 	movhi	r2,0
    2278:	109c6c17 	ldw	r2,29104(r2)
    227c:	defffd04 	addi	sp,sp,-12
    2280:	dc400115 	stw	r17,4(sp)
    2284:	dc000015 	stw	r16,0(sp)
    2288:	dfc00215 	stw	ra,8(sp)
    228c:	2023883a 	mov	r17,r4
    2290:	2821883a 	mov	r16,r5
    2294:	10000226 	beq	r2,zero,22a0 <__swsetup_r+0x2c>
    2298:	10c00e17 	ldw	r3,56(r2)
    229c:	18001f26 	beq	r3,zero,231c <__swsetup_r+0xa8>
    22a0:	8180030b 	ldhu	r6,12(r16)
    22a4:	30c0020c 	andi	r3,r6,8
    22a8:	3005883a 	mov	r2,r6
    22ac:	18002126 	beq	r3,zero,2334 <__swsetup_r+0xc0>
    22b0:	80c00417 	ldw	r3,16(r16)
    22b4:	18002826 	beq	r3,zero,2358 <__swsetup_r+0xe4>
    22b8:	1100004c 	andi	r4,r2,1
    22bc:	20000b1e 	bne	r4,zero,22ec <__swsetup_r+0x78>
    22c0:	1100008c 	andi	r4,r2,2
    22c4:	20002e1e 	bne	r4,zero,2380 <__swsetup_r+0x10c>
    22c8:	81000517 	ldw	r4,20(r16)
    22cc:	81000215 	stw	r4,8(r16)
    22d0:	18000b26 	beq	r3,zero,2300 <__swsetup_r+0x8c>
    22d4:	0005883a 	mov	r2,zero
    22d8:	dfc00217 	ldw	ra,8(sp)
    22dc:	dc400117 	ldw	r17,4(sp)
    22e0:	dc000017 	ldw	r16,0(sp)
    22e4:	dec00304 	addi	sp,sp,12
    22e8:	f800283a 	ret
    22ec:	81000517 	ldw	r4,20(r16)
    22f0:	80000215 	stw	zero,8(r16)
    22f4:	0109c83a 	sub	r4,zero,r4
    22f8:	81000615 	stw	r4,24(r16)
    22fc:	183ff51e 	bne	r3,zero,22d4 <__swsetup_r+0x60>
    2300:	10c0200c 	andi	r3,r2,128
    2304:	0005883a 	mov	r2,zero
    2308:	183ff326 	beq	r3,zero,22d8 <__swsetup_r+0x64>
    230c:	31801014 	ori	r6,r6,64
    2310:	8180030d 	sth	r6,12(r16)
    2314:	00bfffc4 	movi	r2,-1
    2318:	003fef06 	br	22d8 <__swsetup_r+0x64>
    231c:	1009883a 	mov	r4,r2
    2320:	00009080 	call	908 <__sinit>
    2324:	8180030b 	ldhu	r6,12(r16)
    2328:	30c0020c 	andi	r3,r6,8
    232c:	3005883a 	mov	r2,r6
    2330:	183fdf1e 	bne	r3,zero,22b0 <__swsetup_r+0x3c>
    2334:	3080040c 	andi	r2,r6,16
    2338:	10002126 	beq	r2,zero,23c0 <__swsetup_r+0x14c>
    233c:	3080010c 	andi	r2,r6,4
    2340:	1000111e 	bne	r2,zero,2388 <__swsetup_r+0x114>
    2344:	80c00417 	ldw	r3,16(r16)
    2348:	30800214 	ori	r2,r6,8
    234c:	8080030d 	sth	r2,12(r16)
    2350:	100d883a 	mov	r6,r2
    2354:	183fd81e 	bne	r3,zero,22b8 <__swsetup_r+0x44>
    2358:	1100a00c 	andi	r4,r2,640
    235c:	21008020 	cmpeqi	r4,r4,512
    2360:	203fd51e 	bne	r4,zero,22b8 <__swsetup_r+0x44>
    2364:	800b883a 	mov	r5,r16
    2368:	8809883a 	mov	r4,r17
    236c:	0002d580 	call	2d58 <__smakebuf_r>
    2370:	8180030b 	ldhu	r6,12(r16)
    2374:	80c00417 	ldw	r3,16(r16)
    2378:	3005883a 	mov	r2,r6
    237c:	003fce06 	br	22b8 <__swsetup_r+0x44>
    2380:	0009883a 	mov	r4,zero
    2384:	003fd106 	br	22cc <__swsetup_r+0x58>
    2388:	81400c17 	ldw	r5,48(r16)
    238c:	28000626 	beq	r5,zero,23a8 <__swsetup_r+0x134>
    2390:	80801004 	addi	r2,r16,64
    2394:	28800326 	beq	r5,r2,23a4 <__swsetup_r+0x130>
    2398:	8809883a 	mov	r4,r17
    239c:	00029f80 	call	29f8 <_free_r>
    23a0:	8180030b 	ldhu	r6,12(r16)
    23a4:	80000c15 	stw	zero,48(r16)
    23a8:	80c00417 	ldw	r3,16(r16)
    23ac:	00bff6c4 	movi	r2,-37
    23b0:	118c703a 	and	r6,r2,r6
    23b4:	80000115 	stw	zero,4(r16)
    23b8:	80c00015 	stw	r3,0(r16)
    23bc:	003fe206 	br	2348 <__swsetup_r+0xd4>
    23c0:	00800244 	movi	r2,9
    23c4:	88800015 	stw	r2,0(r17)
    23c8:	31801014 	ori	r6,r6,64
    23cc:	8180030d 	sth	r6,12(r16)
    23d0:	00bfffc4 	movi	r2,-1
    23d4:	003fc006 	br	22d8 <__swsetup_r+0x64>

000023d8 <_close_r>:
    23d8:	defffe04 	addi	sp,sp,-8
    23dc:	dc000015 	stw	r16,0(sp)
    23e0:	00800034 	movhi	r2,0
    23e4:	2021883a 	mov	r16,r4
    23e8:	2809883a 	mov	r4,r5
    23ec:	dfc00115 	stw	ra,4(sp)
    23f0:	101c7d15 	stw	zero,29172(r2)
    23f4:	00032ac0 	call	32ac <close>
    23f8:	10ffffd8 	cmpnei	r3,r2,-1
    23fc:	18000426 	beq	r3,zero,2410 <_close_r+0x38>
    2400:	dfc00117 	ldw	ra,4(sp)
    2404:	dc000017 	ldw	r16,0(sp)
    2408:	dec00204 	addi	sp,sp,8
    240c:	f800283a 	ret
    2410:	00c00034 	movhi	r3,0
    2414:	18dc7d17 	ldw	r3,29172(r3)
    2418:	183ff926 	beq	r3,zero,2400 <_close_r+0x28>
    241c:	80c00015 	stw	r3,0(r16)
    2420:	dfc00117 	ldw	ra,4(sp)
    2424:	dc000017 	ldw	r16,0(sp)
    2428:	dec00204 	addi	sp,sp,8
    242c:	f800283a 	ret

00002430 <_fclose_r.part.0>:
    2430:	defffc04 	addi	sp,sp,-16
    2434:	dc800215 	stw	r18,8(sp)
    2438:	dc400115 	stw	r17,4(sp)
    243c:	dc000015 	stw	r16,0(sp)
    2440:	dfc00315 	stw	ra,12(sp)
    2444:	2821883a 	mov	r16,r5
    2448:	2023883a 	mov	r17,r4
    244c:	00025d00 	call	25d0 <__sflush_r>
    2450:	80c00b17 	ldw	r3,44(r16)
    2454:	1025883a 	mov	r18,r2
    2458:	18000426 	beq	r3,zero,246c <_fclose_r.part.0+0x3c>
    245c:	81400717 	ldw	r5,28(r16)
    2460:	8809883a 	mov	r4,r17
    2464:	183ee83a 	callr	r3
    2468:	10001916 	blt	r2,zero,24d0 <_fclose_r.part.0+0xa0>
    246c:	8080030b 	ldhu	r2,12(r16)
    2470:	1080200c 	andi	r2,r2,128
    2474:	10001a1e 	bne	r2,zero,24e0 <_fclose_r.part.0+0xb0>
    2478:	81400c17 	ldw	r5,48(r16)
    247c:	28000526 	beq	r5,zero,2494 <_fclose_r.part.0+0x64>
    2480:	80801004 	addi	r2,r16,64
    2484:	28800226 	beq	r5,r2,2490 <_fclose_r.part.0+0x60>
    2488:	8809883a 	mov	r4,r17
    248c:	00029f80 	call	29f8 <_free_r>
    2490:	80000c15 	stw	zero,48(r16)
    2494:	81401117 	ldw	r5,68(r16)
    2498:	28000326 	beq	r5,zero,24a8 <_fclose_r.part.0+0x78>
    249c:	8809883a 	mov	r4,r17
    24a0:	00029f80 	call	29f8 <_free_r>
    24a4:	80001115 	stw	zero,68(r16)
    24a8:	00009180 	call	918 <__sfp_lock_acquire>
    24ac:	8000030d 	sth	zero,12(r16)
    24b0:	000091c0 	call	91c <__sfp_lock_release>
    24b4:	9005883a 	mov	r2,r18
    24b8:	dfc00317 	ldw	ra,12(sp)
    24bc:	dc800217 	ldw	r18,8(sp)
    24c0:	dc400117 	ldw	r17,4(sp)
    24c4:	dc000017 	ldw	r16,0(sp)
    24c8:	dec00404 	addi	sp,sp,16
    24cc:	f800283a 	ret
    24d0:	8080030b 	ldhu	r2,12(r16)
    24d4:	04bfffc4 	movi	r18,-1
    24d8:	1080200c 	andi	r2,r2,128
    24dc:	103fe626 	beq	r2,zero,2478 <_fclose_r.part.0+0x48>
    24e0:	81400417 	ldw	r5,16(r16)
    24e4:	8809883a 	mov	r4,r17
    24e8:	00029f80 	call	29f8 <_free_r>
    24ec:	003fe206 	br	2478 <_fclose_r.part.0+0x48>

000024f0 <_fclose_r>:
    24f0:	28001926 	beq	r5,zero,2558 <_fclose_r+0x68>
    24f4:	defffd04 	addi	sp,sp,-12
    24f8:	dc000115 	stw	r16,4(sp)
    24fc:	dfc00215 	stw	ra,8(sp)
    2500:	2021883a 	mov	r16,r4
    2504:	20000226 	beq	r4,zero,2510 <_fclose_r+0x20>
    2508:	20800e17 	ldw	r2,56(r4)
    250c:	10000c26 	beq	r2,zero,2540 <_fclose_r+0x50>
    2510:	2880030f 	ldh	r2,12(r5)
    2514:	1000051e 	bne	r2,zero,252c <_fclose_r+0x3c>
    2518:	0005883a 	mov	r2,zero
    251c:	dfc00217 	ldw	ra,8(sp)
    2520:	dc000117 	ldw	r16,4(sp)
    2524:	dec00304 	addi	sp,sp,12
    2528:	f800283a 	ret
    252c:	8009883a 	mov	r4,r16
    2530:	dfc00217 	ldw	ra,8(sp)
    2534:	dc000117 	ldw	r16,4(sp)
    2538:	dec00304 	addi	sp,sp,12
    253c:	00024301 	jmpi	2430 <_fclose_r.part.0>
    2540:	d9400015 	stw	r5,0(sp)
    2544:	00009080 	call	908 <__sinit>
    2548:	d9400017 	ldw	r5,0(sp)
    254c:	2880030f 	ldh	r2,12(r5)
    2550:	103ff126 	beq	r2,zero,2518 <_fclose_r+0x28>
    2554:	003ff506 	br	252c <_fclose_r+0x3c>
    2558:	0005883a 	mov	r2,zero
    255c:	f800283a 	ret

00002560 <fclose>:
    2560:	20000826 	beq	r4,zero,2584 <fclose+0x24>
    2564:	00800034 	movhi	r2,0
    2568:	200b883a 	mov	r5,r4
    256c:	111c6c17 	ldw	r4,29104(r2)
    2570:	20000226 	beq	r4,zero,257c <fclose+0x1c>
    2574:	20800e17 	ldw	r2,56(r4)
    2578:	10000526 	beq	r2,zero,2590 <fclose+0x30>
    257c:	2880030f 	ldh	r2,12(r5)
    2580:	1000021e 	bne	r2,zero,258c <fclose+0x2c>
    2584:	0005883a 	mov	r2,zero
    2588:	f800283a 	ret
    258c:	00024301 	jmpi	2430 <_fclose_r.part.0>
    2590:	defffd04 	addi	sp,sp,-12
    2594:	d9400115 	stw	r5,4(sp)
    2598:	d9000015 	stw	r4,0(sp)
    259c:	dfc00215 	stw	ra,8(sp)
    25a0:	00009080 	call	908 <__sinit>
    25a4:	d9400117 	ldw	r5,4(sp)
    25a8:	d9000017 	ldw	r4,0(sp)
    25ac:	2880030f 	ldh	r2,12(r5)
    25b0:	10000326 	beq	r2,zero,25c0 <fclose+0x60>
    25b4:	dfc00217 	ldw	ra,8(sp)
    25b8:	dec00304 	addi	sp,sp,12
    25bc:	00024301 	jmpi	2430 <_fclose_r.part.0>
    25c0:	0005883a 	mov	r2,zero
    25c4:	dfc00217 	ldw	ra,8(sp)
    25c8:	dec00304 	addi	sp,sp,12
    25cc:	f800283a 	ret

000025d0 <__sflush_r>:
    25d0:	2880030b 	ldhu	r2,12(r5)
    25d4:	defffb04 	addi	sp,sp,-20
    25d8:	dcc00315 	stw	r19,12(sp)
    25dc:	dc000015 	stw	r16,0(sp)
    25e0:	dfc00415 	stw	ra,16(sp)
    25e4:	dc800215 	stw	r18,8(sp)
    25e8:	dc400115 	stw	r17,4(sp)
    25ec:	10c0020c 	andi	r3,r2,8
    25f0:	2821883a 	mov	r16,r5
    25f4:	2027883a 	mov	r19,r4
    25f8:	18003f1e 	bne	r3,zero,26f8 <__sflush_r+0x128>
    25fc:	28c00117 	ldw	r3,4(r5)
    2600:	10820014 	ori	r2,r2,2048
    2604:	2880030d 	sth	r2,12(r5)
    2608:	00c0550e 	bge	zero,r3,2760 <__sflush_r+0x190>
    260c:	82000a17 	ldw	r8,40(r16)
    2610:	40003126 	beq	r8,zero,26d8 <__sflush_r+0x108>
    2614:	9c400017 	ldw	r17,0(r19)
    2618:	1104000c 	andi	r4,r2,4096
    261c:	98000015 	stw	zero,0(r19)
    2620:	81400717 	ldw	r5,28(r16)
    2624:	1007883a 	mov	r3,r2
    2628:	2000521e 	bne	r4,zero,2774 <__sflush_r+0x1a4>
    262c:	01c00044 	movi	r7,1
    2630:	000d883a 	mov	r6,zero
    2634:	9809883a 	mov	r4,r19
    2638:	403ee83a 	callr	r8
    263c:	10ffffd8 	cmpnei	r3,r2,-1
    2640:	18005826 	beq	r3,zero,27a4 <__sflush_r+0x1d4>
    2644:	80c0030b 	ldhu	r3,12(r16)
    2648:	82000a17 	ldw	r8,40(r16)
    264c:	81400717 	ldw	r5,28(r16)
    2650:	18c0010c 	andi	r3,r3,4
    2654:	18000626 	beq	r3,zero,2670 <__sflush_r+0xa0>
    2658:	81000117 	ldw	r4,4(r16)
    265c:	80c00c17 	ldw	r3,48(r16)
    2660:	1105c83a 	sub	r2,r2,r4
    2664:	18000226 	beq	r3,zero,2670 <__sflush_r+0xa0>
    2668:	80c00f17 	ldw	r3,60(r16)
    266c:	10c5c83a 	sub	r2,r2,r3
    2670:	100d883a 	mov	r6,r2
    2674:	000f883a 	mov	r7,zero
    2678:	9809883a 	mov	r4,r19
    267c:	403ee83a 	callr	r8
    2680:	10ffffd8 	cmpnei	r3,r2,-1
    2684:	18003d1e 	bne	r3,zero,277c <__sflush_r+0x1ac>
    2688:	99000017 	ldw	r4,0(r19)
    268c:	80c0030b 	ldhu	r3,12(r16)
    2690:	20004e26 	beq	r4,zero,27cc <__sflush_r+0x1fc>
    2694:	21400760 	cmpeqi	r5,r4,29
    2698:	2800021e 	bne	r5,zero,26a4 <__sflush_r+0xd4>
    269c:	210005a0 	cmpeqi	r4,r4,22
    26a0:	20002c26 	beq	r4,zero,2754 <__sflush_r+0x184>
    26a4:	80800417 	ldw	r2,16(r16)
    26a8:	18fdffcc 	andi	r3,r3,63487
    26ac:	80c0030d 	sth	r3,12(r16)
    26b0:	80000115 	stw	zero,4(r16)
    26b4:	80800015 	stw	r2,0(r16)
    26b8:	81400c17 	ldw	r5,48(r16)
    26bc:	9c400015 	stw	r17,0(r19)
    26c0:	28000526 	beq	r5,zero,26d8 <__sflush_r+0x108>
    26c4:	80801004 	addi	r2,r16,64
    26c8:	28800226 	beq	r5,r2,26d4 <__sflush_r+0x104>
    26cc:	9809883a 	mov	r4,r19
    26d0:	00029f80 	call	29f8 <_free_r>
    26d4:	80000c15 	stw	zero,48(r16)
    26d8:	0005883a 	mov	r2,zero
    26dc:	dfc00417 	ldw	ra,16(sp)
    26e0:	dcc00317 	ldw	r19,12(sp)
    26e4:	dc800217 	ldw	r18,8(sp)
    26e8:	dc400117 	ldw	r17,4(sp)
    26ec:	dc000017 	ldw	r16,0(sp)
    26f0:	dec00504 	addi	sp,sp,20
    26f4:	f800283a 	ret
    26f8:	2c800417 	ldw	r18,16(r5)
    26fc:	903ff626 	beq	r18,zero,26d8 <__sflush_r+0x108>
    2700:	2c400017 	ldw	r17,0(r5)
    2704:	108000cc 	andi	r2,r2,3
    2708:	2c800015 	stw	r18,0(r5)
    270c:	8ca3c83a 	sub	r17,r17,r18
    2710:	1000161e 	bne	r2,zero,276c <__sflush_r+0x19c>
    2714:	28800517 	ldw	r2,20(r5)
    2718:	80800215 	stw	r2,8(r16)
    271c:	04400316 	blt	zero,r17,272c <__sflush_r+0x15c>
    2720:	003fed06 	br	26d8 <__sflush_r+0x108>
    2724:	90a5883a 	add	r18,r18,r2
    2728:	047feb0e 	bge	zero,r17,26d8 <__sflush_r+0x108>
    272c:	80800917 	ldw	r2,36(r16)
    2730:	81400717 	ldw	r5,28(r16)
    2734:	880f883a 	mov	r7,r17
    2738:	900d883a 	mov	r6,r18
    273c:	9809883a 	mov	r4,r19
    2740:	103ee83a 	callr	r2
    2744:	88a3c83a 	sub	r17,r17,r2
    2748:	00bff616 	blt	zero,r2,2724 <__sflush_r+0x154>
    274c:	80c0030b 	ldhu	r3,12(r16)
    2750:	00bfffc4 	movi	r2,-1
    2754:	18c01014 	ori	r3,r3,64
    2758:	80c0030d 	sth	r3,12(r16)
    275c:	003fdf06 	br	26dc <__sflush_r+0x10c>
    2760:	28c00f17 	ldw	r3,60(r5)
    2764:	00ffa916 	blt	zero,r3,260c <__sflush_r+0x3c>
    2768:	003fdb06 	br	26d8 <__sflush_r+0x108>
    276c:	0005883a 	mov	r2,zero
    2770:	003fe906 	br	2718 <__sflush_r+0x148>
    2774:	80801417 	ldw	r2,80(r16)
    2778:	003fb506 	br	2650 <__sflush_r+0x80>
    277c:	80c0030b 	ldhu	r3,12(r16)
    2780:	81000417 	ldw	r4,16(r16)
    2784:	80000115 	stw	zero,4(r16)
    2788:	197dffcc 	andi	r5,r3,63487
    278c:	8140030d 	sth	r5,12(r16)
    2790:	81000015 	stw	r4,0(r16)
    2794:	18c4000c 	andi	r3,r3,4096
    2798:	183fc726 	beq	r3,zero,26b8 <__sflush_r+0xe8>
    279c:	80801415 	stw	r2,80(r16)
    27a0:	003fc506 	br	26b8 <__sflush_r+0xe8>
    27a4:	98c00017 	ldw	r3,0(r19)
    27a8:	183fa626 	beq	r3,zero,2644 <__sflush_r+0x74>
    27ac:	19000760 	cmpeqi	r4,r3,29
    27b0:	20000e1e 	bne	r4,zero,27ec <__sflush_r+0x21c>
    27b4:	18c00598 	cmpnei	r3,r3,22
    27b8:	18000c26 	beq	r3,zero,27ec <__sflush_r+0x21c>
    27bc:	80c0030b 	ldhu	r3,12(r16)
    27c0:	18c01014 	ori	r3,r3,64
    27c4:	80c0030d 	sth	r3,12(r16)
    27c8:	003fc406 	br	26dc <__sflush_r+0x10c>
    27cc:	81000417 	ldw	r4,16(r16)
    27d0:	197dffcc 	andi	r5,r3,63487
    27d4:	8140030d 	sth	r5,12(r16)
    27d8:	80000115 	stw	zero,4(r16)
    27dc:	81000015 	stw	r4,0(r16)
    27e0:	18c4000c 	andi	r3,r3,4096
    27e4:	183fb426 	beq	r3,zero,26b8 <__sflush_r+0xe8>
    27e8:	003fec06 	br	279c <__sflush_r+0x1cc>
    27ec:	9c400015 	stw	r17,0(r19)
    27f0:	0005883a 	mov	r2,zero
    27f4:	003fb906 	br	26dc <__sflush_r+0x10c>

000027f8 <_fflush_r>:
    27f8:	defffd04 	addi	sp,sp,-12
    27fc:	dc000115 	stw	r16,4(sp)
    2800:	dfc00215 	stw	ra,8(sp)
    2804:	2021883a 	mov	r16,r4
    2808:	20000226 	beq	r4,zero,2814 <_fflush_r+0x1c>
    280c:	20800e17 	ldw	r2,56(r4)
    2810:	10000726 	beq	r2,zero,2830 <_fflush_r+0x38>
    2814:	2880030f 	ldh	r2,12(r5)
    2818:	10000a1e 	bne	r2,zero,2844 <_fflush_r+0x4c>
    281c:	0005883a 	mov	r2,zero
    2820:	dfc00217 	ldw	ra,8(sp)
    2824:	dc000117 	ldw	r16,4(sp)
    2828:	dec00304 	addi	sp,sp,12
    282c:	f800283a 	ret
    2830:	d9400015 	stw	r5,0(sp)
    2834:	00009080 	call	908 <__sinit>
    2838:	d9400017 	ldw	r5,0(sp)
    283c:	2880030f 	ldh	r2,12(r5)
    2840:	103ff626 	beq	r2,zero,281c <_fflush_r+0x24>
    2844:	8009883a 	mov	r4,r16
    2848:	dfc00217 	ldw	ra,8(sp)
    284c:	dc000117 	ldw	r16,4(sp)
    2850:	dec00304 	addi	sp,sp,12
    2854:	00025d01 	jmpi	25d0 <__sflush_r>

00002858 <fflush>:
    2858:	20001726 	beq	r4,zero,28b8 <fflush+0x60>
    285c:	00800034 	movhi	r2,0
    2860:	200b883a 	mov	r5,r4
    2864:	111c6c17 	ldw	r4,29104(r2)
    2868:	20000226 	beq	r4,zero,2874 <fflush+0x1c>
    286c:	20800e17 	ldw	r2,56(r4)
    2870:	10000526 	beq	r2,zero,2888 <fflush+0x30>
    2874:	2880030f 	ldh	r2,12(r5)
    2878:	1000021e 	bne	r2,zero,2884 <fflush+0x2c>
    287c:	0005883a 	mov	r2,zero
    2880:	f800283a 	ret
    2884:	00025d01 	jmpi	25d0 <__sflush_r>
    2888:	defffd04 	addi	sp,sp,-12
    288c:	d9400115 	stw	r5,4(sp)
    2890:	d9000015 	stw	r4,0(sp)
    2894:	dfc00215 	stw	ra,8(sp)
    2898:	00009080 	call	908 <__sinit>
    289c:	d9400117 	ldw	r5,4(sp)
    28a0:	d9000017 	ldw	r4,0(sp)
    28a4:	2880030f 	ldh	r2,12(r5)
    28a8:	10000826 	beq	r2,zero,28cc <fflush+0x74>
    28ac:	dfc00217 	ldw	ra,8(sp)
    28b0:	dec00304 	addi	sp,sp,12
    28b4:	00025d01 	jmpi	25d0 <__sflush_r>
    28b8:	00800034 	movhi	r2,0
    28bc:	111c6b17 	ldw	r4,29100(r2)
    28c0:	01400034 	movhi	r5,0
    28c4:	2949fe04 	addi	r5,r5,10232
    28c8:	0000ea01 	jmpi	ea0 <_fwalk_reent>
    28cc:	0005883a 	mov	r2,zero
    28d0:	dfc00217 	ldw	ra,8(sp)
    28d4:	dec00304 	addi	sp,sp,12
    28d8:	f800283a 	ret

000028dc <_malloc_trim_r>:
    28dc:	defffb04 	addi	sp,sp,-20
    28e0:	dcc00315 	stw	r19,12(sp)
    28e4:	04c00034 	movhi	r19,0
    28e8:	dc800215 	stw	r18,8(sp)
    28ec:	dc400115 	stw	r17,4(sp)
    28f0:	dc000015 	stw	r16,0(sp)
    28f4:	dfc00415 	stw	ra,16(sp)
    28f8:	2821883a 	mov	r16,r5
    28fc:	9cd6e704 	addi	r19,r19,23452
    2900:	2025883a 	mov	r18,r4
    2904:	00039980 	call	3998 <__malloc_lock>
    2908:	98800217 	ldw	r2,8(r19)
    290c:	14400117 	ldw	r17,4(r2)
    2910:	00bfff04 	movi	r2,-4
    2914:	88a2703a 	and	r17,r17,r2
    2918:	8c21c83a 	sub	r16,r17,r16
    291c:	8403fbc4 	addi	r16,r16,4079
    2920:	8020d33a 	srli	r16,r16,12
    2924:	843fffc4 	addi	r16,r16,-1
    2928:	8020933a 	slli	r16,r16,12
    292c:	80840008 	cmpgei	r2,r16,4096
    2930:	10000626 	beq	r2,zero,294c <_malloc_trim_r+0x70>
    2934:	000b883a 	mov	r5,zero
    2938:	9009883a 	mov	r4,r18
    293c:	00020780 	call	2078 <_sbrk_r>
    2940:	98c00217 	ldw	r3,8(r19)
    2944:	1c47883a 	add	r3,r3,r17
    2948:	10c00a26 	beq	r2,r3,2974 <_malloc_trim_r+0x98>
    294c:	9009883a 	mov	r4,r18
    2950:	00039bc0 	call	39bc <__malloc_unlock>
    2954:	0005883a 	mov	r2,zero
    2958:	dfc00417 	ldw	ra,16(sp)
    295c:	dcc00317 	ldw	r19,12(sp)
    2960:	dc800217 	ldw	r18,8(sp)
    2964:	dc400117 	ldw	r17,4(sp)
    2968:	dc000017 	ldw	r16,0(sp)
    296c:	dec00504 	addi	sp,sp,20
    2970:	f800283a 	ret
    2974:	040bc83a 	sub	r5,zero,r16
    2978:	9009883a 	mov	r4,r18
    297c:	00020780 	call	2078 <_sbrk_r>
    2980:	10bfffd8 	cmpnei	r2,r2,-1
    2984:	10000d26 	beq	r2,zero,29bc <_malloc_trim_r+0xe0>
    2988:	00800034 	movhi	r2,0
    298c:	109c8517 	ldw	r2,29204(r2)
    2990:	98c00217 	ldw	r3,8(r19)
    2994:	8c23c83a 	sub	r17,r17,r16
    2998:	8c400054 	ori	r17,r17,1
    299c:	1421c83a 	sub	r16,r2,r16
    29a0:	1c400115 	stw	r17,4(r3)
    29a4:	00800034 	movhi	r2,0
    29a8:	9009883a 	mov	r4,r18
    29ac:	141c8515 	stw	r16,29204(r2)
    29b0:	00039bc0 	call	39bc <__malloc_unlock>
    29b4:	00800044 	movi	r2,1
    29b8:	003fe706 	br	2958 <_malloc_trim_r+0x7c>
    29bc:	000b883a 	mov	r5,zero
    29c0:	9009883a 	mov	r4,r18
    29c4:	00020780 	call	2078 <_sbrk_r>
    29c8:	99000217 	ldw	r4,8(r19)
    29cc:	1107c83a 	sub	r3,r2,r4
    29d0:	19400410 	cmplti	r5,r3,16
    29d4:	283fdd1e 	bne	r5,zero,294c <_malloc_trim_r+0x70>
    29d8:	01400034 	movhi	r5,0
    29dc:	295c6d17 	ldw	r5,29108(r5)
    29e0:	18c00054 	ori	r3,r3,1
    29e4:	20c00115 	stw	r3,4(r4)
    29e8:	1145c83a 	sub	r2,r2,r5
    29ec:	01400034 	movhi	r5,0
    29f0:	289c8515 	stw	r2,29204(r5)
    29f4:	003fd506 	br	294c <_malloc_trim_r+0x70>

000029f8 <_free_r>:
    29f8:	28004f26 	beq	r5,zero,2b38 <_free_r+0x140>
    29fc:	defffd04 	addi	sp,sp,-12
    2a00:	dc400115 	stw	r17,4(sp)
    2a04:	dc000015 	stw	r16,0(sp)
    2a08:	2023883a 	mov	r17,r4
    2a0c:	2821883a 	mov	r16,r5
    2a10:	dfc00215 	stw	ra,8(sp)
    2a14:	00039980 	call	3998 <__malloc_lock>
    2a18:	81ffff17 	ldw	r7,-4(r16)
    2a1c:	00bfff84 	movi	r2,-2
    2a20:	80fffe04 	addi	r3,r16,-8
    2a24:	3884703a 	and	r2,r7,r2
    2a28:	01000034 	movhi	r4,0
    2a2c:	188d883a 	add	r6,r3,r2
    2a30:	2116e704 	addi	r4,r4,23452
    2a34:	31400117 	ldw	r5,4(r6)
    2a38:	22000217 	ldw	r8,8(r4)
    2a3c:	027fff04 	movi	r9,-4
    2a40:	2a4a703a 	and	r5,r5,r9
    2a44:	41806426 	beq	r8,r6,2bd8 <_free_r+0x1e0>
    2a48:	31400115 	stw	r5,4(r6)
    2a4c:	39c0004c 	andi	r7,r7,1
    2a50:	3151883a 	add	r8,r6,r5
    2a54:	3800281e 	bne	r7,zero,2af8 <_free_r+0x100>
    2a58:	82bffe17 	ldw	r10,-8(r16)
    2a5c:	42000117 	ldw	r8,4(r8)
    2a60:	01c00034 	movhi	r7,0
    2a64:	1a87c83a 	sub	r3,r3,r10
    2a68:	1a400217 	ldw	r9,8(r3)
    2a6c:	39d6e904 	addi	r7,r7,23460
    2a70:	1285883a 	add	r2,r2,r10
    2a74:	4200004c 	andi	r8,r8,1
    2a78:	49c04c26 	beq	r9,r7,2bac <_free_r+0x1b4>
    2a7c:	1a800317 	ldw	r10,12(r3)
    2a80:	4a800315 	stw	r10,12(r9)
    2a84:	52400215 	stw	r9,8(r10)
    2a88:	40007126 	beq	r8,zero,2c50 <_free_r+0x258>
    2a8c:	11400054 	ori	r5,r2,1
    2a90:	19400115 	stw	r5,4(r3)
    2a94:	30800015 	stw	r2,0(r6)
    2a98:	11408028 	cmpgeui	r5,r2,512
    2a9c:	28002c1e 	bne	r5,zero,2b50 <_free_r+0x158>
    2aa0:	100ad0fa 	srli	r5,r2,3
    2aa4:	100cd17a 	srli	r6,r2,5
    2aa8:	00800044 	movi	r2,1
    2aac:	29400044 	addi	r5,r5,1
    2ab0:	280a90fa 	slli	r5,r5,3
    2ab4:	21c00117 	ldw	r7,4(r4)
    2ab8:	1184983a 	sll	r2,r2,r6
    2abc:	214b883a 	add	r5,r4,r5
    2ac0:	29800017 	ldw	r6,0(r5)
    2ac4:	11c4b03a 	or	r2,r2,r7
    2ac8:	29fffe04 	addi	r7,r5,-8
    2acc:	19c00315 	stw	r7,12(r3)
    2ad0:	19800215 	stw	r6,8(r3)
    2ad4:	20800115 	stw	r2,4(r4)
    2ad8:	28c00015 	stw	r3,0(r5)
    2adc:	30c00315 	stw	r3,12(r6)
    2ae0:	8809883a 	mov	r4,r17
    2ae4:	dfc00217 	ldw	ra,8(sp)
    2ae8:	dc400117 	ldw	r17,4(sp)
    2aec:	dc000017 	ldw	r16,0(sp)
    2af0:	dec00304 	addi	sp,sp,12
    2af4:	00039bc1 	jmpi	39bc <__malloc_unlock>
    2af8:	41c00117 	ldw	r7,4(r8)
    2afc:	39c0004c 	andi	r7,r7,1
    2b00:	38000e1e 	bne	r7,zero,2b3c <_free_r+0x144>
    2b04:	01c00034 	movhi	r7,0
    2b08:	1145883a 	add	r2,r2,r5
    2b0c:	39d6e904 	addi	r7,r7,23460
    2b10:	31400217 	ldw	r5,8(r6)
    2b14:	12400054 	ori	r9,r2,1
    2b18:	1891883a 	add	r8,r3,r2
    2b1c:	29c05226 	beq	r5,r7,2c68 <_free_r+0x270>
    2b20:	31800317 	ldw	r6,12(r6)
    2b24:	29800315 	stw	r6,12(r5)
    2b28:	31400215 	stw	r5,8(r6)
    2b2c:	1a400115 	stw	r9,4(r3)
    2b30:	40800015 	stw	r2,0(r8)
    2b34:	003fd806 	br	2a98 <_free_r+0xa0>
    2b38:	f800283a 	ret
    2b3c:	11400054 	ori	r5,r2,1
    2b40:	817fff15 	stw	r5,-4(r16)
    2b44:	30800015 	stw	r2,0(r6)
    2b48:	11408028 	cmpgeui	r5,r2,512
    2b4c:	283fd426 	beq	r5,zero,2aa0 <_free_r+0xa8>
    2b50:	100ad27a 	srli	r5,r2,9
    2b54:	29800168 	cmpgeui	r6,r5,5
    2b58:	3000341e 	bne	r6,zero,2c2c <_free_r+0x234>
    2b5c:	100ad1ba 	srli	r5,r2,6
    2b60:	29800e44 	addi	r6,r5,57
    2b64:	300c90fa 	slli	r6,r6,3
    2b68:	29c00e04 	addi	r7,r5,56
    2b6c:	218d883a 	add	r6,r4,r6
    2b70:	31400017 	ldw	r5,0(r6)
    2b74:	31bffe04 	addi	r6,r6,-8
    2b78:	31404226 	beq	r6,r5,2c84 <_free_r+0x28c>
    2b7c:	01ffff04 	movi	r7,-4
    2b80:	29000117 	ldw	r4,4(r5)
    2b84:	21c8703a 	and	r4,r4,r7
    2b88:	1100022e 	bgeu	r2,r4,2b94 <_free_r+0x19c>
    2b8c:	29400217 	ldw	r5,8(r5)
    2b90:	317ffb1e 	bne	r6,r5,2b80 <_free_r+0x188>
    2b94:	29800317 	ldw	r6,12(r5)
    2b98:	19800315 	stw	r6,12(r3)
    2b9c:	19400215 	stw	r5,8(r3)
    2ba0:	30c00215 	stw	r3,8(r6)
    2ba4:	28c00315 	stw	r3,12(r5)
    2ba8:	003fcd06 	br	2ae0 <_free_r+0xe8>
    2bac:	40004d1e 	bne	r8,zero,2ce4 <_free_r+0x2ec>
    2bb0:	31000317 	ldw	r4,12(r6)
    2bb4:	31800217 	ldw	r6,8(r6)
    2bb8:	2885883a 	add	r2,r5,r2
    2bbc:	11400054 	ori	r5,r2,1
    2bc0:	31000315 	stw	r4,12(r6)
    2bc4:	21800215 	stw	r6,8(r4)
    2bc8:	19400115 	stw	r5,4(r3)
    2bcc:	1887883a 	add	r3,r3,r2
    2bd0:	18800015 	stw	r2,0(r3)
    2bd4:	003fc206 	br	2ae0 <_free_r+0xe8>
    2bd8:	39c0004c 	andi	r7,r7,1
    2bdc:	1145883a 	add	r2,r2,r5
    2be0:	3800071e 	bne	r7,zero,2c00 <_free_r+0x208>
    2be4:	81fffe17 	ldw	r7,-8(r16)
    2be8:	19c7c83a 	sub	r3,r3,r7
    2bec:	19400317 	ldw	r5,12(r3)
    2bf0:	19800217 	ldw	r6,8(r3)
    2bf4:	11c5883a 	add	r2,r2,r7
    2bf8:	31400315 	stw	r5,12(r6)
    2bfc:	29800215 	stw	r6,8(r5)
    2c00:	01400034 	movhi	r5,0
    2c04:	11800054 	ori	r6,r2,1
    2c08:	295c6e17 	ldw	r5,29112(r5)
    2c0c:	19800115 	stw	r6,4(r3)
    2c10:	20c00215 	stw	r3,8(r4)
    2c14:	117fb236 	bltu	r2,r5,2ae0 <_free_r+0xe8>
    2c18:	00800034 	movhi	r2,0
    2c1c:	115c7c17 	ldw	r5,29168(r2)
    2c20:	8809883a 	mov	r4,r17
    2c24:	00028dc0 	call	28dc <_malloc_trim_r>
    2c28:	003fad06 	br	2ae0 <_free_r+0xe8>
    2c2c:	29800568 	cmpgeui	r6,r5,21
    2c30:	30000926 	beq	r6,zero,2c58 <_free_r+0x260>
    2c34:	29801568 	cmpgeui	r6,r5,85
    2c38:	3000191e 	bne	r6,zero,2ca0 <_free_r+0x2a8>
    2c3c:	100ad33a 	srli	r5,r2,12
    2c40:	29801bc4 	addi	r6,r5,111
    2c44:	300c90fa 	slli	r6,r6,3
    2c48:	29c01b84 	addi	r7,r5,110
    2c4c:	003fc706 	br	2b6c <_free_r+0x174>
    2c50:	1145883a 	add	r2,r2,r5
    2c54:	003fae06 	br	2b10 <_free_r+0x118>
    2c58:	29801704 	addi	r6,r5,92
    2c5c:	300c90fa 	slli	r6,r6,3
    2c60:	29c016c4 	addi	r7,r5,91
    2c64:	003fc106 	br	2b6c <_free_r+0x174>
    2c68:	20c00515 	stw	r3,20(r4)
    2c6c:	20c00415 	stw	r3,16(r4)
    2c70:	19c00315 	stw	r7,12(r3)
    2c74:	19c00215 	stw	r7,8(r3)
    2c78:	1a400115 	stw	r9,4(r3)
    2c7c:	40800015 	stw	r2,0(r8)
    2c80:	003f9706 	br	2ae0 <_free_r+0xe8>
    2c84:	380fd0ba 	srai	r7,r7,2
    2c88:	00800044 	movi	r2,1
    2c8c:	22000117 	ldw	r8,4(r4)
    2c90:	11ce983a 	sll	r7,r2,r7
    2c94:	3a0eb03a 	or	r7,r7,r8
    2c98:	21c00115 	stw	r7,4(r4)
    2c9c:	003fbe06 	br	2b98 <_free_r+0x1a0>
    2ca0:	29805568 	cmpgeui	r6,r5,341
    2ca4:	3000051e 	bne	r6,zero,2cbc <_free_r+0x2c4>
    2ca8:	100ad3fa 	srli	r5,r2,15
    2cac:	29801e04 	addi	r6,r5,120
    2cb0:	300c90fa 	slli	r6,r6,3
    2cb4:	29c01dc4 	addi	r7,r5,119
    2cb8:	003fac06 	br	2b6c <_free_r+0x174>
    2cbc:	29415568 	cmpgeui	r5,r5,1365
    2cc0:	2800051e 	bne	r5,zero,2cd8 <_free_r+0x2e0>
    2cc4:	100ad4ba 	srli	r5,r2,18
    2cc8:	29801f44 	addi	r6,r5,125
    2ccc:	300c90fa 	slli	r6,r6,3
    2cd0:	29c01f04 	addi	r7,r5,124
    2cd4:	003fa506 	br	2b6c <_free_r+0x174>
    2cd8:	0180fe04 	movi	r6,1016
    2cdc:	01c01f84 	movi	r7,126
    2ce0:	003fa206 	br	2b6c <_free_r+0x174>
    2ce4:	11000054 	ori	r4,r2,1
    2ce8:	19000115 	stw	r4,4(r3)
    2cec:	30800015 	stw	r2,0(r6)
    2cf0:	003f7b06 	br	2ae0 <_free_r+0xe8>

00002cf4 <_lseek_r>:
    2cf4:	2807883a 	mov	r3,r5
    2cf8:	defffe04 	addi	sp,sp,-8
    2cfc:	dc000015 	stw	r16,0(sp)
    2d00:	300b883a 	mov	r5,r6
    2d04:	00800034 	movhi	r2,0
    2d08:	380d883a 	mov	r6,r7
    2d0c:	2021883a 	mov	r16,r4
    2d10:	1809883a 	mov	r4,r3
    2d14:	dfc00115 	stw	ra,4(sp)
    2d18:	101c7d15 	stw	zero,29172(r2)
    2d1c:	00038480 	call	3848 <lseek>
    2d20:	10ffffd8 	cmpnei	r3,r2,-1
    2d24:	18000426 	beq	r3,zero,2d38 <_lseek_r+0x44>
    2d28:	dfc00117 	ldw	ra,4(sp)
    2d2c:	dc000017 	ldw	r16,0(sp)
    2d30:	dec00204 	addi	sp,sp,8
    2d34:	f800283a 	ret
    2d38:	00c00034 	movhi	r3,0
    2d3c:	18dc7d17 	ldw	r3,29172(r3)
    2d40:	183ff926 	beq	r3,zero,2d28 <_lseek_r+0x34>
    2d44:	80c00015 	stw	r3,0(r16)
    2d48:	dfc00117 	ldw	ra,4(sp)
    2d4c:	dc000017 	ldw	r16,0(sp)
    2d50:	dec00204 	addi	sp,sp,8
    2d54:	f800283a 	ret

00002d58 <__smakebuf_r>:
    2d58:	2880030b 	ldhu	r2,12(r5)
    2d5c:	deffe804 	addi	sp,sp,-96
    2d60:	dc001215 	stw	r16,72(sp)
    2d64:	dfc01715 	stw	ra,92(sp)
    2d68:	dd001615 	stw	r20,88(sp)
    2d6c:	dcc01515 	stw	r19,84(sp)
    2d70:	dc801415 	stw	r18,80(sp)
    2d74:	dc401315 	stw	r17,76(sp)
    2d78:	10c0008c 	andi	r3,r2,2
    2d7c:	2821883a 	mov	r16,r5
    2d80:	18000d26 	beq	r3,zero,2db8 <__smakebuf_r+0x60>
    2d84:	288010c4 	addi	r2,r5,67
    2d88:	28800015 	stw	r2,0(r5)
    2d8c:	28800415 	stw	r2,16(r5)
    2d90:	00800044 	movi	r2,1
    2d94:	28800515 	stw	r2,20(r5)
    2d98:	dfc01717 	ldw	ra,92(sp)
    2d9c:	dd001617 	ldw	r20,88(sp)
    2da0:	dcc01517 	ldw	r19,84(sp)
    2da4:	dc801417 	ldw	r18,80(sp)
    2da8:	dc401317 	ldw	r17,76(sp)
    2dac:	dc001217 	ldw	r16,72(sp)
    2db0:	dec01804 	addi	sp,sp,96
    2db4:	f800283a 	ret
    2db8:	2940038f 	ldh	r5,14(r5)
    2dbc:	2023883a 	mov	r17,r4
    2dc0:	28002816 	blt	r5,zero,2e64 <__smakebuf_r+0x10c>
    2dc4:	d80d883a 	mov	r6,sp
    2dc8:	00030040 	call	3004 <_fstat_r>
    2dcc:	10002416 	blt	r2,zero,2e60 <__smakebuf_r+0x108>
    2dd0:	d8800117 	ldw	r2,4(sp)
    2dd4:	10bc000c 	andi	r2,r2,61440
    2dd8:	10880018 	cmpnei	r2,r2,8192
    2ddc:	1000461e 	bne	r2,zero,2ef8 <__smakebuf_r+0x1a0>
    2de0:	8140038f 	ldh	r5,14(r16)
    2de4:	8809883a 	mov	r4,r17
    2de8:	00030640 	call	3064 <_isatty_r>
    2dec:	10003e26 	beq	r2,zero,2ee8 <__smakebuf_r+0x190>
    2df0:	8080030b 	ldhu	r2,12(r16)
    2df4:	80c010c4 	addi	r3,r16,67
    2df8:	80c00015 	stw	r3,0(r16)
    2dfc:	10800054 	ori	r2,r2,1
    2e00:	8080030d 	sth	r2,12(r16)
    2e04:	00800044 	movi	r2,1
    2e08:	80c00415 	stw	r3,16(r16)
    2e0c:	80800515 	stw	r2,20(r16)
    2e10:	04c00044 	movi	r19,1
    2e14:	05010004 	movi	r20,1024
    2e18:	04820004 	movi	r18,2048
    2e1c:	a00b883a 	mov	r5,r20
    2e20:	8809883a 	mov	r4,r17
    2e24:	0000f480 	call	f48 <_malloc_r>
    2e28:	10001726 	beq	r2,zero,2e88 <__smakebuf_r+0x130>
    2e2c:	80c0030b 	ldhu	r3,12(r16)
    2e30:	01000034 	movhi	r4,0
    2e34:	21016f04 	addi	r4,r4,1468
    2e38:	89000f15 	stw	r4,60(r17)
    2e3c:	18c02014 	ori	r3,r3,128
    2e40:	80c0030d 	sth	r3,12(r16)
    2e44:	80800015 	stw	r2,0(r16)
    2e48:	80800415 	stw	r2,16(r16)
    2e4c:	85000515 	stw	r20,20(r16)
    2e50:	98001d1e 	bne	r19,zero,2ec8 <__smakebuf_r+0x170>
    2e54:	90c6b03a 	or	r3,r18,r3
    2e58:	80c0030d 	sth	r3,12(r16)
    2e5c:	003fce06 	br	2d98 <__smakebuf_r+0x40>
    2e60:	8080030b 	ldhu	r2,12(r16)
    2e64:	1080200c 	andi	r2,r2,128
    2e68:	0027883a 	mov	r19,zero
    2e6c:	10001326 	beq	r2,zero,2ebc <__smakebuf_r+0x164>
    2e70:	05001004 	movi	r20,64
    2e74:	a00b883a 	mov	r5,r20
    2e78:	8809883a 	mov	r4,r17
    2e7c:	0025883a 	mov	r18,zero
    2e80:	0000f480 	call	f48 <_malloc_r>
    2e84:	103fe91e 	bne	r2,zero,2e2c <__smakebuf_r+0xd4>
    2e88:	8080030b 	ldhu	r2,12(r16)
    2e8c:	10c0800c 	andi	r3,r2,512
    2e90:	183fc11e 	bne	r3,zero,2d98 <__smakebuf_r+0x40>
    2e94:	00ffff04 	movi	r3,-4
    2e98:	10c4703a 	and	r2,r2,r3
    2e9c:	10800094 	ori	r2,r2,2
    2ea0:	80c010c4 	addi	r3,r16,67
    2ea4:	8080030d 	sth	r2,12(r16)
    2ea8:	00800044 	movi	r2,1
    2eac:	80c00015 	stw	r3,0(r16)
    2eb0:	80c00415 	stw	r3,16(r16)
    2eb4:	80800515 	stw	r2,20(r16)
    2eb8:	003fb706 	br	2d98 <__smakebuf_r+0x40>
    2ebc:	05010004 	movi	r20,1024
    2ec0:	0025883a 	mov	r18,zero
    2ec4:	003fd506 	br	2e1c <__smakebuf_r+0xc4>
    2ec8:	8140038f 	ldh	r5,14(r16)
    2ecc:	8809883a 	mov	r4,r17
    2ed0:	00030640 	call	3064 <_isatty_r>
    2ed4:	80c0030b 	ldhu	r3,12(r16)
    2ed8:	103fde26 	beq	r2,zero,2e54 <__smakebuf_r+0xfc>
    2edc:	18ffff0c 	andi	r3,r3,65532
    2ee0:	18c00054 	ori	r3,r3,1
    2ee4:	003fdb06 	br	2e54 <__smakebuf_r+0xfc>
    2ee8:	04c00044 	movi	r19,1
    2eec:	05010004 	movi	r20,1024
    2ef0:	04820004 	movi	r18,2048
    2ef4:	003fc906 	br	2e1c <__smakebuf_r+0xc4>
    2ef8:	0027883a 	mov	r19,zero
    2efc:	05010004 	movi	r20,1024
    2f00:	04820004 	movi	r18,2048
    2f04:	003fc506 	br	2e1c <__smakebuf_r+0xc4>

00002f08 <__swhatbuf_r>:
    2f08:	deffea04 	addi	sp,sp,-88
    2f0c:	dc001215 	stw	r16,72(sp)
    2f10:	2821883a 	mov	r16,r5
    2f14:	2940038f 	ldh	r5,14(r5)
    2f18:	dc801415 	stw	r18,80(sp)
    2f1c:	dc401315 	stw	r17,76(sp)
    2f20:	dfc01515 	stw	ra,84(sp)
    2f24:	3023883a 	mov	r17,r6
    2f28:	3825883a 	mov	r18,r7
    2f2c:	28001016 	blt	r5,zero,2f70 <__swhatbuf_r+0x68>
    2f30:	d80d883a 	mov	r6,sp
    2f34:	00030040 	call	3004 <_fstat_r>
    2f38:	10000d16 	blt	r2,zero,2f70 <__swhatbuf_r+0x68>
    2f3c:	d8c00117 	ldw	r3,4(sp)
    2f40:	00820004 	movi	r2,2048
    2f44:	18fc000c 	andi	r3,r3,61440
    2f48:	18c80020 	cmpeqi	r3,r3,8192
    2f4c:	90c00015 	stw	r3,0(r18)
    2f50:	00c10004 	movi	r3,1024
    2f54:	88c00015 	stw	r3,0(r17)
    2f58:	dfc01517 	ldw	ra,84(sp)
    2f5c:	dc801417 	ldw	r18,80(sp)
    2f60:	dc401317 	ldw	r17,76(sp)
    2f64:	dc001217 	ldw	r16,72(sp)
    2f68:	dec01604 	addi	sp,sp,88
    2f6c:	f800283a 	ret
    2f70:	8080030b 	ldhu	r2,12(r16)
    2f74:	90000015 	stw	zero,0(r18)
    2f78:	1080200c 	andi	r2,r2,128
    2f7c:	10000426 	beq	r2,zero,2f90 <__swhatbuf_r+0x88>
    2f80:	00801004 	movi	r2,64
    2f84:	88800015 	stw	r2,0(r17)
    2f88:	0005883a 	mov	r2,zero
    2f8c:	003ff206 	br	2f58 <__swhatbuf_r+0x50>
    2f90:	00810004 	movi	r2,1024
    2f94:	88800015 	stw	r2,0(r17)
    2f98:	0005883a 	mov	r2,zero
    2f9c:	003fee06 	br	2f58 <__swhatbuf_r+0x50>

00002fa0 <_read_r>:
    2fa0:	2807883a 	mov	r3,r5
    2fa4:	defffe04 	addi	sp,sp,-8
    2fa8:	dc000015 	stw	r16,0(sp)
    2fac:	300b883a 	mov	r5,r6
    2fb0:	00800034 	movhi	r2,0
    2fb4:	380d883a 	mov	r6,r7
    2fb8:	2021883a 	mov	r16,r4
    2fbc:	1809883a 	mov	r4,r3
    2fc0:	dfc00115 	stw	ra,4(sp)
    2fc4:	101c7d15 	stw	zero,29172(r2)
    2fc8:	0003a1c0 	call	3a1c <read>
    2fcc:	10ffffd8 	cmpnei	r3,r2,-1
    2fd0:	18000426 	beq	r3,zero,2fe4 <_read_r+0x44>
    2fd4:	dfc00117 	ldw	ra,4(sp)
    2fd8:	dc000017 	ldw	r16,0(sp)
    2fdc:	dec00204 	addi	sp,sp,8
    2fe0:	f800283a 	ret
    2fe4:	00c00034 	movhi	r3,0
    2fe8:	18dc7d17 	ldw	r3,29172(r3)
    2fec:	183ff926 	beq	r3,zero,2fd4 <_read_r+0x34>
    2ff0:	80c00015 	stw	r3,0(r16)
    2ff4:	dfc00117 	ldw	ra,4(sp)
    2ff8:	dc000017 	ldw	r16,0(sp)
    2ffc:	dec00204 	addi	sp,sp,8
    3000:	f800283a 	ret

00003004 <_fstat_r>:
    3004:	2807883a 	mov	r3,r5
    3008:	defffe04 	addi	sp,sp,-8
    300c:	dc000015 	stw	r16,0(sp)
    3010:	00800034 	movhi	r2,0
    3014:	300b883a 	mov	r5,r6
    3018:	2021883a 	mov	r16,r4
    301c:	1809883a 	mov	r4,r3
    3020:	dfc00115 	stw	ra,4(sp)
    3024:	101c7d15 	stw	zero,29172(r2)
    3028:	00033e40 	call	33e4 <fstat>
    302c:	10ffffd8 	cmpnei	r3,r2,-1
    3030:	18000426 	beq	r3,zero,3044 <_fstat_r+0x40>
    3034:	dfc00117 	ldw	ra,4(sp)
    3038:	dc000017 	ldw	r16,0(sp)
    303c:	dec00204 	addi	sp,sp,8
    3040:	f800283a 	ret
    3044:	00c00034 	movhi	r3,0
    3048:	18dc7d17 	ldw	r3,29172(r3)
    304c:	183ff926 	beq	r3,zero,3034 <_fstat_r+0x30>
    3050:	80c00015 	stw	r3,0(r16)
    3054:	dfc00117 	ldw	ra,4(sp)
    3058:	dc000017 	ldw	r16,0(sp)
    305c:	dec00204 	addi	sp,sp,8
    3060:	f800283a 	ret

00003064 <_isatty_r>:
    3064:	defffe04 	addi	sp,sp,-8
    3068:	dc000015 	stw	r16,0(sp)
    306c:	00800034 	movhi	r2,0
    3070:	2021883a 	mov	r16,r4
    3074:	2809883a 	mov	r4,r5
    3078:	dfc00115 	stw	ra,4(sp)
    307c:	101c7d15 	stw	zero,29172(r2)
    3080:	00037680 	call	3768 <isatty>
    3084:	10ffffd8 	cmpnei	r3,r2,-1
    3088:	18000426 	beq	r3,zero,309c <_isatty_r+0x38>
    308c:	dfc00117 	ldw	ra,4(sp)
    3090:	dc000017 	ldw	r16,0(sp)
    3094:	dec00204 	addi	sp,sp,8
    3098:	f800283a 	ret
    309c:	00c00034 	movhi	r3,0
    30a0:	18dc7d17 	ldw	r3,29172(r3)
    30a4:	183ff926 	beq	r3,zero,308c <_isatty_r+0x28>
    30a8:	80c00015 	stw	r3,0(r16)
    30ac:	dfc00117 	ldw	ra,4(sp)
    30b0:	dc000017 	ldw	r16,0(sp)
    30b4:	dec00204 	addi	sp,sp,8
    30b8:	f800283a 	ret

000030bc <__divsi3>:
    30bc:	20001a16 	blt	r4,zero,3128 <__divsi3+0x6c>
    30c0:	000f883a 	mov	r7,zero
    30c4:	2800020e 	bge	r5,zero,30d0 <__divsi3+0x14>
    30c8:	014bc83a 	sub	r5,zero,r5
    30cc:	39c0005c 	xori	r7,r7,1
    30d0:	200d883a 	mov	r6,r4
    30d4:	00c00044 	movi	r3,1
    30d8:	2900092e 	bgeu	r5,r4,3100 <__divsi3+0x44>
    30dc:	00800804 	movi	r2,32
    30e0:	00c00044 	movi	r3,1
    30e4:	00000106 	br	30ec <__divsi3+0x30>
    30e8:	10001226 	beq	r2,zero,3134 <__divsi3+0x78>
    30ec:	294b883a 	add	r5,r5,r5
    30f0:	10bfffc4 	addi	r2,r2,-1
    30f4:	18c7883a 	add	r3,r3,r3
    30f8:	293ffb36 	bltu	r5,r4,30e8 <__divsi3+0x2c>
    30fc:	18000d26 	beq	r3,zero,3134 <__divsi3+0x78>
    3100:	0005883a 	mov	r2,zero
    3104:	31400236 	bltu	r6,r5,3110 <__divsi3+0x54>
    3108:	314dc83a 	sub	r6,r6,r5
    310c:	10c4b03a 	or	r2,r2,r3
    3110:	1806d07a 	srli	r3,r3,1
    3114:	280ad07a 	srli	r5,r5,1
    3118:	183ffa1e 	bne	r3,zero,3104 <__divsi3+0x48>
    311c:	38000126 	beq	r7,zero,3124 <__divsi3+0x68>
    3120:	0085c83a 	sub	r2,zero,r2
    3124:	f800283a 	ret
    3128:	0109c83a 	sub	r4,zero,r4
    312c:	01c00044 	movi	r7,1
    3130:	003fe406 	br	30c4 <__divsi3+0x8>
    3134:	0005883a 	mov	r2,zero
    3138:	003ff806 	br	311c <__divsi3+0x60>

0000313c <__modsi3>:
    313c:	20001916 	blt	r4,zero,31a4 <__modsi3+0x68>
    3140:	000f883a 	mov	r7,zero
    3144:	2005883a 	mov	r2,r4
    3148:	2800010e 	bge	r5,zero,3150 <__modsi3+0x14>
    314c:	014bc83a 	sub	r5,zero,r5
    3150:	00c00044 	movi	r3,1
    3154:	2900092e 	bgeu	r5,r4,317c <__modsi3+0x40>
    3158:	01800804 	movi	r6,32
    315c:	00c00044 	movi	r3,1
    3160:	00000106 	br	3168 <__modsi3+0x2c>
    3164:	30000d26 	beq	r6,zero,319c <__modsi3+0x60>
    3168:	294b883a 	add	r5,r5,r5
    316c:	31bfffc4 	addi	r6,r6,-1
    3170:	18c7883a 	add	r3,r3,r3
    3174:	293ffb36 	bltu	r5,r4,3164 <__modsi3+0x28>
    3178:	18000826 	beq	r3,zero,319c <__modsi3+0x60>
    317c:	1806d07a 	srli	r3,r3,1
    3180:	11400136 	bltu	r2,r5,3188 <__modsi3+0x4c>
    3184:	1145c83a 	sub	r2,r2,r5
    3188:	280ad07a 	srli	r5,r5,1
    318c:	183ffb1e 	bne	r3,zero,317c <__modsi3+0x40>
    3190:	38000126 	beq	r7,zero,3198 <__modsi3+0x5c>
    3194:	0085c83a 	sub	r2,zero,r2
    3198:	f800283a 	ret
    319c:	2005883a 	mov	r2,r4
    31a0:	003ffb06 	br	3190 <__modsi3+0x54>
    31a4:	0109c83a 	sub	r4,zero,r4
    31a8:	01c00044 	movi	r7,1
    31ac:	003fe506 	br	3144 <__modsi3+0x8>

000031b0 <__udivsi3>:
    31b0:	200d883a 	mov	r6,r4
    31b4:	2900152e 	bgeu	r5,r4,320c <__udivsi3+0x5c>
    31b8:	28001416 	blt	r5,zero,320c <__udivsi3+0x5c>
    31bc:	00800804 	movi	r2,32
    31c0:	00c00044 	movi	r3,1
    31c4:	00000206 	br	31d0 <__udivsi3+0x20>
    31c8:	10000e26 	beq	r2,zero,3204 <__udivsi3+0x54>
    31cc:	28000516 	blt	r5,zero,31e4 <__udivsi3+0x34>
    31d0:	294b883a 	add	r5,r5,r5
    31d4:	10bfffc4 	addi	r2,r2,-1
    31d8:	18c7883a 	add	r3,r3,r3
    31dc:	293ffa36 	bltu	r5,r4,31c8 <__udivsi3+0x18>
    31e0:	18000826 	beq	r3,zero,3204 <__udivsi3+0x54>
    31e4:	0005883a 	mov	r2,zero
    31e8:	31400236 	bltu	r6,r5,31f4 <__udivsi3+0x44>
    31ec:	314dc83a 	sub	r6,r6,r5
    31f0:	10c4b03a 	or	r2,r2,r3
    31f4:	1806d07a 	srli	r3,r3,1
    31f8:	280ad07a 	srli	r5,r5,1
    31fc:	183ffa1e 	bne	r3,zero,31e8 <__udivsi3+0x38>
    3200:	f800283a 	ret
    3204:	0005883a 	mov	r2,zero
    3208:	f800283a 	ret
    320c:	00c00044 	movi	r3,1
    3210:	003ff406 	br	31e4 <__udivsi3+0x34>

00003214 <__umodsi3>:
    3214:	2005883a 	mov	r2,r4
    3218:	2900132e 	bgeu	r5,r4,3268 <__umodsi3+0x54>
    321c:	28001216 	blt	r5,zero,3268 <__umodsi3+0x54>
    3220:	01800804 	movi	r6,32
    3224:	00c00044 	movi	r3,1
    3228:	00000206 	br	3234 <__umodsi3+0x20>
    322c:	30000c26 	beq	r6,zero,3260 <__umodsi3+0x4c>
    3230:	28000516 	blt	r5,zero,3248 <__umodsi3+0x34>
    3234:	294b883a 	add	r5,r5,r5
    3238:	31bfffc4 	addi	r6,r6,-1
    323c:	18c7883a 	add	r3,r3,r3
    3240:	293ffa36 	bltu	r5,r4,322c <__umodsi3+0x18>
    3244:	18000626 	beq	r3,zero,3260 <__umodsi3+0x4c>
    3248:	1806d07a 	srli	r3,r3,1
    324c:	11400136 	bltu	r2,r5,3254 <__umodsi3+0x40>
    3250:	1145c83a 	sub	r2,r2,r5
    3254:	280ad07a 	srli	r5,r5,1
    3258:	183ffb1e 	bne	r3,zero,3248 <__umodsi3+0x34>
    325c:	f800283a 	ret
    3260:	2005883a 	mov	r2,r4
    3264:	f800283a 	ret
    3268:	00c00044 	movi	r3,1
    326c:	003ff606 	br	3248 <__umodsi3+0x34>

00003270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3270:	defffe04 	addi	sp,sp,-8
    3274:	dfc00115 	stw	ra,4(sp)
    3278:	df000015 	stw	fp,0(sp)
    327c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3280:	d0a00917 	ldw	r2,-32732(gp)
    3284:	10000326 	beq	r2,zero,3294 <alt_get_errno+0x24>
    3288:	d0a00917 	ldw	r2,-32732(gp)
    328c:	103ee83a 	callr	r2
    3290:	00000106 	br	3298 <alt_get_errno+0x28>
    3294:	d0a01204 	addi	r2,gp,-32696
}
    3298:	e037883a 	mov	sp,fp
    329c:	dfc00117 	ldw	ra,4(sp)
    32a0:	df000017 	ldw	fp,0(sp)
    32a4:	dec00204 	addi	sp,sp,8
    32a8:	f800283a 	ret

000032ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    32ac:	defffb04 	addi	sp,sp,-20
    32b0:	dfc00415 	stw	ra,16(sp)
    32b4:	df000315 	stw	fp,12(sp)
    32b8:	df000304 	addi	fp,sp,12
    32bc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    32c0:	e0bffd17 	ldw	r2,-12(fp)
    32c4:	10000616 	blt	r2,zero,32e0 <close+0x34>
    32c8:	e0bffd17 	ldw	r2,-12(fp)
    32cc:	10c00324 	muli	r3,r2,12
    32d0:	00800034 	movhi	r2,0
    32d4:	1097f304 	addi	r2,r2,24524
    32d8:	1885883a 	add	r2,r3,r2
    32dc:	00000106 	br	32e4 <close+0x38>
    32e0:	0005883a 	mov	r2,zero
    32e4:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    32e8:	e0bfff17 	ldw	r2,-4(fp)
    32ec:	10001926 	beq	r2,zero,3354 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    32f0:	e0bfff17 	ldw	r2,-4(fp)
    32f4:	10800017 	ldw	r2,0(r2)
    32f8:	10800417 	ldw	r2,16(r2)
    32fc:	10000626 	beq	r2,zero,3318 <close+0x6c>
    3300:	e0bfff17 	ldw	r2,-4(fp)
    3304:	10800017 	ldw	r2,0(r2)
    3308:	10800417 	ldw	r2,16(r2)
    330c:	e13fff17 	ldw	r4,-4(fp)
    3310:	103ee83a 	callr	r2
    3314:	00000106 	br	331c <close+0x70>
    3318:	0005883a 	mov	r2,zero
    331c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3320:	e13ffd17 	ldw	r4,-12(fp)
    3324:	0003b180 	call	3b18 <alt_release_fd>
    if (rval < 0)
    3328:	e0bffe17 	ldw	r2,-8(fp)
    332c:	1000070e 	bge	r2,zero,334c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3330:	00032700 	call	3270 <alt_get_errno>
    3334:	1007883a 	mov	r3,r2
    3338:	e0bffe17 	ldw	r2,-8(fp)
    333c:	0085c83a 	sub	r2,zero,r2
    3340:	18800015 	stw	r2,0(r3)
      return -1;
    3344:	00bfffc4 	movi	r2,-1
    3348:	00000706 	br	3368 <close+0xbc>
    }
    return 0;
    334c:	0005883a 	mov	r2,zero
    3350:	00000506 	br	3368 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3354:	00032700 	call	3270 <alt_get_errno>
    3358:	1007883a 	mov	r3,r2
    335c:	00801444 	movi	r2,81
    3360:	18800015 	stw	r2,0(r3)
    return -1;
    3364:	00bfffc4 	movi	r2,-1
  }
}
    3368:	e037883a 	mov	sp,fp
    336c:	dfc00117 	ldw	ra,4(sp)
    3370:	df000017 	ldw	fp,0(sp)
    3374:	dec00204 	addi	sp,sp,8
    3378:	f800283a 	ret

0000337c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    337c:	defffc04 	addi	sp,sp,-16
    3380:	df000315 	stw	fp,12(sp)
    3384:	df000304 	addi	fp,sp,12
    3388:	e13fff15 	stw	r4,-4(fp)
    338c:	e17ffe15 	stw	r5,-8(fp)
    3390:	e1bffd15 	stw	r6,-12(fp)
  return len;
    3394:	e0bffd17 	ldw	r2,-12(fp)
}
    3398:	e037883a 	mov	sp,fp
    339c:	df000017 	ldw	fp,0(sp)
    33a0:	dec00104 	addi	sp,sp,4
    33a4:	f800283a 	ret

000033a8 <alt_get_errno>:
{
    33a8:	defffe04 	addi	sp,sp,-8
    33ac:	dfc00115 	stw	ra,4(sp)
    33b0:	df000015 	stw	fp,0(sp)
    33b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    33b8:	d0a00917 	ldw	r2,-32732(gp)
    33bc:	10000326 	beq	r2,zero,33cc <alt_get_errno+0x24>
    33c0:	d0a00917 	ldw	r2,-32732(gp)
    33c4:	103ee83a 	callr	r2
    33c8:	00000106 	br	33d0 <alt_get_errno+0x28>
    33cc:	d0a01204 	addi	r2,gp,-32696
}
    33d0:	e037883a 	mov	sp,fp
    33d4:	dfc00117 	ldw	ra,4(sp)
    33d8:	df000017 	ldw	fp,0(sp)
    33dc:	dec00204 	addi	sp,sp,8
    33e0:	f800283a 	ret

000033e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    33e4:	defffb04 	addi	sp,sp,-20
    33e8:	dfc00415 	stw	ra,16(sp)
    33ec:	df000315 	stw	fp,12(sp)
    33f0:	df000304 	addi	fp,sp,12
    33f4:	e13ffe15 	stw	r4,-8(fp)
    33f8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33fc:	e0bffe17 	ldw	r2,-8(fp)
    3400:	10000616 	blt	r2,zero,341c <fstat+0x38>
    3404:	e0bffe17 	ldw	r2,-8(fp)
    3408:	10c00324 	muli	r3,r2,12
    340c:	00800034 	movhi	r2,0
    3410:	1097f304 	addi	r2,r2,24524
    3414:	1885883a 	add	r2,r3,r2
    3418:	00000106 	br	3420 <fstat+0x3c>
    341c:	0005883a 	mov	r2,zero
    3420:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3424:	e0bfff17 	ldw	r2,-4(fp)
    3428:	10001026 	beq	r2,zero,346c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    342c:	e0bfff17 	ldw	r2,-4(fp)
    3430:	10800017 	ldw	r2,0(r2)
    3434:	10800817 	ldw	r2,32(r2)
    3438:	10000726 	beq	r2,zero,3458 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    343c:	e0bfff17 	ldw	r2,-4(fp)
    3440:	10800017 	ldw	r2,0(r2)
    3444:	10800817 	ldw	r2,32(r2)
    3448:	e17ffd17 	ldw	r5,-12(fp)
    344c:	e13fff17 	ldw	r4,-4(fp)
    3450:	103ee83a 	callr	r2
    3454:	00000a06 	br	3480 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3458:	e0bffd17 	ldw	r2,-12(fp)
    345c:	00c80004 	movi	r3,8192
    3460:	10c00115 	stw	r3,4(r2)
      return 0;
    3464:	0005883a 	mov	r2,zero
    3468:	00000506 	br	3480 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    346c:	00033a80 	call	33a8 <alt_get_errno>
    3470:	1007883a 	mov	r3,r2
    3474:	00801444 	movi	r2,81
    3478:	18800015 	stw	r2,0(r3)
    return -1;
    347c:	00bfffc4 	movi	r2,-1
  }
}
    3480:	e037883a 	mov	sp,fp
    3484:	dfc00117 	ldw	ra,4(sp)
    3488:	df000017 	ldw	fp,0(sp)
    348c:	dec00204 	addi	sp,sp,8
    3490:	f800283a 	ret

00003494 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3494:	defff904 	addi	sp,sp,-28
    3498:	dfc00615 	stw	ra,24(sp)
    349c:	df000515 	stw	fp,20(sp)
    34a0:	df000504 	addi	fp,sp,20
    34a4:	e13fff15 	stw	r4,-4(fp)
    34a8:	e17ffe15 	stw	r5,-8(fp)
    34ac:	e1bffd15 	stw	r6,-12(fp)
    34b0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    34b4:	e0800217 	ldw	r2,8(fp)
    34b8:	d8800015 	stw	r2,0(sp)
    34bc:	e1fffc17 	ldw	r7,-16(fp)
    34c0:	e1bffd17 	ldw	r6,-12(fp)
    34c4:	e17ffe17 	ldw	r5,-8(fp)
    34c8:	e13fff17 	ldw	r4,-4(fp)
    34cc:	00036440 	call	3644 <alt_iic_isr_register>
}  
    34d0:	e037883a 	mov	sp,fp
    34d4:	dfc00117 	ldw	ra,4(sp)
    34d8:	df000017 	ldw	fp,0(sp)
    34dc:	dec00204 	addi	sp,sp,8
    34e0:	f800283a 	ret

000034e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    34e4:	defff904 	addi	sp,sp,-28
    34e8:	df000615 	stw	fp,24(sp)
    34ec:	df000604 	addi	fp,sp,24
    34f0:	e13ffb15 	stw	r4,-20(fp)
    34f4:	e17ffa15 	stw	r5,-24(fp)
    34f8:	e0bffa17 	ldw	r2,-24(fp)
    34fc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    3500:	0005303a 	rdctl	r2,status
    3504:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3508:	e0fffe17 	ldw	r3,-8(fp)
    350c:	00bfff84 	movi	r2,-2
    3510:	1884703a 	and	r2,r3,r2
    3514:	1001703a 	wrctl	status,r2
  return context;
    3518:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    351c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    3520:	00c00044 	movi	r3,1
    3524:	e0bfff17 	ldw	r2,-4(fp)
    3528:	1884983a 	sll	r2,r3,r2
    352c:	1007883a 	mov	r3,r2
    3530:	d0a01317 	ldw	r2,-32692(gp)
    3534:	1884b03a 	or	r2,r3,r2
    3538:	d0a01315 	stw	r2,-32692(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    353c:	d0a01317 	ldw	r2,-32692(gp)
    3540:	100170fa 	wrctl	ienable,r2
    3544:	e0bffd17 	ldw	r2,-12(fp)
    3548:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    354c:	e0bffc17 	ldw	r2,-16(fp)
    3550:	1001703a 	wrctl	status,r2
}
    3554:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    3558:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    355c:	e037883a 	mov	sp,fp
    3560:	df000017 	ldw	fp,0(sp)
    3564:	dec00104 	addi	sp,sp,4
    3568:	f800283a 	ret

0000356c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    356c:	defff904 	addi	sp,sp,-28
    3570:	df000615 	stw	fp,24(sp)
    3574:	df000604 	addi	fp,sp,24
    3578:	e13ffb15 	stw	r4,-20(fp)
    357c:	e17ffa15 	stw	r5,-24(fp)
    3580:	e0bffa17 	ldw	r2,-24(fp)
    3584:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    3588:	0005303a 	rdctl	r2,status
    358c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3590:	e0fffe17 	ldw	r3,-8(fp)
    3594:	00bfff84 	movi	r2,-2
    3598:	1884703a 	and	r2,r3,r2
    359c:	1001703a 	wrctl	status,r2
  return context;
    35a0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    35a4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    35a8:	00c00044 	movi	r3,1
    35ac:	e0bfff17 	ldw	r2,-4(fp)
    35b0:	1884983a 	sll	r2,r3,r2
    35b4:	0084303a 	nor	r2,zero,r2
    35b8:	1007883a 	mov	r3,r2
    35bc:	d0a01317 	ldw	r2,-32692(gp)
    35c0:	1884703a 	and	r2,r3,r2
    35c4:	d0a01315 	stw	r2,-32692(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    35c8:	d0a01317 	ldw	r2,-32692(gp)
    35cc:	100170fa 	wrctl	ienable,r2
    35d0:	e0bffd17 	ldw	r2,-12(fp)
    35d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    35d8:	e0bffc17 	ldw	r2,-16(fp)
    35dc:	1001703a 	wrctl	status,r2
}
    35e0:	0001883a 	nop
  return 0;
    35e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    35e8:	e037883a 	mov	sp,fp
    35ec:	df000017 	ldw	fp,0(sp)
    35f0:	dec00104 	addi	sp,sp,4
    35f4:	f800283a 	ret

000035f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    35f8:	defffc04 	addi	sp,sp,-16
    35fc:	df000315 	stw	fp,12(sp)
    3600:	df000304 	addi	fp,sp,12
    3604:	e13ffe15 	stw	r4,-8(fp)
    3608:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    360c:	000530fa 	rdctl	r2,ienable
    3610:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    3614:	00c00044 	movi	r3,1
    3618:	e0bffd17 	ldw	r2,-12(fp)
    361c:	1884983a 	sll	r2,r3,r2
    3620:	1007883a 	mov	r3,r2
    3624:	e0bfff17 	ldw	r2,-4(fp)
    3628:	1884703a 	and	r2,r3,r2
    362c:	1004c03a 	cmpne	r2,r2,zero
    3630:	10803fcc 	andi	r2,r2,255
}
    3634:	e037883a 	mov	sp,fp
    3638:	df000017 	ldw	fp,0(sp)
    363c:	dec00104 	addi	sp,sp,4
    3640:	f800283a 	ret

00003644 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3644:	defff504 	addi	sp,sp,-44
    3648:	dfc00a15 	stw	ra,40(sp)
    364c:	df000915 	stw	fp,36(sp)
    3650:	df000904 	addi	fp,sp,36
    3654:	e13ffa15 	stw	r4,-24(fp)
    3658:	e17ff915 	stw	r5,-28(fp)
    365c:	e1bff815 	stw	r6,-32(fp)
    3660:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    3664:	00bffa84 	movi	r2,-22
    3668:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    366c:	e0bff917 	ldw	r2,-28(fp)
    3670:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800808 	cmpgei	r2,r2,32
    367c:	1000251e 	bne	r2,zero,3714 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    3680:	0005303a 	rdctl	r2,status
    3684:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3688:	e0fffc17 	ldw	r3,-16(fp)
    368c:	00bfff84 	movi	r2,-2
    3690:	1884703a 	and	r2,r3,r2
    3694:	1001703a 	wrctl	status,r2
  return context;
    3698:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    369c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    36a0:	e0bffe17 	ldw	r2,-8(fp)
    36a4:	100890fa 	slli	r4,r2,3
    36a8:	e0fff817 	ldw	r3,-32(fp)
    36ac:	00800034 	movhi	r2,0
    36b0:	2085883a 	add	r2,r4,r2
    36b4:	10dc8f15 	stw	r3,29244(r2)
    alt_irq[id].context = isr_context;
    36b8:	e0bffe17 	ldw	r2,-8(fp)
    36bc:	100890fa 	slli	r4,r2,3
    36c0:	e0fff717 	ldw	r3,-36(fp)
    36c4:	00800034 	movhi	r2,0
    36c8:	2085883a 	add	r2,r4,r2
    36cc:	10dc9015 	stw	r3,29248(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    36d0:	e0bff817 	ldw	r2,-32(fp)
    36d4:	10000526 	beq	r2,zero,36ec <alt_iic_isr_register+0xa8>
    36d8:	e0bffe17 	ldw	r2,-8(fp)
    36dc:	100b883a 	mov	r5,r2
    36e0:	e13ffa17 	ldw	r4,-24(fp)
    36e4:	00034e40 	call	34e4 <alt_ic_irq_enable>
    36e8:	00000406 	br	36fc <alt_iic_isr_register+0xb8>
    36ec:	e0bffe17 	ldw	r2,-8(fp)
    36f0:	100b883a 	mov	r5,r2
    36f4:	e13ffa17 	ldw	r4,-24(fp)
    36f8:	000356c0 	call	356c <alt_ic_irq_disable>
    36fc:	e0bfff15 	stw	r2,-4(fp)
    3700:	e0bffd17 	ldw	r2,-12(fp)
    3704:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    3708:	e0bffb17 	ldw	r2,-20(fp)
    370c:	1001703a 	wrctl	status,r2
}
    3710:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    3714:	e0bfff17 	ldw	r2,-4(fp)
}
    3718:	e037883a 	mov	sp,fp
    371c:	dfc00117 	ldw	ra,4(sp)
    3720:	df000017 	ldw	fp,0(sp)
    3724:	dec00204 	addi	sp,sp,8
    3728:	f800283a 	ret

0000372c <alt_get_errno>:
{
    372c:	defffe04 	addi	sp,sp,-8
    3730:	dfc00115 	stw	ra,4(sp)
    3734:	df000015 	stw	fp,0(sp)
    3738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    373c:	d0a00917 	ldw	r2,-32732(gp)
    3740:	10000326 	beq	r2,zero,3750 <alt_get_errno+0x24>
    3744:	d0a00917 	ldw	r2,-32732(gp)
    3748:	103ee83a 	callr	r2
    374c:	00000106 	br	3754 <alt_get_errno+0x28>
    3750:	d0a01204 	addi	r2,gp,-32696
}
    3754:	e037883a 	mov	sp,fp
    3758:	dfc00117 	ldw	ra,4(sp)
    375c:	df000017 	ldw	fp,0(sp)
    3760:	dec00204 	addi	sp,sp,8
    3764:	f800283a 	ret

00003768 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3768:	deffea04 	addi	sp,sp,-88
    376c:	dfc01515 	stw	ra,84(sp)
    3770:	df001415 	stw	fp,80(sp)
    3774:	df001404 	addi	fp,sp,80
    3778:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    377c:	e0bfec17 	ldw	r2,-80(fp)
    3780:	10000616 	blt	r2,zero,379c <isatty+0x34>
    3784:	e0bfec17 	ldw	r2,-80(fp)
    3788:	10c00324 	muli	r3,r2,12
    378c:	00800034 	movhi	r2,0
    3790:	1097f304 	addi	r2,r2,24524
    3794:	1885883a 	add	r2,r3,r2
    3798:	00000106 	br	37a0 <isatty+0x38>
    379c:	0005883a 	mov	r2,zero
    37a0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    37a4:	e0bfff17 	ldw	r2,-4(fp)
    37a8:	10000e26 	beq	r2,zero,37e4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    37ac:	e0bfff17 	ldw	r2,-4(fp)
    37b0:	10800017 	ldw	r2,0(r2)
    37b4:	10800817 	ldw	r2,32(r2)
    37b8:	1000021e 	bne	r2,zero,37c4 <isatty+0x5c>
    {
      return 1;
    37bc:	00800044 	movi	r2,1
    37c0:	00000d06 	br	37f8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    37c4:	e0bfed04 	addi	r2,fp,-76
    37c8:	100b883a 	mov	r5,r2
    37cc:	e13fec17 	ldw	r4,-80(fp)
    37d0:	00033e40 	call	33e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    37d4:	e0bfee17 	ldw	r2,-72(fp)
    37d8:	10880020 	cmpeqi	r2,r2,8192
    37dc:	10803fcc 	andi	r2,r2,255
    37e0:	00000506 	br	37f8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    37e4:	000372c0 	call	372c <alt_get_errno>
    37e8:	1007883a 	mov	r3,r2
    37ec:	00801444 	movi	r2,81
    37f0:	18800015 	stw	r2,0(r3)
    return 0;
    37f4:	0005883a 	mov	r2,zero
  }
}
    37f8:	e037883a 	mov	sp,fp
    37fc:	dfc00117 	ldw	ra,4(sp)
    3800:	df000017 	ldw	fp,0(sp)
    3804:	dec00204 	addi	sp,sp,8
    3808:	f800283a 	ret

0000380c <alt_get_errno>:
{
    380c:	defffe04 	addi	sp,sp,-8
    3810:	dfc00115 	stw	ra,4(sp)
    3814:	df000015 	stw	fp,0(sp)
    3818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    381c:	d0a00917 	ldw	r2,-32732(gp)
    3820:	10000326 	beq	r2,zero,3830 <alt_get_errno+0x24>
    3824:	d0a00917 	ldw	r2,-32732(gp)
    3828:	103ee83a 	callr	r2
    382c:	00000106 	br	3834 <alt_get_errno+0x28>
    3830:	d0a01204 	addi	r2,gp,-32696
}
    3834:	e037883a 	mov	sp,fp
    3838:	dfc00117 	ldw	ra,4(sp)
    383c:	df000017 	ldw	fp,0(sp)
    3840:	dec00204 	addi	sp,sp,8
    3844:	f800283a 	ret

00003848 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3848:	defff904 	addi	sp,sp,-28
    384c:	dfc00615 	stw	ra,24(sp)
    3850:	df000515 	stw	fp,20(sp)
    3854:	df000504 	addi	fp,sp,20
    3858:	e13ffd15 	stw	r4,-12(fp)
    385c:	e17ffc15 	stw	r5,-16(fp)
    3860:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3864:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3868:	e0bffd17 	ldw	r2,-12(fp)
    386c:	10000616 	blt	r2,zero,3888 <lseek+0x40>
    3870:	e0bffd17 	ldw	r2,-12(fp)
    3874:	10c00324 	muli	r3,r2,12
    3878:	00800034 	movhi	r2,0
    387c:	1097f304 	addi	r2,r2,24524
    3880:	1885883a 	add	r2,r3,r2
    3884:	00000106 	br	388c <lseek+0x44>
    3888:	0005883a 	mov	r2,zero
    388c:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    3890:	e0bffe17 	ldw	r2,-8(fp)
    3894:	10001026 	beq	r2,zero,38d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3898:	e0bffe17 	ldw	r2,-8(fp)
    389c:	10800017 	ldw	r2,0(r2)
    38a0:	10800717 	ldw	r2,28(r2)
    38a4:	10000926 	beq	r2,zero,38cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    38a8:	e0bffe17 	ldw	r2,-8(fp)
    38ac:	10800017 	ldw	r2,0(r2)
    38b0:	10800717 	ldw	r2,28(r2)
    38b4:	e1bffb17 	ldw	r6,-20(fp)
    38b8:	e17ffc17 	ldw	r5,-16(fp)
    38bc:	e13ffe17 	ldw	r4,-8(fp)
    38c0:	103ee83a 	callr	r2
    38c4:	e0bfff15 	stw	r2,-4(fp)
    38c8:	00000506 	br	38e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    38cc:	00bfde84 	movi	r2,-134
    38d0:	e0bfff15 	stw	r2,-4(fp)
    38d4:	00000206 	br	38e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    38d8:	00bfebc4 	movi	r2,-81
    38dc:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    38e0:	e0bfff17 	ldw	r2,-4(fp)
    38e4:	1000070e 	bge	r2,zero,3904 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    38e8:	000380c0 	call	380c <alt_get_errno>
    38ec:	1007883a 	mov	r3,r2
    38f0:	e0bfff17 	ldw	r2,-4(fp)
    38f4:	0085c83a 	sub	r2,zero,r2
    38f8:	18800015 	stw	r2,0(r3)
    rc = -1;
    38fc:	00bfffc4 	movi	r2,-1
    3900:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    3904:	e0bfff17 	ldw	r2,-4(fp)
}
    3908:	e037883a 	mov	sp,fp
    390c:	dfc00117 	ldw	ra,4(sp)
    3910:	df000017 	ldw	fp,0(sp)
    3914:	dec00204 	addi	sp,sp,8
    3918:	f800283a 	ret

0000391c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    391c:	defffd04 	addi	sp,sp,-12
    3920:	dfc00215 	stw	ra,8(sp)
    3924:	df000115 	stw	fp,4(sp)
    3928:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    392c:	0009883a 	mov	r4,zero
    3930:	0003d900 	call	3d90 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3934:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3938:	0003dcc0 	call	3dcc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    393c:	01800034 	movhi	r6,0
    3940:	3195d604 	addi	r6,r6,22360
    3944:	01400034 	movhi	r5,0
    3948:	2955d604 	addi	r5,r5,22360
    394c:	01000034 	movhi	r4,0
    3950:	2115d604 	addi	r4,r4,22360
    3954:	0004dcc0 	call	4dcc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3958:	0004bbc0 	call	4bbc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    395c:	01000034 	movhi	r4,0
    3960:	21130804 	addi	r4,r4,19488
    3964:	00054980 	call	5498 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3968:	d0a01417 	ldw	r2,-32688(gp)
    396c:	d0e01517 	ldw	r3,-32684(gp)
    3970:	d1201617 	ldw	r4,-32680(gp)
    3974:	200d883a 	mov	r6,r4
    3978:	180b883a 	mov	r5,r3
    397c:	1009883a 	mov	r4,r2
    3980:	00003340 	call	334 <main>
    3984:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3988:	01000044 	movi	r4,1
    398c:	00032ac0 	call	32ac <close>
  exit (result);
    3990:	e13fff17 	ldw	r4,-4(fp)
    3994:	00054ac0 	call	54ac <exit>

00003998 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3998:	defffe04 	addi	sp,sp,-8
    399c:	df000115 	stw	fp,4(sp)
    39a0:	df000104 	addi	fp,sp,4
    39a4:	e13fff15 	stw	r4,-4(fp)
}
    39a8:	0001883a 	nop
    39ac:	e037883a 	mov	sp,fp
    39b0:	df000017 	ldw	fp,0(sp)
    39b4:	dec00104 	addi	sp,sp,4
    39b8:	f800283a 	ret

000039bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    39bc:	defffe04 	addi	sp,sp,-8
    39c0:	df000115 	stw	fp,4(sp)
    39c4:	df000104 	addi	fp,sp,4
    39c8:	e13fff15 	stw	r4,-4(fp)
}
    39cc:	0001883a 	nop
    39d0:	e037883a 	mov	sp,fp
    39d4:	df000017 	ldw	fp,0(sp)
    39d8:	dec00104 	addi	sp,sp,4
    39dc:	f800283a 	ret

000039e0 <alt_get_errno>:
{
    39e0:	defffe04 	addi	sp,sp,-8
    39e4:	dfc00115 	stw	ra,4(sp)
    39e8:	df000015 	stw	fp,0(sp)
    39ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    39f0:	d0a00917 	ldw	r2,-32732(gp)
    39f4:	10000326 	beq	r2,zero,3a04 <alt_get_errno+0x24>
    39f8:	d0a00917 	ldw	r2,-32732(gp)
    39fc:	103ee83a 	callr	r2
    3a00:	00000106 	br	3a08 <alt_get_errno+0x28>
    3a04:	d0a01204 	addi	r2,gp,-32696
}
    3a08:	e037883a 	mov	sp,fp
    3a0c:	dfc00117 	ldw	ra,4(sp)
    3a10:	df000017 	ldw	fp,0(sp)
    3a14:	dec00204 	addi	sp,sp,8
    3a18:	f800283a 	ret

00003a1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3a1c:	defff904 	addi	sp,sp,-28
    3a20:	dfc00615 	stw	ra,24(sp)
    3a24:	df000515 	stw	fp,20(sp)
    3a28:	df000504 	addi	fp,sp,20
    3a2c:	e13ffd15 	stw	r4,-12(fp)
    3a30:	e17ffc15 	stw	r5,-16(fp)
    3a34:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a38:	e0bffd17 	ldw	r2,-12(fp)
    3a3c:	10000616 	blt	r2,zero,3a58 <read+0x3c>
    3a40:	e0bffd17 	ldw	r2,-12(fp)
    3a44:	10c00324 	muli	r3,r2,12
    3a48:	00800034 	movhi	r2,0
    3a4c:	1097f304 	addi	r2,r2,24524
    3a50:	1885883a 	add	r2,r3,r2
    3a54:	00000106 	br	3a5c <read+0x40>
    3a58:	0005883a 	mov	r2,zero
    3a5c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3a60:	e0bfff17 	ldw	r2,-4(fp)
    3a64:	10002226 	beq	r2,zero,3af0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3a68:	e0bfff17 	ldw	r2,-4(fp)
    3a6c:	10800217 	ldw	r2,8(r2)
    3a70:	108000cc 	andi	r2,r2,3
    3a74:	10800060 	cmpeqi	r2,r2,1
    3a78:	1000181e 	bne	r2,zero,3adc <read+0xc0>
        (fd->dev->read))
    3a7c:	e0bfff17 	ldw	r2,-4(fp)
    3a80:	10800017 	ldw	r2,0(r2)
    3a84:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3a88:	10001426 	beq	r2,zero,3adc <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3a8c:	e0bfff17 	ldw	r2,-4(fp)
    3a90:	10800017 	ldw	r2,0(r2)
    3a94:	10800517 	ldw	r2,20(r2)
    3a98:	e0fffb17 	ldw	r3,-20(fp)
    3a9c:	180d883a 	mov	r6,r3
    3aa0:	e17ffc17 	ldw	r5,-16(fp)
    3aa4:	e13fff17 	ldw	r4,-4(fp)
    3aa8:	103ee83a 	callr	r2
    3aac:	e0bffe15 	stw	r2,-8(fp)
    3ab0:	e0bffe17 	ldw	r2,-8(fp)
    3ab4:	1000070e 	bge	r2,zero,3ad4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    3ab8:	00039e00 	call	39e0 <alt_get_errno>
    3abc:	1007883a 	mov	r3,r2
    3ac0:	e0bffe17 	ldw	r2,-8(fp)
    3ac4:	0085c83a 	sub	r2,zero,r2
    3ac8:	18800015 	stw	r2,0(r3)
          return -1;
    3acc:	00bfffc4 	movi	r2,-1
    3ad0:	00000c06 	br	3b04 <read+0xe8>
        }
        return rval;
    3ad4:	e0bffe17 	ldw	r2,-8(fp)
    3ad8:	00000a06 	br	3b04 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3adc:	00039e00 	call	39e0 <alt_get_errno>
    3ae0:	1007883a 	mov	r3,r2
    3ae4:	00800344 	movi	r2,13
    3ae8:	18800015 	stw	r2,0(r3)
    3aec:	00000406 	br	3b00 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3af0:	00039e00 	call	39e0 <alt_get_errno>
    3af4:	1007883a 	mov	r3,r2
    3af8:	00801444 	movi	r2,81
    3afc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3b00:	00bfffc4 	movi	r2,-1
}
    3b04:	e037883a 	mov	sp,fp
    3b08:	dfc00117 	ldw	ra,4(sp)
    3b0c:	df000017 	ldw	fp,0(sp)
    3b10:	dec00204 	addi	sp,sp,8
    3b14:	f800283a 	ret

00003b18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3b18:	defffe04 	addi	sp,sp,-8
    3b1c:	df000115 	stw	fp,4(sp)
    3b20:	df000104 	addi	fp,sp,4
    3b24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3b28:	e0bfff17 	ldw	r2,-4(fp)
    3b2c:	108000d0 	cmplti	r2,r2,3
    3b30:	10000a1e 	bne	r2,zero,3b5c <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
    3b34:	e0bfff17 	ldw	r2,-4(fp)
    3b38:	10c00324 	muli	r3,r2,12
    3b3c:	00800034 	movhi	r2,0
    3b40:	1885883a 	add	r2,r3,r2
    3b44:	1017f515 	stw	zero,24532(r2)
    alt_fd_list[fd].dev      = 0;
    3b48:	e0bfff17 	ldw	r2,-4(fp)
    3b4c:	10c00324 	muli	r3,r2,12
    3b50:	00800034 	movhi	r2,0
    3b54:	1885883a 	add	r2,r3,r2
    3b58:	1017f315 	stw	zero,24524(r2)
  }
}
    3b5c:	0001883a 	nop
    3b60:	e037883a 	mov	sp,fp
    3b64:	df000017 	ldw	fp,0(sp)
    3b68:	dec00104 	addi	sp,sp,4
    3b6c:	f800283a 	ret

00003b70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3b70:	defff904 	addi	sp,sp,-28
    3b74:	df000615 	stw	fp,24(sp)
    3b78:	df000604 	addi	fp,sp,24
    3b7c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    3b80:	0005303a 	rdctl	r2,status
    3b84:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3b88:	e0fffd17 	ldw	r3,-12(fp)
    3b8c:	00bfff84 	movi	r2,-2
    3b90:	1884703a 	and	r2,r3,r2
    3b94:	1001703a 	wrctl	status,r2
  return context;
    3b98:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3b9c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3ba0:	d0a00b17 	ldw	r2,-32724(gp)
    3ba4:	10c000c4 	addi	r3,r2,3
    3ba8:	00bfff04 	movi	r2,-4
    3bac:	1884703a 	and	r2,r3,r2
    3bb0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3bb4:	d0e00b17 	ldw	r3,-32724(gp)
    3bb8:	e0bffa17 	ldw	r2,-24(fp)
    3bbc:	1887883a 	add	r3,r3,r2
    3bc0:	00820034 	movhi	r2,2048
    3bc4:	10800004 	addi	r2,r2,0
    3bc8:	10c0072e 	bgeu	r2,r3,3be8 <sbrk+0x78>
    3bcc:	e0bfff17 	ldw	r2,-4(fp)
    3bd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3bd4:	e0bffc17 	ldw	r2,-16(fp)
    3bd8:	1001703a 	wrctl	status,r2
}
    3bdc:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3be0:	00bfffc4 	movi	r2,-1
    3be4:	00000c06 	br	3c18 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    3be8:	d0a00b17 	ldw	r2,-32724(gp)
    3bec:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    3bf0:	d0e00b17 	ldw	r3,-32724(gp)
    3bf4:	e0bffa17 	ldw	r2,-24(fp)
    3bf8:	1885883a 	add	r2,r3,r2
    3bfc:	d0a00b15 	stw	r2,-32724(gp)
    3c00:	e0bfff17 	ldw	r2,-4(fp)
    3c04:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    3c08:	e0bffb17 	ldw	r2,-20(fp)
    3c0c:	1001703a 	wrctl	status,r2
}
    3c10:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3c14:	e0bffe17 	ldw	r2,-8(fp)
} 
    3c18:	e037883a 	mov	sp,fp
    3c1c:	df000017 	ldw	fp,0(sp)
    3c20:	dec00104 	addi	sp,sp,4
    3c24:	f800283a 	ret

00003c28 <alt_get_errno>:
{
    3c28:	defffe04 	addi	sp,sp,-8
    3c2c:	dfc00115 	stw	ra,4(sp)
    3c30:	df000015 	stw	fp,0(sp)
    3c34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3c38:	d0a00917 	ldw	r2,-32732(gp)
    3c3c:	10000326 	beq	r2,zero,3c4c <alt_get_errno+0x24>
    3c40:	d0a00917 	ldw	r2,-32732(gp)
    3c44:	103ee83a 	callr	r2
    3c48:	00000106 	br	3c50 <alt_get_errno+0x28>
    3c4c:	d0a01204 	addi	r2,gp,-32696
}
    3c50:	e037883a 	mov	sp,fp
    3c54:	dfc00117 	ldw	ra,4(sp)
    3c58:	df000017 	ldw	fp,0(sp)
    3c5c:	dec00204 	addi	sp,sp,8
    3c60:	f800283a 	ret

00003c64 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3c64:	defff904 	addi	sp,sp,-28
    3c68:	dfc00615 	stw	ra,24(sp)
    3c6c:	df000515 	stw	fp,20(sp)
    3c70:	df000504 	addi	fp,sp,20
    3c74:	e13ffd15 	stw	r4,-12(fp)
    3c78:	e17ffc15 	stw	r5,-16(fp)
    3c7c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3c80:	e0bffd17 	ldw	r2,-12(fp)
    3c84:	10000616 	blt	r2,zero,3ca0 <write+0x3c>
    3c88:	e0bffd17 	ldw	r2,-12(fp)
    3c8c:	10c00324 	muli	r3,r2,12
    3c90:	00800034 	movhi	r2,0
    3c94:	1097f304 	addi	r2,r2,24524
    3c98:	1885883a 	add	r2,r3,r2
    3c9c:	00000106 	br	3ca4 <write+0x40>
    3ca0:	0005883a 	mov	r2,zero
    3ca4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3ca8:	e0bfff17 	ldw	r2,-4(fp)
    3cac:	10002126 	beq	r2,zero,3d34 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3cb0:	e0bfff17 	ldw	r2,-4(fp)
    3cb4:	10800217 	ldw	r2,8(r2)
    3cb8:	108000cc 	andi	r2,r2,3
    3cbc:	10001826 	beq	r2,zero,3d20 <write+0xbc>
    3cc0:	e0bfff17 	ldw	r2,-4(fp)
    3cc4:	10800017 	ldw	r2,0(r2)
    3cc8:	10800617 	ldw	r2,24(r2)
    3ccc:	10001426 	beq	r2,zero,3d20 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3cd0:	e0bfff17 	ldw	r2,-4(fp)
    3cd4:	10800017 	ldw	r2,0(r2)
    3cd8:	10800617 	ldw	r2,24(r2)
    3cdc:	e0fffb17 	ldw	r3,-20(fp)
    3ce0:	180d883a 	mov	r6,r3
    3ce4:	e17ffc17 	ldw	r5,-16(fp)
    3ce8:	e13fff17 	ldw	r4,-4(fp)
    3cec:	103ee83a 	callr	r2
    3cf0:	e0bffe15 	stw	r2,-8(fp)
    3cf4:	e0bffe17 	ldw	r2,-8(fp)
    3cf8:	1000070e 	bge	r2,zero,3d18 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3cfc:	0003c280 	call	3c28 <alt_get_errno>
    3d00:	1007883a 	mov	r3,r2
    3d04:	e0bffe17 	ldw	r2,-8(fp)
    3d08:	0085c83a 	sub	r2,zero,r2
    3d0c:	18800015 	stw	r2,0(r3)
        return -1;
    3d10:	00bfffc4 	movi	r2,-1
    3d14:	00000c06 	br	3d48 <write+0xe4>
      }
      return rval;
    3d18:	e0bffe17 	ldw	r2,-8(fp)
    3d1c:	00000a06 	br	3d48 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3d20:	0003c280 	call	3c28 <alt_get_errno>
    3d24:	1007883a 	mov	r3,r2
    3d28:	00800344 	movi	r2,13
    3d2c:	18800015 	stw	r2,0(r3)
    3d30:	00000406 	br	3d44 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3d34:	0003c280 	call	3c28 <alt_get_errno>
    3d38:	1007883a 	mov	r3,r2
    3d3c:	00801444 	movi	r2,81
    3d40:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3d44:	00bfffc4 	movi	r2,-1
}
    3d48:	e037883a 	mov	sp,fp
    3d4c:	dfc00117 	ldw	ra,4(sp)
    3d50:	df000017 	ldw	fp,0(sp)
    3d54:	dec00204 	addi	sp,sp,8
    3d58:	f800283a 	ret

00003d5c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3d5c:	defffd04 	addi	sp,sp,-12
    3d60:	dfc00215 	stw	ra,8(sp)
    3d64:	df000115 	stw	fp,4(sp)
    3d68:	df000104 	addi	fp,sp,4
    3d6c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3d70:	d1600604 	addi	r5,gp,-32744
    3d74:	e13fff17 	ldw	r4,-4(fp)
    3d78:	0004b140 	call	4b14 <alt_dev_llist_insert>
}
    3d7c:	e037883a 	mov	sp,fp
    3d80:	dfc00117 	ldw	ra,4(sp)
    3d84:	df000017 	ldw	fp,0(sp)
    3d88:	dec00204 	addi	sp,sp,8
    3d8c:	f800283a 	ret

00003d90 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3d90:	defffd04 	addi	sp,sp,-12
    3d94:	dfc00215 	stw	ra,8(sp)
    3d98:	df000115 	stw	fp,4(sp)
    3d9c:	df000104 	addi	fp,sp,4
    3da0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    3da4:	000523c0 	call	523c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3da8:	00800044 	movi	r2,1
    3dac:	1001703a 	wrctl	status,r2
}
    3db0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    3db4:	0001883a 	nop
    3db8:	e037883a 	mov	sp,fp
    3dbc:	dfc00117 	ldw	ra,4(sp)
    3dc0:	df000017 	ldw	fp,0(sp)
    3dc4:	dec00204 	addi	sp,sp,8
    3dc8:	f800283a 	ret

00003dcc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3dcc:	defffe04 	addi	sp,sp,-8
    3dd0:	dfc00115 	stw	ra,4(sp)
    3dd4:	df000015 	stw	fp,0(sp)
    3dd8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    3ddc:	01c0fa04 	movi	r7,1000
    3de0:	000d883a 	mov	r6,zero
    3de4:	000b883a 	mov	r5,zero
    3de8:	01020034 	movhi	r4,2048
    3dec:	21040004 	addi	r4,r4,4096
    3df0:	00049200 	call	4920 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    3df4:	01800044 	movi	r6,1
    3df8:	000b883a 	mov	r5,zero
    3dfc:	01000034 	movhi	r4,0
    3e00:	21185d04 	addi	r4,r4,24948
    3e04:	0003f940 	call	3f94 <altera_avalon_jtag_uart_init>
    3e08:	01000034 	movhi	r4,0
    3e0c:	21185304 	addi	r4,r4,24908
    3e10:	0003d5c0 	call	3d5c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    3e14:	0001883a 	nop
}
    3e18:	0001883a 	nop
    3e1c:	e037883a 	mov	sp,fp
    3e20:	dfc00117 	ldw	ra,4(sp)
    3e24:	df000017 	ldw	fp,0(sp)
    3e28:	dec00204 	addi	sp,sp,8
    3e2c:	f800283a 	ret

00003e30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3e30:	defffa04 	addi	sp,sp,-24
    3e34:	dfc00515 	stw	ra,20(sp)
    3e38:	df000415 	stw	fp,16(sp)
    3e3c:	df000404 	addi	fp,sp,16
    3e40:	e13ffe15 	stw	r4,-8(fp)
    3e44:	e17ffd15 	stw	r5,-12(fp)
    3e48:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3e4c:	e0bffe17 	ldw	r2,-8(fp)
    3e50:	10800017 	ldw	r2,0(r2)
    3e54:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3e58:	e0bfff17 	ldw	r2,-4(fp)
    3e5c:	10c00a04 	addi	r3,r2,40
    3e60:	e0bffe17 	ldw	r2,-8(fp)
    3e64:	10800217 	ldw	r2,8(r2)
    3e68:	100f883a 	mov	r7,r2
    3e6c:	e1bffc17 	ldw	r6,-16(fp)
    3e70:	e17ffd17 	ldw	r5,-12(fp)
    3e74:	1809883a 	mov	r4,r3
    3e78:	000445c0 	call	445c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3e7c:	e037883a 	mov	sp,fp
    3e80:	dfc00117 	ldw	ra,4(sp)
    3e84:	df000017 	ldw	fp,0(sp)
    3e88:	dec00204 	addi	sp,sp,8
    3e8c:	f800283a 	ret

00003e90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3e90:	defffa04 	addi	sp,sp,-24
    3e94:	dfc00515 	stw	ra,20(sp)
    3e98:	df000415 	stw	fp,16(sp)
    3e9c:	df000404 	addi	fp,sp,16
    3ea0:	e13ffe15 	stw	r4,-8(fp)
    3ea4:	e17ffd15 	stw	r5,-12(fp)
    3ea8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3eac:	e0bffe17 	ldw	r2,-8(fp)
    3eb0:	10800017 	ldw	r2,0(r2)
    3eb4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3eb8:	e0bfff17 	ldw	r2,-4(fp)
    3ebc:	10c00a04 	addi	r3,r2,40
    3ec0:	e0bffe17 	ldw	r2,-8(fp)
    3ec4:	10800217 	ldw	r2,8(r2)
    3ec8:	100f883a 	mov	r7,r2
    3ecc:	e1bffc17 	ldw	r6,-16(fp)
    3ed0:	e17ffd17 	ldw	r5,-12(fp)
    3ed4:	1809883a 	mov	r4,r3
    3ed8:	000467c0 	call	467c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3edc:	e037883a 	mov	sp,fp
    3ee0:	dfc00117 	ldw	ra,4(sp)
    3ee4:	df000017 	ldw	fp,0(sp)
    3ee8:	dec00204 	addi	sp,sp,8
    3eec:	f800283a 	ret

00003ef0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3ef0:	defffc04 	addi	sp,sp,-16
    3ef4:	dfc00315 	stw	ra,12(sp)
    3ef8:	df000215 	stw	fp,8(sp)
    3efc:	df000204 	addi	fp,sp,8
    3f00:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3f04:	e0bffe17 	ldw	r2,-8(fp)
    3f08:	10800017 	ldw	r2,0(r2)
    3f0c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3f10:	e0bfff17 	ldw	r2,-4(fp)
    3f14:	10c00a04 	addi	r3,r2,40
    3f18:	e0bffe17 	ldw	r2,-8(fp)
    3f1c:	10800217 	ldw	r2,8(r2)
    3f20:	100b883a 	mov	r5,r2
    3f24:	1809883a 	mov	r4,r3
    3f28:	00043000 	call	4300 <altera_avalon_jtag_uart_close>
}
    3f2c:	e037883a 	mov	sp,fp
    3f30:	dfc00117 	ldw	ra,4(sp)
    3f34:	df000017 	ldw	fp,0(sp)
    3f38:	dec00204 	addi	sp,sp,8
    3f3c:	f800283a 	ret

00003f40 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3f40:	defffa04 	addi	sp,sp,-24
    3f44:	dfc00515 	stw	ra,20(sp)
    3f48:	df000415 	stw	fp,16(sp)
    3f4c:	df000404 	addi	fp,sp,16
    3f50:	e13ffe15 	stw	r4,-8(fp)
    3f54:	e17ffd15 	stw	r5,-12(fp)
    3f58:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3f5c:	e0bffe17 	ldw	r2,-8(fp)
    3f60:	10800017 	ldw	r2,0(r2)
    3f64:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3f68:	e0bfff17 	ldw	r2,-4(fp)
    3f6c:	10800a04 	addi	r2,r2,40
    3f70:	e1bffc17 	ldw	r6,-16(fp)
    3f74:	e17ffd17 	ldw	r5,-12(fp)
    3f78:	1009883a 	mov	r4,r2
    3f7c:	00043680 	call	4368 <altera_avalon_jtag_uart_ioctl>
}
    3f80:	e037883a 	mov	sp,fp
    3f84:	dfc00117 	ldw	ra,4(sp)
    3f88:	df000017 	ldw	fp,0(sp)
    3f8c:	dec00204 	addi	sp,sp,8
    3f90:	f800283a 	ret

00003f94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3f94:	defffa04 	addi	sp,sp,-24
    3f98:	dfc00515 	stw	ra,20(sp)
    3f9c:	df000415 	stw	fp,16(sp)
    3fa0:	df000404 	addi	fp,sp,16
    3fa4:	e13fff15 	stw	r4,-4(fp)
    3fa8:	e17ffe15 	stw	r5,-8(fp)
    3fac:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3fb0:	e0bfff17 	ldw	r2,-4(fp)
    3fb4:	00c00044 	movi	r3,1
    3fb8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3fbc:	e0bfff17 	ldw	r2,-4(fp)
    3fc0:	10800017 	ldw	r2,0(r2)
    3fc4:	10800104 	addi	r2,r2,4
    3fc8:	1007883a 	mov	r3,r2
    3fcc:	e0bfff17 	ldw	r2,-4(fp)
    3fd0:	10800817 	ldw	r2,32(r2)
    3fd4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    3fd8:	e0bffe17 	ldw	r2,-8(fp)
    3fdc:	e0fffd17 	ldw	r3,-12(fp)
    3fe0:	d8000015 	stw	zero,0(sp)
    3fe4:	e1ffff17 	ldw	r7,-4(fp)
    3fe8:	01800034 	movhi	r6,0
    3fec:	31901504 	addi	r6,r6,16468
    3ff0:	180b883a 	mov	r5,r3
    3ff4:	1009883a 	mov	r4,r2
    3ff8:	00034940 	call	3494 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3ffc:	e0bfff17 	ldw	r2,-4(fp)
    4000:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    4004:	e0bfff17 	ldw	r2,-4(fp)
    4008:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    400c:	d0e01817 	ldw	r3,-32672(gp)
    4010:	e1ffff17 	ldw	r7,-4(fp)
    4014:	01800034 	movhi	r6,0
    4018:	31909804 	addi	r6,r6,16992
    401c:	180b883a 	mov	r5,r3
    4020:	1009883a 	mov	r4,r2
    4024:	00049a40 	call	49a4 <alt_alarm_start>
    4028:	1000040e 	bge	r2,zero,403c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    402c:	e0ffff17 	ldw	r3,-4(fp)
    4030:	00a00034 	movhi	r2,32768
    4034:	10bfffc4 	addi	r2,r2,-1
    4038:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    403c:	0001883a 	nop
    4040:	e037883a 	mov	sp,fp
    4044:	dfc00117 	ldw	ra,4(sp)
    4048:	df000017 	ldw	fp,0(sp)
    404c:	dec00204 	addi	sp,sp,8
    4050:	f800283a 	ret

00004054 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4054:	defff804 	addi	sp,sp,-32
    4058:	df000715 	stw	fp,28(sp)
    405c:	df000704 	addi	fp,sp,28
    4060:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4064:	e0bff917 	ldw	r2,-28(fp)
    4068:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    406c:	e0bffd17 	ldw	r2,-12(fp)
    4070:	10800017 	ldw	r2,0(r2)
    4074:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4078:	e0bffc17 	ldw	r2,-16(fp)
    407c:	10800104 	addi	r2,r2,4
    4080:	10800037 	ldwio	r2,0(r2)
    4084:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4088:	e0bffb17 	ldw	r2,-20(fp)
    408c:	1080c00c 	andi	r2,r2,768
    4090:	10006d26 	beq	r2,zero,4248 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4094:	e0bffb17 	ldw	r2,-20(fp)
    4098:	1080400c 	andi	r2,r2,256
    409c:	10003526 	beq	r2,zero,4174 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    40a0:	00800074 	movhi	r2,1
    40a4:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    40a8:	e0bffd17 	ldw	r2,-12(fp)
    40ac:	10800a17 	ldw	r2,40(r2)
    40b0:	10800044 	addi	r2,r2,1
    40b4:	1081ffcc 	andi	r2,r2,2047
    40b8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    40bc:	e0bffd17 	ldw	r2,-12(fp)
    40c0:	10800b17 	ldw	r2,44(r2)
    40c4:	e0fffa17 	ldw	r3,-24(fp)
    40c8:	18801526 	beq	r3,r2,4120 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    40cc:	e0bffc17 	ldw	r2,-16(fp)
    40d0:	10800037 	ldwio	r2,0(r2)
    40d4:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    40d8:	e0bfff17 	ldw	r2,-4(fp)
    40dc:	10a0000c 	andi	r2,r2,32768
    40e0:	10001126 	beq	r2,zero,4128 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    40e4:	e0bffd17 	ldw	r2,-12(fp)
    40e8:	10800a17 	ldw	r2,40(r2)
    40ec:	e0ffff17 	ldw	r3,-4(fp)
    40f0:	1809883a 	mov	r4,r3
    40f4:	e0fffd17 	ldw	r3,-12(fp)
    40f8:	1885883a 	add	r2,r3,r2
    40fc:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4100:	e0bffd17 	ldw	r2,-12(fp)
    4104:	10800a17 	ldw	r2,40(r2)
    4108:	10800044 	addi	r2,r2,1
    410c:	10c1ffcc 	andi	r3,r2,2047
    4110:	e0bffd17 	ldw	r2,-12(fp)
    4114:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    4118:	0001883a 	nop
      {
    411c:	003fe206 	br	40a8 <altera_avalon_jtag_uart_irq+0x54>
          break;
    4120:	0001883a 	nop
    4124:	00000106 	br	412c <altera_avalon_jtag_uart_irq+0xd8>
          break;
    4128:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    412c:	e0bfff17 	ldw	r2,-4(fp)
    4130:	10bfffec 	andhi	r2,r2,65535
    4134:	10000f26 	beq	r2,zero,4174 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4138:	e0bffd17 	ldw	r2,-12(fp)
    413c:	10c00817 	ldw	r3,32(r2)
    4140:	00bfff84 	movi	r2,-2
    4144:	1886703a 	and	r3,r3,r2
    4148:	e0bffd17 	ldw	r2,-12(fp)
    414c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4150:	e0bffc17 	ldw	r2,-16(fp)
    4154:	10800104 	addi	r2,r2,4
    4158:	1007883a 	mov	r3,r2
    415c:	e0bffd17 	ldw	r2,-12(fp)
    4160:	10800817 	ldw	r2,32(r2)
    4164:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4168:	e0bffc17 	ldw	r2,-16(fp)
    416c:	10800104 	addi	r2,r2,4
    4170:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4174:	e0bffb17 	ldw	r2,-20(fp)
    4178:	1080800c 	andi	r2,r2,512
    417c:	103fbe26 	beq	r2,zero,4078 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4180:	e0bffb17 	ldw	r2,-20(fp)
    4184:	1004d43a 	srli	r2,r2,16
    4188:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    418c:	00001406 	br	41e0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4190:	e0bffc17 	ldw	r2,-16(fp)
    4194:	e0fffd17 	ldw	r3,-12(fp)
    4198:	18c00d17 	ldw	r3,52(r3)
    419c:	e13ffd17 	ldw	r4,-12(fp)
    41a0:	20c7883a 	add	r3,r4,r3
    41a4:	18c20e03 	ldbu	r3,2104(r3)
    41a8:	18c03fcc 	andi	r3,r3,255
    41ac:	18c0201c 	xori	r3,r3,128
    41b0:	18ffe004 	addi	r3,r3,-128
    41b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    41b8:	e0bffd17 	ldw	r2,-12(fp)
    41bc:	10800d17 	ldw	r2,52(r2)
    41c0:	10800044 	addi	r2,r2,1
    41c4:	10c1ffcc 	andi	r3,r2,2047
    41c8:	e0bffd17 	ldw	r2,-12(fp)
    41cc:	10c00d15 	stw	r3,52(r2)
    41d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    41d4:	e0bffe17 	ldw	r2,-8(fp)
    41d8:	10bfffc4 	addi	r2,r2,-1
    41dc:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    41e0:	e0bffe17 	ldw	r2,-8(fp)
    41e4:	10000526 	beq	r2,zero,41fc <altera_avalon_jtag_uart_irq+0x1a8>
    41e8:	e0bffd17 	ldw	r2,-12(fp)
    41ec:	10c00d17 	ldw	r3,52(r2)
    41f0:	e0bffd17 	ldw	r2,-12(fp)
    41f4:	10800c17 	ldw	r2,48(r2)
    41f8:	18bfe51e 	bne	r3,r2,4190 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
    41fc:	e0bffe17 	ldw	r2,-8(fp)
    4200:	103f9d26 	beq	r2,zero,4078 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4204:	e0bffd17 	ldw	r2,-12(fp)
    4208:	10c00817 	ldw	r3,32(r2)
    420c:	00bfff44 	movi	r2,-3
    4210:	1886703a 	and	r3,r3,r2
    4214:	e0bffd17 	ldw	r2,-12(fp)
    4218:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    421c:	e0bffd17 	ldw	r2,-12(fp)
    4220:	10800017 	ldw	r2,0(r2)
    4224:	10800104 	addi	r2,r2,4
    4228:	1007883a 	mov	r3,r2
    422c:	e0bffd17 	ldw	r2,-12(fp)
    4230:	10800817 	ldw	r2,32(r2)
    4234:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4238:	e0bffc17 	ldw	r2,-16(fp)
    423c:	10800104 	addi	r2,r2,4
    4240:	10800037 	ldwio	r2,0(r2)
  {
    4244:	003f8c06 	br	4078 <altera_avalon_jtag_uart_irq+0x24>
      break;
    4248:	0001883a 	nop
      }
    }
  }
}
    424c:	0001883a 	nop
    4250:	e037883a 	mov	sp,fp
    4254:	df000017 	ldw	fp,0(sp)
    4258:	dec00104 	addi	sp,sp,4
    425c:	f800283a 	ret

00004260 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4260:	defffc04 	addi	sp,sp,-16
    4264:	df000315 	stw	fp,12(sp)
    4268:	df000304 	addi	fp,sp,12
    426c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4270:	e0bffd17 	ldw	r2,-12(fp)
    4274:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4278:	e0bfff17 	ldw	r2,-4(fp)
    427c:	10800017 	ldw	r2,0(r2)
    4280:	10800104 	addi	r2,r2,4
    4284:	10800037 	ldwio	r2,0(r2)
    4288:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    428c:	e0bffe17 	ldw	r2,-8(fp)
    4290:	1081000c 	andi	r2,r2,1024
    4294:	10000b26 	beq	r2,zero,42c4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4298:	e0bfff17 	ldw	r2,-4(fp)
    429c:	10800017 	ldw	r2,0(r2)
    42a0:	10800104 	addi	r2,r2,4
    42a4:	1007883a 	mov	r3,r2
    42a8:	e0bfff17 	ldw	r2,-4(fp)
    42ac:	10800817 	ldw	r2,32(r2)
    42b0:	10810014 	ori	r2,r2,1024
    42b4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    42b8:	e0bfff17 	ldw	r2,-4(fp)
    42bc:	10000915 	stw	zero,36(r2)
    42c0:	00000a06 	br	42ec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    42c4:	e0bfff17 	ldw	r2,-4(fp)
    42c8:	10c00917 	ldw	r3,36(r2)
    42cc:	00a00034 	movhi	r2,32768
    42d0:	10bfff04 	addi	r2,r2,-4
    42d4:	10c00536 	bltu	r2,r3,42ec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    42d8:	e0bfff17 	ldw	r2,-4(fp)
    42dc:	10800917 	ldw	r2,36(r2)
    42e0:	10c00044 	addi	r3,r2,1
    42e4:	e0bfff17 	ldw	r2,-4(fp)
    42e8:	10c00915 	stw	r3,36(r2)
    42ec:	d0a01817 	ldw	r2,-32672(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    42f0:	e037883a 	mov	sp,fp
    42f4:	df000017 	ldw	fp,0(sp)
    42f8:	dec00104 	addi	sp,sp,4
    42fc:	f800283a 	ret

00004300 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    4300:	defffd04 	addi	sp,sp,-12
    4304:	df000215 	stw	fp,8(sp)
    4308:	df000204 	addi	fp,sp,8
    430c:	e13fff15 	stw	r4,-4(fp)
    4310:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4314:	00000506 	br	432c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    4318:	e0bffe17 	ldw	r2,-8(fp)
    431c:	1090000c 	andi	r2,r2,16384
    4320:	10000226 	beq	r2,zero,432c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    4324:	00bffd44 	movi	r2,-11
    4328:	00000b06 	br	4358 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	10c00d17 	ldw	r3,52(r2)
    4334:	e0bfff17 	ldw	r2,-4(fp)
    4338:	10800c17 	ldw	r2,48(r2)
    433c:	18800526 	beq	r3,r2,4354 <altera_avalon_jtag_uart_close+0x54>
    4340:	e0bfff17 	ldw	r2,-4(fp)
    4344:	10c00917 	ldw	r3,36(r2)
    4348:	e0bfff17 	ldw	r2,-4(fp)
    434c:	10800117 	ldw	r2,4(r2)
    4350:	18bff136 	bltu	r3,r2,4318 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    4354:	0005883a 	mov	r2,zero
}
    4358:	e037883a 	mov	sp,fp
    435c:	df000017 	ldw	fp,0(sp)
    4360:	dec00104 	addi	sp,sp,4
    4364:	f800283a 	ret

00004368 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    4368:	defffa04 	addi	sp,sp,-24
    436c:	df000515 	stw	fp,20(sp)
    4370:	df000504 	addi	fp,sp,20
    4374:	e13ffd15 	stw	r4,-12(fp)
    4378:	e17ffc15 	stw	r5,-16(fp)
    437c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    4380:	00bff9c4 	movi	r2,-25
    4384:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    4388:	e0bffc17 	ldw	r2,-16(fp)
    438c:	109a8060 	cmpeqi	r2,r2,27137
    4390:	1000041e 	bne	r2,zero,43a4 <altera_avalon_jtag_uart_ioctl+0x3c>
    4394:	e0bffc17 	ldw	r2,-16(fp)
    4398:	109a80a0 	cmpeqi	r2,r2,27138
    439c:	1000181e 	bne	r2,zero,4400 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    43a0:	00002906 	br	4448 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    43a4:	e0bffd17 	ldw	r2,-12(fp)
    43a8:	10c00117 	ldw	r3,4(r2)
    43ac:	00a00034 	movhi	r2,32768
    43b0:	10bfffc4 	addi	r2,r2,-1
    43b4:	18802126 	beq	r3,r2,443c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    43b8:	e0bffb17 	ldw	r2,-20(fp)
    43bc:	10800017 	ldw	r2,0(r2)
    43c0:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    43c4:	e0bffe17 	ldw	r2,-8(fp)
    43c8:	10800090 	cmplti	r2,r2,2
    43cc:	1000061e 	bne	r2,zero,43e8 <altera_avalon_jtag_uart_ioctl+0x80>
    43d0:	e0fffe17 	ldw	r3,-8(fp)
    43d4:	00a00034 	movhi	r2,32768
    43d8:	10bfffc4 	addi	r2,r2,-1
    43dc:	18800226 	beq	r3,r2,43e8 <altera_avalon_jtag_uart_ioctl+0x80>
    43e0:	e0bffe17 	ldw	r2,-8(fp)
    43e4:	00000206 	br	43f0 <altera_avalon_jtag_uart_ioctl+0x88>
    43e8:	00a00034 	movhi	r2,32768
    43ec:	10bfff84 	addi	r2,r2,-2
    43f0:	e0fffd17 	ldw	r3,-12(fp)
    43f4:	18800115 	stw	r2,4(r3)
      rc = 0;
    43f8:	e03fff15 	stw	zero,-4(fp)
    break;
    43fc:	00000f06 	br	443c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    4400:	e0bffd17 	ldw	r2,-12(fp)
    4404:	10c00117 	ldw	r3,4(r2)
    4408:	00a00034 	movhi	r2,32768
    440c:	10bfffc4 	addi	r2,r2,-1
    4410:	18800c26 	beq	r3,r2,4444 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4414:	e0bffd17 	ldw	r2,-12(fp)
    4418:	10c00917 	ldw	r3,36(r2)
    441c:	e0bffd17 	ldw	r2,-12(fp)
    4420:	10800117 	ldw	r2,4(r2)
    4424:	1885803a 	cmpltu	r2,r3,r2
    4428:	10c03fcc 	andi	r3,r2,255
    442c:	e0bffb17 	ldw	r2,-20(fp)
    4430:	10c00015 	stw	r3,0(r2)
      rc = 0;
    4434:	e03fff15 	stw	zero,-4(fp)
    break;
    4438:	00000206 	br	4444 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    443c:	0001883a 	nop
    4440:	00000106 	br	4448 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    4444:	0001883a 	nop
  }

  return rc;
    4448:	e0bfff17 	ldw	r2,-4(fp)
}
    444c:	e037883a 	mov	sp,fp
    4450:	df000017 	ldw	fp,0(sp)
    4454:	dec00104 	addi	sp,sp,4
    4458:	f800283a 	ret

0000445c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    445c:	defff304 	addi	sp,sp,-52
    4460:	dfc00c15 	stw	ra,48(sp)
    4464:	df000b15 	stw	fp,44(sp)
    4468:	df000b04 	addi	fp,sp,44
    446c:	e13ff815 	stw	r4,-32(fp)
    4470:	e17ff715 	stw	r5,-36(fp)
    4474:	e1bff615 	stw	r6,-40(fp)
    4478:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
    447c:	e0bff717 	ldw	r2,-36(fp)
    4480:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4484:	00004706 	br	45a4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    4488:	e0bff817 	ldw	r2,-32(fp)
    448c:	10800a17 	ldw	r2,40(r2)
    4490:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    4494:	e0bff817 	ldw	r2,-32(fp)
    4498:	10800b17 	ldw	r2,44(r2)
    449c:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    44a0:	e0fffd17 	ldw	r3,-12(fp)
    44a4:	e0bffc17 	ldw	r2,-16(fp)
    44a8:	18800536 	bltu	r3,r2,44c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    44ac:	e0fffd17 	ldw	r3,-12(fp)
    44b0:	e0bffc17 	ldw	r2,-16(fp)
    44b4:	1885c83a 	sub	r2,r3,r2
    44b8:	e0bffe15 	stw	r2,-8(fp)
    44bc:	00000406 	br	44d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    44c0:	00c20004 	movi	r3,2048
    44c4:	e0bffc17 	ldw	r2,-16(fp)
    44c8:	1885c83a 	sub	r2,r3,r2
    44cc:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    44d0:	e0bffe17 	ldw	r2,-8(fp)
    44d4:	10001e26 	beq	r2,zero,4550 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    44d8:	e0fff617 	ldw	r3,-40(fp)
    44dc:	e0bffe17 	ldw	r2,-8(fp)
    44e0:	1880022e 	bgeu	r3,r2,44ec <altera_avalon_jtag_uart_read+0x90>
        n = space;
    44e4:	e0bff617 	ldw	r2,-40(fp)
    44e8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    44ec:	e0bff817 	ldw	r2,-32(fp)
    44f0:	10c00e04 	addi	r3,r2,56
    44f4:	e0bffc17 	ldw	r2,-16(fp)
    44f8:	1885883a 	add	r2,r3,r2
    44fc:	e1bffe17 	ldw	r6,-8(fp)
    4500:	100b883a 	mov	r5,r2
    4504:	e13fff17 	ldw	r4,-4(fp)
    4508:	00017f80 	call	17f8 <memcpy>
      ptr   += n;
    450c:	e0ffff17 	ldw	r3,-4(fp)
    4510:	e0bffe17 	ldw	r2,-8(fp)
    4514:	1885883a 	add	r2,r3,r2
    4518:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    451c:	e0fff617 	ldw	r3,-40(fp)
    4520:	e0bffe17 	ldw	r2,-8(fp)
    4524:	1885c83a 	sub	r2,r3,r2
    4528:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    452c:	e0fffc17 	ldw	r3,-16(fp)
    4530:	e0bffe17 	ldw	r2,-8(fp)
    4534:	1885883a 	add	r2,r3,r2
    4538:	10c1ffcc 	andi	r3,r2,2047
    453c:	e0bff817 	ldw	r2,-32(fp)
    4540:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4544:	e0bff617 	ldw	r2,-40(fp)
    4548:	00bfcf16 	blt	zero,r2,4488 <altera_avalon_jtag_uart_read+0x2c>
    454c:	00000106 	br	4554 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
    4550:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    4554:	e0ffff17 	ldw	r3,-4(fp)
    4558:	e0bff717 	ldw	r2,-36(fp)
    455c:	1880141e 	bne	r3,r2,45b0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4560:	e0bff517 	ldw	r2,-44(fp)
    4564:	1090000c 	andi	r2,r2,16384
    4568:	1000131e 	bne	r2,zero,45b8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    456c:	0001883a 	nop
    4570:	e0bff817 	ldw	r2,-32(fp)
    4574:	10800a17 	ldw	r2,40(r2)
    4578:	e0fffd17 	ldw	r3,-12(fp)
    457c:	1880051e 	bne	r3,r2,4594 <altera_avalon_jtag_uart_read+0x138>
    4580:	e0bff817 	ldw	r2,-32(fp)
    4584:	10c00917 	ldw	r3,36(r2)
    4588:	e0bff817 	ldw	r2,-32(fp)
    458c:	10800117 	ldw	r2,4(r2)
    4590:	18bff736 	bltu	r3,r2,4570 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    4594:	e0bff817 	ldw	r2,-32(fp)
    4598:	10800a17 	ldw	r2,40(r2)
    459c:	e0fffd17 	ldw	r3,-12(fp)
    45a0:	18800726 	beq	r3,r2,45c0 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
    45a4:	e0bff617 	ldw	r2,-40(fp)
    45a8:	00bfb716 	blt	zero,r2,4488 <altera_avalon_jtag_uart_read+0x2c>
    45ac:	00000506 	br	45c4 <altera_avalon_jtag_uart_read+0x168>
      break;
    45b0:	0001883a 	nop
    45b4:	00000306 	br	45c4 <altera_avalon_jtag_uart_read+0x168>
      break;
    45b8:	0001883a 	nop
    45bc:	00000106 	br	45c4 <altera_avalon_jtag_uart_read+0x168>
      break;
    45c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    45c4:	e0ffff17 	ldw	r3,-4(fp)
    45c8:	e0bff717 	ldw	r2,-36(fp)
    45cc:	18801926 	beq	r3,r2,4634 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
    45d0:	0005303a 	rdctl	r2,status
    45d4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    45d8:	e0fff917 	ldw	r3,-28(fp)
    45dc:	00bfff84 	movi	r2,-2
    45e0:	1884703a 	and	r2,r3,r2
    45e4:	1001703a 	wrctl	status,r2
  return context;
    45e8:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    45ec:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    45f0:	e0bff817 	ldw	r2,-32(fp)
    45f4:	10800817 	ldw	r2,32(r2)
    45f8:	10c00054 	ori	r3,r2,1
    45fc:	e0bff817 	ldw	r2,-32(fp)
    4600:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4604:	e0bff817 	ldw	r2,-32(fp)
    4608:	10800017 	ldw	r2,0(r2)
    460c:	10800104 	addi	r2,r2,4
    4610:	1007883a 	mov	r3,r2
    4614:	e0bff817 	ldw	r2,-32(fp)
    4618:	10800817 	ldw	r2,32(r2)
    461c:	18800035 	stwio	r2,0(r3)
    4620:	e0bffb17 	ldw	r2,-20(fp)
    4624:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    4628:	e0bffa17 	ldw	r2,-24(fp)
    462c:	1001703a 	wrctl	status,r2
}
    4630:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4634:	e0ffff17 	ldw	r3,-4(fp)
    4638:	e0bff717 	ldw	r2,-36(fp)
    463c:	18800426 	beq	r3,r2,4650 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
    4640:	e0ffff17 	ldw	r3,-4(fp)
    4644:	e0bff717 	ldw	r2,-36(fp)
    4648:	1885c83a 	sub	r2,r3,r2
    464c:	00000606 	br	4668 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    4650:	e0bff517 	ldw	r2,-44(fp)
    4654:	1090000c 	andi	r2,r2,16384
    4658:	10000226 	beq	r2,zero,4664 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
    465c:	00bffd44 	movi	r2,-11
    4660:	00000106 	br	4668 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    4664:	00bffec4 	movi	r2,-5
}
    4668:	e037883a 	mov	sp,fp
    466c:	dfc00117 	ldw	ra,4(sp)
    4670:	df000017 	ldw	fp,0(sp)
    4674:	dec00204 	addi	sp,sp,8
    4678:	f800283a 	ret

0000467c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    467c:	defff304 	addi	sp,sp,-52
    4680:	dfc00c15 	stw	ra,48(sp)
    4684:	df000b15 	stw	fp,44(sp)
    4688:	df000b04 	addi	fp,sp,44
    468c:	e13ff815 	stw	r4,-32(fp)
    4690:	e17ff715 	stw	r5,-36(fp)
    4694:	e1bff615 	stw	r6,-40(fp)
    4698:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    469c:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    46a0:	e0bff717 	ldw	r2,-36(fp)
    46a4:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    46a8:	00003706 	br	4788 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    46ac:	e0bff817 	ldw	r2,-32(fp)
    46b0:	10800c17 	ldw	r2,48(r2)
    46b4:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    46b8:	e0bff817 	ldw	r2,-32(fp)
    46bc:	10800d17 	ldw	r2,52(r2)
    46c0:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    46c4:	e0fffc17 	ldw	r3,-16(fp)
    46c8:	e0bfff17 	ldw	r2,-4(fp)
    46cc:	1880062e 	bgeu	r3,r2,46e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    46d0:	e0ffff17 	ldw	r3,-4(fp)
    46d4:	e0bffc17 	ldw	r2,-16(fp)
    46d8:	1885c83a 	sub	r2,r3,r2
    46dc:	10bfffc4 	addi	r2,r2,-1
    46e0:	e0bffe15 	stw	r2,-8(fp)
    46e4:	00000b06 	br	4714 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    46e8:	e0bfff17 	ldw	r2,-4(fp)
    46ec:	10000526 	beq	r2,zero,4704 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    46f0:	00c20004 	movi	r3,2048
    46f4:	e0bffc17 	ldw	r2,-16(fp)
    46f8:	1885c83a 	sub	r2,r3,r2
    46fc:	e0bffe15 	stw	r2,-8(fp)
    4700:	00000406 	br	4714 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4704:	00c1ffc4 	movi	r3,2047
    4708:	e0bffc17 	ldw	r2,-16(fp)
    470c:	1885c83a 	sub	r2,r3,r2
    4710:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    4714:	e0bffe17 	ldw	r2,-8(fp)
    4718:	10001e26 	beq	r2,zero,4794 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    471c:	e0fff617 	ldw	r3,-40(fp)
    4720:	e0bffe17 	ldw	r2,-8(fp)
    4724:	1880022e 	bgeu	r3,r2,4730 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4728:	e0bff617 	ldw	r2,-40(fp)
    472c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4730:	e0bff817 	ldw	r2,-32(fp)
    4734:	10c20e04 	addi	r3,r2,2104
    4738:	e0bffc17 	ldw	r2,-16(fp)
    473c:	1885883a 	add	r2,r3,r2
    4740:	e1bffe17 	ldw	r6,-8(fp)
    4744:	e17ff717 	ldw	r5,-36(fp)
    4748:	1009883a 	mov	r4,r2
    474c:	00017f80 	call	17f8 <memcpy>
      ptr   += n;
    4750:	e0fff717 	ldw	r3,-36(fp)
    4754:	e0bffe17 	ldw	r2,-8(fp)
    4758:	1885883a 	add	r2,r3,r2
    475c:	e0bff715 	stw	r2,-36(fp)
      count -= n;
    4760:	e0fff617 	ldw	r3,-40(fp)
    4764:	e0bffe17 	ldw	r2,-8(fp)
    4768:	1885c83a 	sub	r2,r3,r2
    476c:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4770:	e0fffc17 	ldw	r3,-16(fp)
    4774:	e0bffe17 	ldw	r2,-8(fp)
    4778:	1885883a 	add	r2,r3,r2
    477c:	10c1ffcc 	andi	r3,r2,2047
    4780:	e0bff817 	ldw	r2,-32(fp)
    4784:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
    4788:	e0bff617 	ldw	r2,-40(fp)
    478c:	00bfc716 	blt	zero,r2,46ac <altera_avalon_jtag_uart_write+0x30>
    4790:	00000106 	br	4798 <altera_avalon_jtag_uart_write+0x11c>
        break;
    4794:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    4798:	0005303a 	rdctl	r2,status
    479c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    47a0:	e0fff917 	ldw	r3,-28(fp)
    47a4:	00bfff84 	movi	r2,-2
    47a8:	1884703a 	and	r2,r3,r2
    47ac:	1001703a 	wrctl	status,r2
  return context;
    47b0:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    47b4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    47b8:	e0bff817 	ldw	r2,-32(fp)
    47bc:	10800817 	ldw	r2,32(r2)
    47c0:	10c00094 	ori	r3,r2,2
    47c4:	e0bff817 	ldw	r2,-32(fp)
    47c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    47cc:	e0bff817 	ldw	r2,-32(fp)
    47d0:	10800017 	ldw	r2,0(r2)
    47d4:	10800104 	addi	r2,r2,4
    47d8:	1007883a 	mov	r3,r2
    47dc:	e0bff817 	ldw	r2,-32(fp)
    47e0:	10800817 	ldw	r2,32(r2)
    47e4:	18800035 	stwio	r2,0(r3)
    47e8:	e0bffb17 	ldw	r2,-20(fp)
    47ec:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    47f0:	e0bffa17 	ldw	r2,-24(fp)
    47f4:	1001703a 	wrctl	status,r2
}
    47f8:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    47fc:	e0bff617 	ldw	r2,-40(fp)
    4800:	0080100e 	bge	zero,r2,4844 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    4804:	e0bff517 	ldw	r2,-44(fp)
    4808:	1090000c 	andi	r2,r2,16384
    480c:	1000101e 	bne	r2,zero,4850 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4810:	0001883a 	nop
    4814:	e0bff817 	ldw	r2,-32(fp)
    4818:	10800d17 	ldw	r2,52(r2)
    481c:	e0ffff17 	ldw	r3,-4(fp)
    4820:	1880051e 	bne	r3,r2,4838 <altera_avalon_jtag_uart_write+0x1bc>
    4824:	e0bff817 	ldw	r2,-32(fp)
    4828:	10c00917 	ldw	r3,36(r2)
    482c:	e0bff817 	ldw	r2,-32(fp)
    4830:	10800117 	ldw	r2,4(r2)
    4834:	18bff736 	bltu	r3,r2,4814 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4838:	e0bff817 	ldw	r2,-32(fp)
    483c:	10800917 	ldw	r2,36(r2)
    4840:	1000051e 	bne	r2,zero,4858 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
    4844:	e0bff617 	ldw	r2,-40(fp)
    4848:	00bfcf16 	blt	zero,r2,4788 <altera_avalon_jtag_uart_write+0x10c>
    484c:	00000306 	br	485c <altera_avalon_jtag_uart_write+0x1e0>
        break;
    4850:	0001883a 	nop
    4854:	00000106 	br	485c <altera_avalon_jtag_uart_write+0x1e0>
         break;
    4858:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    485c:	e0fff717 	ldw	r3,-36(fp)
    4860:	e0bffd17 	ldw	r2,-12(fp)
    4864:	18800426 	beq	r3,r2,4878 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
    4868:	e0fff717 	ldw	r3,-36(fp)
    486c:	e0bffd17 	ldw	r2,-12(fp)
    4870:	1885c83a 	sub	r2,r3,r2
    4874:	00000606 	br	4890 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
    4878:	e0bff517 	ldw	r2,-44(fp)
    487c:	1090000c 	andi	r2,r2,16384
    4880:	10000226 	beq	r2,zero,488c <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
    4884:	00bffd44 	movi	r2,-11
    4888:	00000106 	br	4890 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    488c:	00bffec4 	movi	r2,-5
}
    4890:	e037883a 	mov	sp,fp
    4894:	dfc00117 	ldw	ra,4(sp)
    4898:	df000017 	ldw	fp,0(sp)
    489c:	dec00204 	addi	sp,sp,8
    48a0:	f800283a 	ret

000048a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    48a4:	defffa04 	addi	sp,sp,-24
    48a8:	dfc00515 	stw	ra,20(sp)
    48ac:	df000415 	stw	fp,16(sp)
    48b0:	df000404 	addi	fp,sp,16
    48b4:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    48b8:	0007883a 	mov	r3,zero
    48bc:	e0bffc17 	ldw	r2,-16(fp)
    48c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    48c4:	e0bffc17 	ldw	r2,-16(fp)
    48c8:	10800104 	addi	r2,r2,4
    48cc:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    48d0:	0005303a 	rdctl	r2,status
    48d4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    48d8:	e0fffd17 	ldw	r3,-12(fp)
    48dc:	00bfff84 	movi	r2,-2
    48e0:	1884703a 	and	r2,r3,r2
    48e4:	1001703a 	wrctl	status,r2
  return context;
    48e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    48ec:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    48f0:	00051340 	call	5134 <alt_tick>
    48f4:	e0bfff17 	ldw	r2,-4(fp)
    48f8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    48fc:	e0bffe17 	ldw	r2,-8(fp)
    4900:	1001703a 	wrctl	status,r2
}
    4904:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    4908:	0001883a 	nop
    490c:	e037883a 	mov	sp,fp
    4910:	dfc00117 	ldw	ra,4(sp)
    4914:	df000017 	ldw	fp,0(sp)
    4918:	dec00204 	addi	sp,sp,8
    491c:	f800283a 	ret

00004920 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4920:	defff804 	addi	sp,sp,-32
    4924:	dfc00715 	stw	ra,28(sp)
    4928:	df000615 	stw	fp,24(sp)
    492c:	df000604 	addi	fp,sp,24
    4930:	e13ffe15 	stw	r4,-8(fp)
    4934:	e17ffd15 	stw	r5,-12(fp)
    4938:	e1bffc15 	stw	r6,-16(fp)
    493c:	e1fffb15 	stw	r7,-20(fp)
    4940:	e0bffb17 	ldw	r2,-20(fp)
    4944:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4948:	d0a01817 	ldw	r2,-32672(gp)
    494c:	1000031e 	bne	r2,zero,495c <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    4950:	e0bfff17 	ldw	r2,-4(fp)
    4954:	d0a01815 	stw	r2,-32672(gp)
    return 0;
    4958:	00000106 	br	4960 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    495c:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4960:	e0bffe17 	ldw	r2,-8(fp)
    4964:	10800104 	addi	r2,r2,4
    4968:	00c001c4 	movi	r3,7
    496c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4970:	d8000015 	stw	zero,0(sp)
    4974:	e1fffe17 	ldw	r7,-8(fp)
    4978:	01800034 	movhi	r6,0
    497c:	31922904 	addi	r6,r6,18596
    4980:	e17ffc17 	ldw	r5,-16(fp)
    4984:	e13ffd17 	ldw	r4,-12(fp)
    4988:	00034940 	call	3494 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    498c:	0001883a 	nop
    4990:	e037883a 	mov	sp,fp
    4994:	dfc00117 	ldw	ra,4(sp)
    4998:	df000017 	ldw	fp,0(sp)
    499c:	dec00204 	addi	sp,sp,8
    49a0:	f800283a 	ret

000049a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    49a4:	defff504 	addi	sp,sp,-44
    49a8:	df000a15 	stw	fp,40(sp)
    49ac:	df000a04 	addi	fp,sp,40
    49b0:	e13ff915 	stw	r4,-28(fp)
    49b4:	e17ff815 	stw	r5,-32(fp)
    49b8:	e1bff715 	stw	r6,-36(fp)
    49bc:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    49c0:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
    49c4:	d0a01817 	ldw	r2,-32672(gp)
  
  if (alt_ticks_per_second ())
    49c8:	10003e26 	beq	r2,zero,4ac4 <alt_alarm_start+0x120>
  {
    if (alarm)
    49cc:	e0bff917 	ldw	r2,-28(fp)
    49d0:	10003a26 	beq	r2,zero,4abc <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
    49d4:	e0bff917 	ldw	r2,-28(fp)
    49d8:	e0fff717 	ldw	r3,-36(fp)
    49dc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    49e0:	e0bff917 	ldw	r2,-28(fp)
    49e4:	e0fff617 	ldw	r3,-40(fp)
    49e8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    49ec:	0005303a 	rdctl	r2,status
    49f0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49f4:	e0fffd17 	ldw	r3,-12(fp)
    49f8:	00bfff84 	movi	r2,-2
    49fc:	1884703a 	and	r2,r3,r2
    4a00:	1001703a 	wrctl	status,r2
  return context;
    4a04:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
    4a08:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4a0c:	d0a01917 	ldw	r2,-32668(gp)
      
      current_nticks = alt_nticks();
    4a10:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4a14:	e0fff817 	ldw	r3,-32(fp)
    4a18:	e0bfff17 	ldw	r2,-4(fp)
    4a1c:	1885883a 	add	r2,r3,r2
    4a20:	10c00044 	addi	r3,r2,1
    4a24:	e0bff917 	ldw	r2,-28(fp)
    4a28:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    4a2c:	e0bff917 	ldw	r2,-28(fp)
    4a30:	10c00217 	ldw	r3,8(r2)
    4a34:	e0bfff17 	ldw	r2,-4(fp)
    4a38:	1880042e 	bgeu	r3,r2,4a4c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    4a3c:	e0bff917 	ldw	r2,-28(fp)
    4a40:	00c00044 	movi	r3,1
    4a44:	10c00405 	stb	r3,16(r2)
    4a48:	00000206 	br	4a54 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    4a4c:	e0bff917 	ldw	r2,-28(fp)
    4a50:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    4a54:	e0bff917 	ldw	r2,-28(fp)
    4a58:	d0e00c04 	addi	r3,gp,-32720
    4a5c:	e0fffb15 	stw	r3,-20(fp)
    4a60:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4a64:	e0bffa17 	ldw	r2,-24(fp)
    4a68:	e0fffb17 	ldw	r3,-20(fp)
    4a6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4a70:	e0bffb17 	ldw	r2,-20(fp)
    4a74:	10c00017 	ldw	r3,0(r2)
    4a78:	e0bffa17 	ldw	r2,-24(fp)
    4a7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4a80:	e0bffb17 	ldw	r2,-20(fp)
    4a84:	10800017 	ldw	r2,0(r2)
    4a88:	e0fffa17 	ldw	r3,-24(fp)
    4a8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4a90:	e0bffb17 	ldw	r2,-20(fp)
    4a94:	e0fffa17 	ldw	r3,-24(fp)
    4a98:	10c00015 	stw	r3,0(r2)
}
    4a9c:	0001883a 	nop
    4aa0:	e0bffe17 	ldw	r2,-8(fp)
    4aa4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4aa8:	e0bffc17 	ldw	r2,-16(fp)
    4aac:	1001703a 	wrctl	status,r2
}
    4ab0:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
    4ab4:	0005883a 	mov	r2,zero
    4ab8:	00000306 	br	4ac8 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
    4abc:	00bffa84 	movi	r2,-22
    4ac0:	00000106 	br	4ac8 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
    4ac4:	00bfde84 	movi	r2,-134
  }
}
    4ac8:	e037883a 	mov	sp,fp
    4acc:	df000017 	ldw	fp,0(sp)
    4ad0:	dec00104 	addi	sp,sp,4
    4ad4:	f800283a 	ret

00004ad8 <alt_get_errno>:
{
    4ad8:	defffe04 	addi	sp,sp,-8
    4adc:	dfc00115 	stw	ra,4(sp)
    4ae0:	df000015 	stw	fp,0(sp)
    4ae4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4ae8:	d0a00917 	ldw	r2,-32732(gp)
    4aec:	10000326 	beq	r2,zero,4afc <alt_get_errno+0x24>
    4af0:	d0a00917 	ldw	r2,-32732(gp)
    4af4:	103ee83a 	callr	r2
    4af8:	00000106 	br	4b00 <alt_get_errno+0x28>
    4afc:	d0a01204 	addi	r2,gp,-32696
}
    4b00:	e037883a 	mov	sp,fp
    4b04:	dfc00117 	ldw	ra,4(sp)
    4b08:	df000017 	ldw	fp,0(sp)
    4b0c:	dec00204 	addi	sp,sp,8
    4b10:	f800283a 	ret

00004b14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4b14:	defffa04 	addi	sp,sp,-24
    4b18:	dfc00515 	stw	ra,20(sp)
    4b1c:	df000415 	stw	fp,16(sp)
    4b20:	df000404 	addi	fp,sp,16
    4b24:	e13ffd15 	stw	r4,-12(fp)
    4b28:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4b2c:	e0bffd17 	ldw	r2,-12(fp)
    4b30:	10000326 	beq	r2,zero,4b40 <alt_dev_llist_insert+0x2c>
    4b34:	e0bffd17 	ldw	r2,-12(fp)
    4b38:	10800217 	ldw	r2,8(r2)
    4b3c:	1000061e 	bne	r2,zero,4b58 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    4b40:	0004ad80 	call	4ad8 <alt_get_errno>
    4b44:	1007883a 	mov	r3,r2
    4b48:	00800584 	movi	r2,22
    4b4c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    4b50:	00bffa84 	movi	r2,-22
    4b54:	00001406 	br	4ba8 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4b58:	e0bffd17 	ldw	r2,-12(fp)
    4b5c:	e0fffc17 	ldw	r3,-16(fp)
    4b60:	e0ffff15 	stw	r3,-4(fp)
    4b64:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    4b68:	e0bffe17 	ldw	r2,-8(fp)
    4b6c:	e0ffff17 	ldw	r3,-4(fp)
    4b70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4b74:	e0bfff17 	ldw	r2,-4(fp)
    4b78:	10c00017 	ldw	r3,0(r2)
    4b7c:	e0bffe17 	ldw	r2,-8(fp)
    4b80:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    4b84:	e0bfff17 	ldw	r2,-4(fp)
    4b88:	10800017 	ldw	r2,0(r2)
    4b8c:	e0fffe17 	ldw	r3,-8(fp)
    4b90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4b94:	e0bfff17 	ldw	r2,-4(fp)
    4b98:	e0fffe17 	ldw	r3,-8(fp)
    4b9c:	10c00015 	stw	r3,0(r2)
}
    4ba0:	0001883a 	nop

  return 0;  
    4ba4:	0005883a 	mov	r2,zero
}
    4ba8:	e037883a 	mov	sp,fp
    4bac:	dfc00117 	ldw	ra,4(sp)
    4bb0:	df000017 	ldw	fp,0(sp)
    4bb4:	dec00204 	addi	sp,sp,8
    4bb8:	f800283a 	ret

00004bbc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4bbc:	defffd04 	addi	sp,sp,-12
    4bc0:	dfc00215 	stw	ra,8(sp)
    4bc4:	df000115 	stw	fp,4(sp)
    4bc8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4bcc:	00800034 	movhi	r2,0
    4bd0:	1095cf04 	addi	r2,r2,22332
    4bd4:	e0bfff15 	stw	r2,-4(fp)
    4bd8:	00000606 	br	4bf4 <_do_ctors+0x38>
        (*ctor) (); 
    4bdc:	e0bfff17 	ldw	r2,-4(fp)
    4be0:	10800017 	ldw	r2,0(r2)
    4be4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4be8:	e0bfff17 	ldw	r2,-4(fp)
    4bec:	10bfff04 	addi	r2,r2,-4
    4bf0:	e0bfff15 	stw	r2,-4(fp)
    4bf4:	e0ffff17 	ldw	r3,-4(fp)
    4bf8:	00800034 	movhi	r2,0
    4bfc:	1095d004 	addi	r2,r2,22336
    4c00:	18bff62e 	bgeu	r3,r2,4bdc <_do_ctors+0x20>
}
    4c04:	0001883a 	nop
    4c08:	0001883a 	nop
    4c0c:	e037883a 	mov	sp,fp
    4c10:	dfc00117 	ldw	ra,4(sp)
    4c14:	df000017 	ldw	fp,0(sp)
    4c18:	dec00204 	addi	sp,sp,8
    4c1c:	f800283a 	ret

00004c20 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4c20:	defffd04 	addi	sp,sp,-12
    4c24:	dfc00215 	stw	ra,8(sp)
    4c28:	df000115 	stw	fp,4(sp)
    4c2c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4c30:	00800034 	movhi	r2,0
    4c34:	1095cf04 	addi	r2,r2,22332
    4c38:	e0bfff15 	stw	r2,-4(fp)
    4c3c:	00000606 	br	4c58 <_do_dtors+0x38>
        (*dtor) (); 
    4c40:	e0bfff17 	ldw	r2,-4(fp)
    4c44:	10800017 	ldw	r2,0(r2)
    4c48:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4c4c:	e0bfff17 	ldw	r2,-4(fp)
    4c50:	10bfff04 	addi	r2,r2,-4
    4c54:	e0bfff15 	stw	r2,-4(fp)
    4c58:	e0ffff17 	ldw	r3,-4(fp)
    4c5c:	00800034 	movhi	r2,0
    4c60:	1095d004 	addi	r2,r2,22336
    4c64:	18bff62e 	bgeu	r3,r2,4c40 <_do_dtors+0x20>
}
    4c68:	0001883a 	nop
    4c6c:	0001883a 	nop
    4c70:	e037883a 	mov	sp,fp
    4c74:	dfc00117 	ldw	ra,4(sp)
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00204 	addi	sp,sp,8
    4c80:	f800283a 	ret

00004c84 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    4c84:	defffe04 	addi	sp,sp,-8
    4c88:	df000115 	stw	fp,4(sp)
    4c8c:	df000104 	addi	fp,sp,4
    4c90:	e13fff15 	stw	r4,-4(fp)
    4c94:	e0bfff17 	ldw	r2,-4(fp)
    4c98:	10bffe84 	addi	r2,r2,-6
    4c9c:	10c00428 	cmpgeui	r3,r2,16
    4ca0:	1800191e 	bne	r3,zero,4d08 <alt_exception_cause_generated_bad_addr+0x84>
    4ca4:	100690ba 	slli	r3,r2,2
    4ca8:	00800034 	movhi	r2,0
    4cac:	1885883a 	add	r2,r3,r2
    4cb0:	10932e17 	ldw	r2,19640(r2)
    4cb4:	1000683a 	jmp	r2
    4cb8:	00004cf8 	rdprs	zero,zero,307
    4cbc:	00004cf8 	rdprs	zero,zero,307
    4cc0:	00004d08 	cmpgei	zero,zero,308
    4cc4:	00004d08 	cmpgei	zero,zero,308
    4cc8:	00004d08 	cmpgei	zero,zero,308
    4ccc:	00004cf8 	rdprs	zero,zero,307
    4cd0:	00004d00 	call	4d0 <_puts_r+0x90>
    4cd4:	00004d08 	cmpgei	zero,zero,308
    4cd8:	00004cf8 	rdprs	zero,zero,307
    4cdc:	00004cf8 	rdprs	zero,zero,307
    4ce0:	00004d08 	cmpgei	zero,zero,308
    4ce4:	00004cf8 	rdprs	zero,zero,307
    4ce8:	00004d00 	call	4d0 <_puts_r+0x90>
    4cec:	00004d08 	cmpgei	zero,zero,308
    4cf0:	00004d08 	cmpgei	zero,zero,308
    4cf4:	00004cf8 	rdprs	zero,zero,307
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    4cf8:	00800044 	movi	r2,1
    4cfc:	00000306 	br	4d0c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    4d00:	0005883a 	mov	r2,zero
    4d04:	00000106 	br	4d0c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    4d08:	0005883a 	mov	r2,zero
  }
}
    4d0c:	e037883a 	mov	sp,fp
    4d10:	df000017 	ldw	fp,0(sp)
    4d14:	dec00104 	addi	sp,sp,4
    4d18:	f800283a 	ret

00004d1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4d1c:	defff904 	addi	sp,sp,-28
    4d20:	dfc00615 	stw	ra,24(sp)
    4d24:	df000515 	stw	fp,20(sp)
    4d28:	df000504 	addi	fp,sp,20
    4d2c:	e13ffe15 	stw	r4,-8(fp)
    4d30:	e17ffd15 	stw	r5,-12(fp)
    4d34:	e1bffc15 	stw	r6,-16(fp)
    4d38:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    4d3c:	e1bffb17 	ldw	r6,-20(fp)
    4d40:	e17ffc17 	ldw	r5,-16(fp)
    4d44:	e13ffd17 	ldw	r4,-12(fp)
    4d48:	0004f3c0 	call	4f3c <open>
    4d4c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    4d50:	e0bfff17 	ldw	r2,-4(fp)
    4d54:	10001716 	blt	r2,zero,4db4 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
    4d58:	e0bfff17 	ldw	r2,-4(fp)
    4d5c:	10c00324 	muli	r3,r2,12
    4d60:	00800034 	movhi	r2,0
    4d64:	1885883a 	add	r2,r3,r2
    4d68:	10d7f317 	ldw	r3,24524(r2)
    4d6c:	e0bffe17 	ldw	r2,-8(fp)
    4d70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4d74:	e0bfff17 	ldw	r2,-4(fp)
    4d78:	10c00324 	muli	r3,r2,12
    4d7c:	00800034 	movhi	r2,0
    4d80:	1885883a 	add	r2,r3,r2
    4d84:	10d7f417 	ldw	r3,24528(r2)
    4d88:	e0bffe17 	ldw	r2,-8(fp)
    4d8c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4d90:	e0bfff17 	ldw	r2,-4(fp)
    4d94:	10c00324 	muli	r3,r2,12
    4d98:	00800034 	movhi	r2,0
    4d9c:	1885883a 	add	r2,r3,r2
    4da0:	10d7f517 	ldw	r3,24532(r2)
    4da4:	e0bffe17 	ldw	r2,-8(fp)
    4da8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4dac:	e13fff17 	ldw	r4,-4(fp)
    4db0:	0003b180 	call	3b18 <alt_release_fd>
  }
} 
    4db4:	0001883a 	nop
    4db8:	e037883a 	mov	sp,fp
    4dbc:	dfc00117 	ldw	ra,4(sp)
    4dc0:	df000017 	ldw	fp,0(sp)
    4dc4:	dec00204 	addi	sp,sp,8
    4dc8:	f800283a 	ret

00004dcc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4dcc:	defffb04 	addi	sp,sp,-20
    4dd0:	dfc00415 	stw	ra,16(sp)
    4dd4:	df000315 	stw	fp,12(sp)
    4dd8:	df000304 	addi	fp,sp,12
    4ddc:	e13fff15 	stw	r4,-4(fp)
    4de0:	e17ffe15 	stw	r5,-8(fp)
    4de4:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4de8:	01c07fc4 	movi	r7,511
    4dec:	01800044 	movi	r6,1
    4df0:	e17fff17 	ldw	r5,-4(fp)
    4df4:	01000034 	movhi	r4,0
    4df8:	2117f604 	addi	r4,r4,24536
    4dfc:	0004d1c0 	call	4d1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4e00:	01c07fc4 	movi	r7,511
    4e04:	000d883a 	mov	r6,zero
    4e08:	e17ffe17 	ldw	r5,-8(fp)
    4e0c:	01000034 	movhi	r4,0
    4e10:	2117f304 	addi	r4,r4,24524
    4e14:	0004d1c0 	call	4d1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4e18:	01c07fc4 	movi	r7,511
    4e1c:	01800044 	movi	r6,1
    4e20:	e17ffd17 	ldw	r5,-12(fp)
    4e24:	01000034 	movhi	r4,0
    4e28:	2117f904 	addi	r4,r4,24548
    4e2c:	0004d1c0 	call	4d1c <alt_open_fd>
}  
    4e30:	0001883a 	nop
    4e34:	e037883a 	mov	sp,fp
    4e38:	dfc00117 	ldw	ra,4(sp)
    4e3c:	df000017 	ldw	fp,0(sp)
    4e40:	dec00204 	addi	sp,sp,8
    4e44:	f800283a 	ret

00004e48 <alt_get_errno>:
{
    4e48:	defffe04 	addi	sp,sp,-8
    4e4c:	dfc00115 	stw	ra,4(sp)
    4e50:	df000015 	stw	fp,0(sp)
    4e54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4e58:	d0a00917 	ldw	r2,-32732(gp)
    4e5c:	10000326 	beq	r2,zero,4e6c <alt_get_errno+0x24>
    4e60:	d0a00917 	ldw	r2,-32732(gp)
    4e64:	103ee83a 	callr	r2
    4e68:	00000106 	br	4e70 <alt_get_errno+0x28>
    4e6c:	d0a01204 	addi	r2,gp,-32696
}
    4e70:	e037883a 	mov	sp,fp
    4e74:	dfc00117 	ldw	ra,4(sp)
    4e78:	df000017 	ldw	fp,0(sp)
    4e7c:	dec00204 	addi	sp,sp,8
    4e80:	f800283a 	ret

00004e84 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4e84:	defffd04 	addi	sp,sp,-12
    4e88:	df000215 	stw	fp,8(sp)
    4e8c:	df000204 	addi	fp,sp,8
    4e90:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4e94:	e0bffe17 	ldw	r2,-8(fp)
    4e98:	10800217 	ldw	r2,8(r2)
    4e9c:	10d00034 	orhi	r3,r2,16384
    4ea0:	e0bffe17 	ldw	r2,-8(fp)
    4ea4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4ea8:	e03fff15 	stw	zero,-4(fp)
    4eac:	00001a06 	br	4f18 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4eb0:	e0bfff17 	ldw	r2,-4(fp)
    4eb4:	10c00324 	muli	r3,r2,12
    4eb8:	00800034 	movhi	r2,0
    4ebc:	1885883a 	add	r2,r3,r2
    4ec0:	10d7f317 	ldw	r3,24524(r2)
    4ec4:	e0bffe17 	ldw	r2,-8(fp)
    4ec8:	10800017 	ldw	r2,0(r2)
    4ecc:	18800f1e 	bne	r3,r2,4f0c <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4ed0:	e0bfff17 	ldw	r2,-4(fp)
    4ed4:	10c00324 	muli	r3,r2,12
    4ed8:	00800034 	movhi	r2,0
    4edc:	1885883a 	add	r2,r3,r2
    4ee0:	1097f517 	ldw	r2,24532(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
    4ee4:	1000090e 	bge	r2,zero,4f0c <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
    4ee8:	e0bfff17 	ldw	r2,-4(fp)
    4eec:	10c00324 	muli	r3,r2,12
    4ef0:	00800034 	movhi	r2,0
    4ef4:	1097f304 	addi	r2,r2,24524
    4ef8:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4efc:	e0fffe17 	ldw	r3,-8(fp)
    4f00:	18800226 	beq	r3,r2,4f0c <alt_file_locked+0x88>
    {
      return -EACCES;
    4f04:	00bffcc4 	movi	r2,-13
    4f08:	00000806 	br	4f2c <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
    4f0c:	e0bfff17 	ldw	r2,-4(fp)
    4f10:	10800044 	addi	r2,r2,1
    4f14:	e0bfff15 	stw	r2,-4(fp)
    4f18:	d0a00817 	ldw	r2,-32736(gp)
    4f1c:	1007883a 	mov	r3,r2
    4f20:	e0bfff17 	ldw	r2,-4(fp)
    4f24:	18bfe22e 	bgeu	r3,r2,4eb0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4f28:	0005883a 	mov	r2,zero
}
    4f2c:	e037883a 	mov	sp,fp
    4f30:	df000017 	ldw	fp,0(sp)
    4f34:	dec00104 	addi	sp,sp,4
    4f38:	f800283a 	ret

00004f3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4f3c:	defff604 	addi	sp,sp,-40
    4f40:	dfc00915 	stw	ra,36(sp)
    4f44:	df000815 	stw	fp,32(sp)
    4f48:	df000804 	addi	fp,sp,32
    4f4c:	e13ffa15 	stw	r4,-24(fp)
    4f50:	e17ff915 	stw	r5,-28(fp)
    4f54:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4f58:	00bfffc4 	movi	r2,-1
    4f5c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    4f60:	00bffb44 	movi	r2,-19
    4f64:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    4f68:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4f6c:	d1600604 	addi	r5,gp,-32744
    4f70:	e13ffa17 	ldw	r4,-24(fp)
    4f74:	00052600 	call	5260 <alt_find_dev>
    4f78:	e0bfff15 	stw	r2,-4(fp)
    4f7c:	e0bfff17 	ldw	r2,-4(fp)
    4f80:	1000051e 	bne	r2,zero,4f98 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4f84:	e13ffa17 	ldw	r4,-24(fp)
    4f88:	00052f00 	call	52f0 <alt_find_file>
    4f8c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    4f90:	00800044 	movi	r2,1
    4f94:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4f98:	e0bfff17 	ldw	r2,-4(fp)
    4f9c:	10002926 	beq	r2,zero,5044 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4fa0:	e13fff17 	ldw	r4,-4(fp)
    4fa4:	00053f80 	call	53f8 <alt_get_fd>
    4fa8:	e0bffe15 	stw	r2,-8(fp)
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	1000030e 	bge	r2,zero,4fc0 <open+0x84>
    {
      status = index;
    4fb4:	e0bffe17 	ldw	r2,-8(fp)
    4fb8:	e0bffd15 	stw	r2,-12(fp)
    4fbc:	00002306 	br	504c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    4fc0:	e0bffe17 	ldw	r2,-8(fp)
    4fc4:	10c00324 	muli	r3,r2,12
    4fc8:	00800034 	movhi	r2,0
    4fcc:	1097f304 	addi	r2,r2,24524
    4fd0:	1885883a 	add	r2,r3,r2
    4fd4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4fd8:	e0fff917 	ldw	r3,-28(fp)
    4fdc:	00900034 	movhi	r2,16384
    4fe0:	10bfffc4 	addi	r2,r2,-1
    4fe4:	1886703a 	and	r3,r3,r2
    4fe8:	e0bffb17 	ldw	r2,-20(fp)
    4fec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4ff0:	e0bffc17 	ldw	r2,-16(fp)
    4ff4:	1000051e 	bne	r2,zero,500c <open+0xd0>
    4ff8:	e13ffb17 	ldw	r4,-20(fp)
    4ffc:	0004e840 	call	4e84 <alt_file_locked>
    5000:	e0bffd15 	stw	r2,-12(fp)
    5004:	e0bffd17 	ldw	r2,-12(fp)
    5008:	10001016 	blt	r2,zero,504c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    500c:	e0bfff17 	ldw	r2,-4(fp)
    5010:	10800317 	ldw	r2,12(r2)
    5014:	10000826 	beq	r2,zero,5038 <open+0xfc>
    5018:	e0bfff17 	ldw	r2,-4(fp)
    501c:	10800317 	ldw	r2,12(r2)
    5020:	e1fff817 	ldw	r7,-32(fp)
    5024:	e1bff917 	ldw	r6,-28(fp)
    5028:	e17ffa17 	ldw	r5,-24(fp)
    502c:	e13ffb17 	ldw	r4,-20(fp)
    5030:	103ee83a 	callr	r2
    5034:	00000106 	br	503c <open+0x100>
    5038:	0005883a 	mov	r2,zero
    503c:	e0bffd15 	stw	r2,-12(fp)
    5040:	00000206 	br	504c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5044:	00bffb44 	movi	r2,-19
    5048:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    504c:	e0bffd17 	ldw	r2,-12(fp)
    5050:	1000090e 	bge	r2,zero,5078 <open+0x13c>
  {
    alt_release_fd (index);  
    5054:	e13ffe17 	ldw	r4,-8(fp)
    5058:	0003b180 	call	3b18 <alt_release_fd>
    ALT_ERRNO = -status;
    505c:	0004e480 	call	4e48 <alt_get_errno>
    5060:	1007883a 	mov	r3,r2
    5064:	e0bffd17 	ldw	r2,-12(fp)
    5068:	0085c83a 	sub	r2,zero,r2
    506c:	18800015 	stw	r2,0(r3)
    return -1;
    5070:	00bfffc4 	movi	r2,-1
    5074:	00000106 	br	507c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    5078:	e0bffe17 	ldw	r2,-8(fp)
}
    507c:	e037883a 	mov	sp,fp
    5080:	dfc00117 	ldw	ra,4(sp)
    5084:	df000017 	ldw	fp,0(sp)
    5088:	dec00204 	addi	sp,sp,8
    508c:	f800283a 	ret

00005090 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5090:	defffa04 	addi	sp,sp,-24
    5094:	df000515 	stw	fp,20(sp)
    5098:	df000504 	addi	fp,sp,20
    509c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    50a0:	0005303a 	rdctl	r2,status
    50a4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    50a8:	e0fffc17 	ldw	r3,-16(fp)
    50ac:	00bfff84 	movi	r2,-2
    50b0:	1884703a 	and	r2,r3,r2
    50b4:	1001703a 	wrctl	status,r2
  return context;
    50b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    50bc:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    50c0:	e0bffb17 	ldw	r2,-20(fp)
    50c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    50c8:	e0bffd17 	ldw	r2,-12(fp)
    50cc:	10800017 	ldw	r2,0(r2)
    50d0:	e0fffd17 	ldw	r3,-12(fp)
    50d4:	18c00117 	ldw	r3,4(r3)
    50d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    50dc:	e0bffd17 	ldw	r2,-12(fp)
    50e0:	10800117 	ldw	r2,4(r2)
    50e4:	e0fffd17 	ldw	r3,-12(fp)
    50e8:	18c00017 	ldw	r3,0(r3)
    50ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    50f0:	e0bffd17 	ldw	r2,-12(fp)
    50f4:	e0fffd17 	ldw	r3,-12(fp)
    50f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    50fc:	e0bffd17 	ldw	r2,-12(fp)
    5100:	e0fffd17 	ldw	r3,-12(fp)
    5104:	10c00015 	stw	r3,0(r2)
} 
    5108:	0001883a 	nop
    510c:	e0bfff17 	ldw	r2,-4(fp)
    5110:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    5114:	e0bffe17 	ldw	r2,-8(fp)
    5118:	1001703a 	wrctl	status,r2
}
    511c:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    5120:	0001883a 	nop
    5124:	e037883a 	mov	sp,fp
    5128:	df000017 	ldw	fp,0(sp)
    512c:	dec00104 	addi	sp,sp,4
    5130:	f800283a 	ret

00005134 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5134:	defffb04 	addi	sp,sp,-20
    5138:	dfc00415 	stw	ra,16(sp)
    513c:	df000315 	stw	fp,12(sp)
    5140:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5144:	d0a00c17 	ldw	r2,-32720(gp)
    5148:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    514c:	d0a01917 	ldw	r2,-32668(gp)
    5150:	10800044 	addi	r2,r2,1
    5154:	d0a01915 	stw	r2,-32668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5158:	00002e06 	br	5214 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    515c:	e0bfff17 	ldw	r2,-4(fp)
    5160:	10800017 	ldw	r2,0(r2)
    5164:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5168:	e0bfff17 	ldw	r2,-4(fp)
    516c:	10800403 	ldbu	r2,16(r2)
    5170:	10803fcc 	andi	r2,r2,255
    5174:	10000426 	beq	r2,zero,5188 <alt_tick+0x54>
    5178:	d0a01917 	ldw	r2,-32668(gp)
    517c:	1000021e 	bne	r2,zero,5188 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    5180:	e0bfff17 	ldw	r2,-4(fp)
    5184:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5188:	e0bfff17 	ldw	r2,-4(fp)
    518c:	10800217 	ldw	r2,8(r2)
    5190:	d0e01917 	ldw	r3,-32668(gp)
    5194:	18801d36 	bltu	r3,r2,520c <alt_tick+0xd8>
    5198:	e0bfff17 	ldw	r2,-4(fp)
    519c:	10800403 	ldbu	r2,16(r2)
    51a0:	10803fcc 	andi	r2,r2,255
    51a4:	1000191e 	bne	r2,zero,520c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    51a8:	e0bfff17 	ldw	r2,-4(fp)
    51ac:	10800317 	ldw	r2,12(r2)
    51b0:	e0ffff17 	ldw	r3,-4(fp)
    51b4:	18c00517 	ldw	r3,20(r3)
    51b8:	1809883a 	mov	r4,r3
    51bc:	103ee83a 	callr	r2
    51c0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    51c4:	e0bffd17 	ldw	r2,-12(fp)
    51c8:	1000031e 	bne	r2,zero,51d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    51cc:	e13fff17 	ldw	r4,-4(fp)
    51d0:	00050900 	call	5090 <alt_alarm_stop>
    51d4:	00000d06 	br	520c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    51d8:	e0bfff17 	ldw	r2,-4(fp)
    51dc:	10c00217 	ldw	r3,8(r2)
    51e0:	e0bffd17 	ldw	r2,-12(fp)
    51e4:	1887883a 	add	r3,r3,r2
    51e8:	e0bfff17 	ldw	r2,-4(fp)
    51ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    51f0:	e0bfff17 	ldw	r2,-4(fp)
    51f4:	10c00217 	ldw	r3,8(r2)
    51f8:	d0a01917 	ldw	r2,-32668(gp)
    51fc:	1880032e 	bgeu	r3,r2,520c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    5200:	e0bfff17 	ldw	r2,-4(fp)
    5204:	00c00044 	movi	r3,1
    5208:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    520c:	e0bffe17 	ldw	r2,-8(fp)
    5210:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    5214:	e0ffff17 	ldw	r3,-4(fp)
    5218:	d0a00c04 	addi	r2,gp,-32720
    521c:	18bfcf1e 	bne	r3,r2,515c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    5220:	0001883a 	nop
}
    5224:	0001883a 	nop
    5228:	e037883a 	mov	sp,fp
    522c:	dfc00117 	ldw	ra,4(sp)
    5230:	df000017 	ldw	fp,0(sp)
    5234:	dec00204 	addi	sp,sp,8
    5238:	f800283a 	ret

0000523c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    523c:	deffff04 	addi	sp,sp,-4
    5240:	df000015 	stw	fp,0(sp)
    5244:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5248:	000170fa 	wrctl	ienable,zero
}
    524c:	0001883a 	nop
    5250:	e037883a 	mov	sp,fp
    5254:	df000017 	ldw	fp,0(sp)
    5258:	dec00104 	addi	sp,sp,4
    525c:	f800283a 	ret

00005260 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5260:	defffa04 	addi	sp,sp,-24
    5264:	dfc00515 	stw	ra,20(sp)
    5268:	df000415 	stw	fp,16(sp)
    526c:	df000404 	addi	fp,sp,16
    5270:	e13ffd15 	stw	r4,-12(fp)
    5274:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5278:	e0bffc17 	ldw	r2,-16(fp)
    527c:	10800017 	ldw	r2,0(r2)
    5280:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5284:	e13ffd17 	ldw	r4,-12(fp)
    5288:	000051c0 	call	51c <strlen>
    528c:	10800044 	addi	r2,r2,1
    5290:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5294:	00000d06 	br	52cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5298:	e0bfff17 	ldw	r2,-4(fp)
    529c:	10800217 	ldw	r2,8(r2)
    52a0:	e0fffe17 	ldw	r3,-8(fp)
    52a4:	180d883a 	mov	r6,r3
    52a8:	e17ffd17 	ldw	r5,-12(fp)
    52ac:	1009883a 	mov	r4,r2
    52b0:	00054e00 	call	54e0 <memcmp>
    52b4:	1000021e 	bne	r2,zero,52c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    52b8:	e0bfff17 	ldw	r2,-4(fp)
    52bc:	00000706 	br	52dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    52c0:	e0bfff17 	ldw	r2,-4(fp)
    52c4:	10800017 	ldw	r2,0(r2)
    52c8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    52cc:	e0ffff17 	ldw	r3,-4(fp)
    52d0:	e0bffc17 	ldw	r2,-16(fp)
    52d4:	18bff01e 	bne	r3,r2,5298 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    52d8:	0005883a 	mov	r2,zero
}
    52dc:	e037883a 	mov	sp,fp
    52e0:	dfc00117 	ldw	ra,4(sp)
    52e4:	df000017 	ldw	fp,0(sp)
    52e8:	dec00204 	addi	sp,sp,8
    52ec:	f800283a 	ret

000052f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    52f0:	defffb04 	addi	sp,sp,-20
    52f4:	dfc00415 	stw	ra,16(sp)
    52f8:	df000315 	stw	fp,12(sp)
    52fc:	df000304 	addi	fp,sp,12
    5300:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5304:	d0a00417 	ldw	r2,-32752(gp)
    5308:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    530c:	00003106 	br	53d4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5310:	e0bfff17 	ldw	r2,-4(fp)
    5314:	10800217 	ldw	r2,8(r2)
    5318:	1009883a 	mov	r4,r2
    531c:	000051c0 	call	51c <strlen>
    5320:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5324:	e0bfff17 	ldw	r2,-4(fp)
    5328:	10c00217 	ldw	r3,8(r2)
    532c:	e0bffe17 	ldw	r2,-8(fp)
    5330:	10bfffc4 	addi	r2,r2,-1
    5334:	1885883a 	add	r2,r3,r2
    5338:	10800003 	ldbu	r2,0(r2)
    533c:	10803fcc 	andi	r2,r2,255
    5340:	1080201c 	xori	r2,r2,128
    5344:	10bfe004 	addi	r2,r2,-128
    5348:	10800bd8 	cmpnei	r2,r2,47
    534c:	1000031e 	bne	r2,zero,535c <alt_find_file+0x6c>
    {
      len -= 1;
    5350:	e0bffe17 	ldw	r2,-8(fp)
    5354:	10bfffc4 	addi	r2,r2,-1
    5358:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    535c:	e0bffe17 	ldw	r2,-8(fp)
    5360:	e0fffd17 	ldw	r3,-12(fp)
    5364:	1885883a 	add	r2,r3,r2
    5368:	10800003 	ldbu	r2,0(r2)
    536c:	10803fcc 	andi	r2,r2,255
    5370:	1080201c 	xori	r2,r2,128
    5374:	10bfe004 	addi	r2,r2,-128
    5378:	10800be0 	cmpeqi	r2,r2,47
    537c:	1000081e 	bne	r2,zero,53a0 <alt_find_file+0xb0>
    5380:	e0bffe17 	ldw	r2,-8(fp)
    5384:	e0fffd17 	ldw	r3,-12(fp)
    5388:	1885883a 	add	r2,r3,r2
    538c:	10800003 	ldbu	r2,0(r2)
    5390:	10803fcc 	andi	r2,r2,255
    5394:	1080201c 	xori	r2,r2,128
    5398:	10bfe004 	addi	r2,r2,-128
    539c:	10000a1e 	bne	r2,zero,53c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    53a0:	e0bfff17 	ldw	r2,-4(fp)
    53a4:	10800217 	ldw	r2,8(r2)
    53a8:	e0fffe17 	ldw	r3,-8(fp)
    53ac:	180d883a 	mov	r6,r3
    53b0:	e17ffd17 	ldw	r5,-12(fp)
    53b4:	1009883a 	mov	r4,r2
    53b8:	00054e00 	call	54e0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    53bc:	1000021e 	bne	r2,zero,53c8 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    53c0:	e0bfff17 	ldw	r2,-4(fp)
    53c4:	00000706 	br	53e4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    53c8:	e0bfff17 	ldw	r2,-4(fp)
    53cc:	10800017 	ldw	r2,0(r2)
    53d0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    53d4:	e0ffff17 	ldw	r3,-4(fp)
    53d8:	d0a00404 	addi	r2,gp,-32752
    53dc:	18bfcc1e 	bne	r3,r2,5310 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    53e0:	0005883a 	mov	r2,zero
}
    53e4:	e037883a 	mov	sp,fp
    53e8:	dfc00117 	ldw	ra,4(sp)
    53ec:	df000017 	ldw	fp,0(sp)
    53f0:	dec00204 	addi	sp,sp,8
    53f4:	f800283a 	ret

000053f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    53f8:	defffc04 	addi	sp,sp,-16
    53fc:	df000315 	stw	fp,12(sp)
    5400:	df000304 	addi	fp,sp,12
    5404:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    5408:	00bffa04 	movi	r2,-24
    540c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5410:	e03fff15 	stw	zero,-4(fp)
    5414:	00001706 	br	5474 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
    5418:	e0bfff17 	ldw	r2,-4(fp)
    541c:	10c00324 	muli	r3,r2,12
    5420:	00800034 	movhi	r2,0
    5424:	1885883a 	add	r2,r3,r2
    5428:	1097f317 	ldw	r2,24524(r2)
    542c:	10000e1e 	bne	r2,zero,5468 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
    5430:	e0bfff17 	ldw	r2,-4(fp)
    5434:	11000324 	muli	r4,r2,12
    5438:	e0fffd17 	ldw	r3,-12(fp)
    543c:	00800034 	movhi	r2,0
    5440:	2085883a 	add	r2,r4,r2
    5444:	10d7f315 	stw	r3,24524(r2)
      if (i > alt_max_fd)
    5448:	d0e00817 	ldw	r3,-32736(gp)
    544c:	e0bfff17 	ldw	r2,-4(fp)
    5450:	1880020e 	bge	r3,r2,545c <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    5454:	e0bfff17 	ldw	r2,-4(fp)
    5458:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    545c:	e0bfff17 	ldw	r2,-4(fp)
    5460:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    5464:	00000706 	br	5484 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
    5468:	e0bfff17 	ldw	r2,-4(fp)
    546c:	10800044 	addi	r2,r2,1
    5470:	e0bfff15 	stw	r2,-4(fp)
    5474:	e0bfff17 	ldw	r2,-4(fp)
    5478:	10800810 	cmplti	r2,r2,32
    547c:	103fe61e 	bne	r2,zero,5418 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    5480:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5484:	e0bffe17 	ldw	r2,-8(fp)
}
    5488:	e037883a 	mov	sp,fp
    548c:	df000017 	ldw	fp,0(sp)
    5490:	dec00104 	addi	sp,sp,4
    5494:	f800283a 	ret

00005498 <atexit>:
    5498:	200b883a 	mov	r5,r4
    549c:	000f883a 	mov	r7,zero
    54a0:	000d883a 	mov	r6,zero
    54a4:	0009883a 	mov	r4,zero
    54a8:	00055581 	jmpi	5558 <__register_exitproc>

000054ac <exit>:
    54ac:	defffe04 	addi	sp,sp,-8
    54b0:	000b883a 	mov	r5,zero
    54b4:	dc000015 	stw	r16,0(sp)
    54b8:	dfc00115 	stw	ra,4(sp)
    54bc:	2021883a 	mov	r16,r4
    54c0:	00055e80 	call	55e8 <__call_exitprocs>
    54c4:	00800034 	movhi	r2,0
    54c8:	111c6b17 	ldw	r4,29100(r2)
    54cc:	20800f17 	ldw	r2,60(r4)
    54d0:	10000126 	beq	r2,zero,54d8 <exit+0x2c>
    54d4:	103ee83a 	callr	r2
    54d8:	8009883a 	mov	r4,r16
    54dc:	00057080 	call	5708 <_exit>

000054e0 <memcmp>:
    54e0:	30800130 	cmpltui	r2,r6,4
    54e4:	10000b1e 	bne	r2,zero,5514 <memcmp+0x34>
    54e8:	2144b03a 	or	r2,r4,r5
    54ec:	108000cc 	andi	r2,r2,3
    54f0:	1000171e 	bne	r2,zero,5550 <memcmp+0x70>
    54f4:	20c00017 	ldw	r3,0(r4)
    54f8:	28800017 	ldw	r2,0(r5)
    54fc:	1880141e 	bne	r3,r2,5550 <memcmp+0x70>
    5500:	31bfff04 	addi	r6,r6,-4
    5504:	30800128 	cmpgeui	r2,r6,4
    5508:	21000104 	addi	r4,r4,4
    550c:	29400104 	addi	r5,r5,4
    5510:	103ff81e 	bne	r2,zero,54f4 <memcmp+0x14>
    5514:	30bfffc4 	addi	r2,r6,-1
    5518:	30000b26 	beq	r6,zero,5548 <memcmp+0x68>
    551c:	11800044 	addi	r6,r2,1
    5520:	218d883a 	add	r6,r4,r6
    5524:	00000106 	br	552c <memcmp+0x4c>
    5528:	21800726 	beq	r4,r6,5548 <memcmp+0x68>
    552c:	20800003 	ldbu	r2,0(r4)
    5530:	28c00003 	ldbu	r3,0(r5)
    5534:	21000044 	addi	r4,r4,1
    5538:	29400044 	addi	r5,r5,1
    553c:	10fffa26 	beq	r2,r3,5528 <memcmp+0x48>
    5540:	10c5c83a 	sub	r2,r2,r3
    5544:	f800283a 	ret
    5548:	0005883a 	mov	r2,zero
    554c:	f800283a 	ret
    5550:	30bfffc4 	addi	r2,r6,-1
    5554:	003ff106 	br	551c <memcmp+0x3c>

00005558 <__register_exitproc>:
    5558:	00800034 	movhi	r2,0
    555c:	10dc6b17 	ldw	r3,29100(r2)
    5560:	18805217 	ldw	r2,328(r3)
    5564:	10001726 	beq	r2,zero,55c4 <__register_exitproc+0x6c>
    5568:	10c00117 	ldw	r3,4(r2)
    556c:	1a000808 	cmpgei	r8,r3,32
    5570:	40001b1e 	bne	r8,zero,55e0 <__register_exitproc+0x88>
    5574:	20000b26 	beq	r4,zero,55a4 <__register_exitproc+0x4c>
    5578:	181090ba 	slli	r8,r3,2
    557c:	02400044 	movi	r9,1
    5580:	48d2983a 	sll	r9,r9,r3
    5584:	1211883a 	add	r8,r2,r8
    5588:	41802215 	stw	r6,136(r8)
    558c:	11806217 	ldw	r6,392(r2)
    5590:	21000098 	cmpnei	r4,r4,2
    5594:	324cb03a 	or	r6,r6,r9
    5598:	11806215 	stw	r6,392(r2)
    559c:	41c04215 	stw	r7,264(r8)
    55a0:	20000b26 	beq	r4,zero,55d0 <__register_exitproc+0x78>
    55a4:	19000084 	addi	r4,r3,2
    55a8:	200890ba 	slli	r4,r4,2
    55ac:	18c00044 	addi	r3,r3,1
    55b0:	10c00115 	stw	r3,4(r2)
    55b4:	1105883a 	add	r2,r2,r4
    55b8:	11400015 	stw	r5,0(r2)
    55bc:	0005883a 	mov	r2,zero
    55c0:	f800283a 	ret
    55c4:	18805304 	addi	r2,r3,332
    55c8:	18805215 	stw	r2,328(r3)
    55cc:	003fe606 	br	5568 <__register_exitproc+0x10>
    55d0:	11006317 	ldw	r4,396(r2)
    55d4:	2252b03a 	or	r9,r4,r9
    55d8:	12406315 	stw	r9,396(r2)
    55dc:	003ff106 	br	55a4 <__register_exitproc+0x4c>
    55e0:	00bfffc4 	movi	r2,-1
    55e4:	f800283a 	ret

000055e8 <__call_exitprocs>:
    55e8:	defff704 	addi	sp,sp,-36
    55ec:	00800034 	movhi	r2,0
    55f0:	dcc00315 	stw	r19,12(sp)
    55f4:	14dc6b17 	ldw	r19,29100(r2)
    55f8:	dc800215 	stw	r18,8(sp)
    55fc:	dfc00815 	stw	ra,32(sp)
    5600:	9c805217 	ldw	r18,328(r19)
    5604:	ddc00715 	stw	r23,28(sp)
    5608:	dd800615 	stw	r22,24(sp)
    560c:	dd400515 	stw	r21,20(sp)
    5610:	dd000415 	stw	r20,16(sp)
    5614:	dc400115 	stw	r17,4(sp)
    5618:	dc000015 	stw	r16,0(sp)
    561c:	90001026 	beq	r18,zero,5660 <__call_exitprocs+0x78>
    5620:	202b883a 	mov	r21,r4
    5624:	282d883a 	mov	r22,r5
    5628:	05000044 	movi	r20,1
    562c:	94000117 	ldw	r16,4(r18)
    5630:	847fffc4 	addi	r17,r16,-1
    5634:	88000a16 	blt	r17,zero,5660 <__call_exitprocs+0x78>
    5638:	84000044 	addi	r16,r16,1
    563c:	802090ba 	slli	r16,r16,2
    5640:	9421883a 	add	r16,r18,r16
    5644:	b0001126 	beq	r22,zero,568c <__call_exitprocs+0xa4>
    5648:	80804017 	ldw	r2,256(r16)
    564c:	15800f26 	beq	r2,r22,568c <__call_exitprocs+0xa4>
    5650:	8c7fffc4 	addi	r17,r17,-1
    5654:	88bfffd8 	cmpnei	r2,r17,-1
    5658:	843fff04 	addi	r16,r16,-4
    565c:	103ff91e 	bne	r2,zero,5644 <__call_exitprocs+0x5c>
    5660:	dfc00817 	ldw	ra,32(sp)
    5664:	ddc00717 	ldw	r23,28(sp)
    5668:	dd800617 	ldw	r22,24(sp)
    566c:	dd400517 	ldw	r21,20(sp)
    5670:	dd000417 	ldw	r20,16(sp)
    5674:	dcc00317 	ldw	r19,12(sp)
    5678:	dc800217 	ldw	r18,8(sp)
    567c:	dc400117 	ldw	r17,4(sp)
    5680:	dc000017 	ldw	r16,0(sp)
    5684:	dec00904 	addi	sp,sp,36
    5688:	f800283a 	ret
    568c:	90800117 	ldw	r2,4(r18)
    5690:	81800017 	ldw	r6,0(r16)
    5694:	10bfffc4 	addi	r2,r2,-1
    5698:	14401726 	beq	r2,r17,56f8 <__call_exitprocs+0x110>
    569c:	80000015 	stw	zero,0(r16)
    56a0:	303feb26 	beq	r6,zero,5650 <__call_exitprocs+0x68>
    56a4:	a446983a 	sll	r3,r20,r17
    56a8:	90806217 	ldw	r2,392(r18)
    56ac:	95c00117 	ldw	r23,4(r18)
    56b0:	1884703a 	and	r2,r3,r2
    56b4:	1000081e 	bne	r2,zero,56d8 <__call_exitprocs+0xf0>
    56b8:	303ee83a 	callr	r6
    56bc:	90c00117 	ldw	r3,4(r18)
    56c0:	98805217 	ldw	r2,328(r19)
    56c4:	1dc0011e 	bne	r3,r23,56cc <__call_exitprocs+0xe4>
    56c8:	90bfe126 	beq	r18,r2,5650 <__call_exitprocs+0x68>
    56cc:	103fe426 	beq	r2,zero,5660 <__call_exitprocs+0x78>
    56d0:	1025883a 	mov	r18,r2
    56d4:	003fd506 	br	562c <__call_exitprocs+0x44>
    56d8:	90806317 	ldw	r2,396(r18)
    56dc:	81002017 	ldw	r4,128(r16)
    56e0:	1886703a 	and	r3,r3,r2
    56e4:	1800061e 	bne	r3,zero,5700 <__call_exitprocs+0x118>
    56e8:	200b883a 	mov	r5,r4
    56ec:	a809883a 	mov	r4,r21
    56f0:	303ee83a 	callr	r6
    56f4:	003ff106 	br	56bc <__call_exitprocs+0xd4>
    56f8:	94400115 	stw	r17,4(r18)
    56fc:	003fe806 	br	56a0 <__call_exitprocs+0xb8>
    5700:	303ee83a 	callr	r6
    5704:	003fed06 	br	56bc <__call_exitprocs+0xd4>

00005708 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5708:	defffd04 	addi	sp,sp,-12
    570c:	df000215 	stw	fp,8(sp)
    5710:	df000204 	addi	fp,sp,8
    5714:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    5718:	0001883a 	nop
    571c:	e0bffe17 	ldw	r2,-8(fp)
    5720:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    5724:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5728:	10000226 	beq	r2,zero,5734 <_exit+0x2c>
    ALT_SIM_FAIL();
    572c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    5730:	00000106 	br	5738 <_exit+0x30>
    ALT_SIM_PASS();
    5734:	002af0b0 	cmpltui	zero,zero,43970
}
    5738:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    573c:	003fff06 	br	573c <_exit+0x34>
